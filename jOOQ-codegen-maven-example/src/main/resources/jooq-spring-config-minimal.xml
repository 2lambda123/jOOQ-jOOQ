<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>
    <!-- Using Apache DBCP as a connection pooling library.
         Replace this with your preferred DataSource implementation -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
        init-method="createDataSource" destroy-method="close">
        <property name="driverClassName" value="org.h2.Driver" />
        <property name="url" value="jdbc:h2:~/maven-test" />
        <property name="username" value="sa" />
        <property name="password" value="" />
    </bean>

    <!-- Using Spring JDBC for transaction management -->
    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="transactionAwareDataSource"
        class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <constructor-arg ref="dataSource" />
    </bean>

    <!-- Bridging Spring JDBC data sources to jOOQ's ConnectionProvider -->
    <bean class="org.jooq.impl.DataSourceConnectionProvider" name="connectionProvider">
        <constructor-arg ref="transactionAwareDataSource" />
    </bean>

    <bean id="dsl" class="org.jooq.impl.DefaultDSLContext">
        <constructor-arg ref="config" />
    </bean>

    <!-- Invoking an internal, package-private constructor for the example
         Implement your own Configuration for more reliable behaviour -->
    <bean class="org.jooq.impl.DefaultConfiguration" name="config">
        <constructor-arg index="0" ref="connectionProvider" />
        <constructor-arg index="1"><null /></constructor-arg>
        <constructor-arg index="2"><value type="org.jooq.SQLDialect">H2</value></constructor-arg>
        <constructor-arg index="3"><null /></constructor-arg>
        <constructor-arg index="4"><null /></constructor-arg>
    </bean>
</beans>