/**
 * This class is generated by jOOQ
 */
package org.jooq.test.jdbcoracle.generatedclasses.test.tables.daos;


import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.jooq.test.jdbcoracle.generatedclasses.test.tables.TExoticTypes;
import org.jooq.test.jdbcoracle.generatedclasses.test.tables.records.TExoticTypesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TExoticTypesDao extends DAOImpl<TExoticTypesRecord, org.jooq.test.jdbcoracle.generatedclasses.test.tables.pojos.TExoticTypes, Integer> {

	/**
	 * Create a new TExoticTypesDao without any configuration
	 */
	public TExoticTypesDao() {
		super(TExoticTypes.T_EXOTIC_TYPES, org.jooq.test.jdbcoracle.generatedclasses.test.tables.pojos.TExoticTypes.class);
	}

	/**
	 * Create a new TExoticTypesDao with an attached configuration
	 */
	public TExoticTypesDao(Configuration configuration) {
		super(TExoticTypes.T_EXOTIC_TYPES, org.jooq.test.jdbcoracle.generatedclasses.test.tables.pojos.TExoticTypes.class, configuration);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected Integer getId(org.jooq.test.jdbcoracle.generatedclasses.test.tables.pojos.TExoticTypes object) {
		return object.getId();
	}

	/**
	 * Fetch records that have <code>ID IN (values)</code>
	 */
	public List<org.jooq.test.jdbcoracle.generatedclasses.test.tables.pojos.TExoticTypes> fetchById(Integer... values) {
		return fetch(TExoticTypes.ID, values);
	}

	/**
	 * Fetch a unique record that has <code>ID = value</code>
	 */
	public org.jooq.test.jdbcoracle.generatedclasses.test.tables.pojos.TExoticTypes fetchOneById(Integer value) {
		return fetchOne(TExoticTypes.ID, value);
	}

	/**
	 * Fetch records that have <code>UU IN (values)</code>
	 */
	public List<org.jooq.test.jdbcoracle.generatedclasses.test.tables.pojos.TExoticTypes> fetchByUu(UUID... values) {
		return fetch(TExoticTypes.UU, values);
	}

	/**
	 * Fetch records that have <code>JAVA_IO_SERIALIZABLE IN (values)</code>
	 */
	public List<org.jooq.test.jdbcoracle.generatedclasses.test.tables.pojos.TExoticTypes> fetchByJavaIoSerializable(byte[]... values) {
		return fetch(TExoticTypes.JAVA_IO_SERIALIZABLE, values);
	}

	/**
	 * Fetch records that have <code>PLAIN_SQL_CONVERTER_XML IN (values)</code>
	 */
	public List<org.jooq.test.jdbcoracle.generatedclasses.test.tables.pojos.TExoticTypes> fetchByPlainSqlConverterXml(String... values) {
		return fetch(TExoticTypes.PLAIN_SQL_CONVERTER_XML, values);
	}

	/**
	 * Fetch records that have <code>PLAIN_SQL_BINDING_XML IN (values)</code>
	 */
	public List<org.jooq.test.jdbcoracle.generatedclasses.test.tables.pojos.TExoticTypes> fetchByPlainSqlBindingXml(String... values) {
		return fetch(TExoticTypes.PLAIN_SQL_BINDING_XML, values);
	}

	/**
	 * Fetch records that have <code>ORACLE_XML_AS_IS IN (values)</code>
	 */
	public List<org.jooq.test.jdbcoracle.generatedclasses.test.tables.pojos.TExoticTypes> fetchByOracleXmlAsIs(Object... values) {
		return fetch(TExoticTypes.ORACLE_XML_AS_IS, values);
	}

	/**
	 * Fetch records that have <code>ORACLE_XML_AS_DOCUMENT IN (values)</code>
	 */
	public List<org.jooq.test.jdbcoracle.generatedclasses.test.tables.pojos.TExoticTypes> fetchByOracleXmlAsDocument(Object... values) {
		return fetch(TExoticTypes.ORACLE_XML_AS_DOCUMENT, values);
	}

	/**
	 * Fetch records that have <code>ORACLE_XML_AS_SQLXML IN (values)</code>
	 */
	public List<org.jooq.test.jdbcoracle.generatedclasses.test.tables.pojos.TExoticTypes> fetchByOracleXmlAsSqlxml(Object... values) {
		return fetch(TExoticTypes.ORACLE_XML_AS_SQLXML, values);
	}
}
