/**
 * This class is generated by jOOQ
 */
package org.jooq.test.jdbcoracle.generatedclasses.test.tables.records;


import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;
import org.jooq.test.jdbcoracle.generatedclasses.test.tables.MLibrary;
import org.jooq.test.jdbcoracle.generatedclasses.test.tables.interfaces.IMLibrary;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MLibraryRecord extends TableRecordImpl<MLibraryRecord> implements Record2<String, String>, IMLibrary {

	private static final long serialVersionUID = 369785966;

	/**
	 * Setter for <code>TEST.M_LIBRARY.AUTHOR</code>.
	 */
	@Override
	public void setAuthor(String value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>TEST.M_LIBRARY.AUTHOR</code>.
	 */
	@Override
	public String getAuthor() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>TEST.M_LIBRARY.TITLE</code>.
	 */
	@Override
	public void setTitle(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>TEST.M_LIBRARY.TITLE</code>.
	 */
	@Override
	public String getTitle() {
		return (String) getValue(1);
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<String, String> fieldsRow() {
		return (Row2) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<String, String> valuesRow() {
		return (Row2) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field1() {
		return MLibrary.AUTHOR;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return MLibrary.TITLE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value1() {
		return getAuthor();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getTitle();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MLibraryRecord value1(String value) {
		setAuthor(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MLibraryRecord value2(String value) {
		setTitle(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MLibraryRecord values(String value1, String value2) {
		value1(value1);
		value2(value2);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IMLibrary from) {
		setAuthor(from.getAuthor());
		setTitle(from.getTitle());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IMLibrary> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached MLibraryRecord
	 */
	public MLibraryRecord() {
		super(MLibrary.M_LIBRARY);
	}

	/**
	 * Create a detached, initialised MLibraryRecord
	 */
	public MLibraryRecord(String author, String title) {
		super(MLibrary.M_LIBRARY);

		setValue(0, author);
		setValue(1, title);
	}
}
