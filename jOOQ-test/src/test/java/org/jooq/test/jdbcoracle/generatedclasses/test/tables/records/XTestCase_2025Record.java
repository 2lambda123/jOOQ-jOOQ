/**
 * This class is generated by jOOQ
 */
package org.jooq.test.jdbcoracle.generatedclasses.test.tables.records;


import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;
import org.jooq.test.jdbcoracle.generatedclasses.test.tables.XTestCase_2025;
import org.jooq.test.jdbcoracle.generatedclasses.test.tables.interfaces.IXTestCase_2025;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class XTestCase_2025Record extends TableRecordImpl<XTestCase_2025Record> implements Record2<Integer, String>, IXTestCase_2025 {

	private static final long serialVersionUID = -1998650858;

	/**
	 * Setter for <code>TEST.X_TEST_CASE_2025.REF_ID</code>.
	 */
	@Override
	public void setRefId(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>TEST.X_TEST_CASE_2025.REF_ID</code>.
	 */
	@Override
	public Integer getRefId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>TEST.X_TEST_CASE_2025.REF_NAME</code>.
	 */
	@Override
	public void setRefName(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>TEST.X_TEST_CASE_2025.REF_NAME</code>.
	 */
	@Override
	public String getRefName() {
		return (String) getValue(1);
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Integer, String> fieldsRow() {
		return (Row2) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Integer, String> valuesRow() {
		return (Row2) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return XTestCase_2025.REF_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return XTestCase_2025.REF_NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getRefId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getRefName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public XTestCase_2025Record value1(Integer value) {
		setRefId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public XTestCase_2025Record value2(String value) {
		setRefName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public XTestCase_2025Record values(Integer value1, String value2) {
		value1(value1);
		value2(value2);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IXTestCase_2025 from) {
		setRefId(from.getRefId());
		setRefName(from.getRefName());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IXTestCase_2025> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached XTestCase_2025Record
	 */
	public XTestCase_2025Record() {
		super(XTestCase_2025.X_TEST_CASE_2025);
	}

	/**
	 * Create a detached, initialised XTestCase_2025Record
	 */
	public XTestCase_2025Record(Integer refId, String refName) {
		super(XTestCase_2025.X_TEST_CASE_2025);

		setValue(0, refId);
		setValue(1, refName);
	}
}
