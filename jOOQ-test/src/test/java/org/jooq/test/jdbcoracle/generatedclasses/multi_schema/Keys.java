/**
 * This class is generated by jOOQ
 */
package org.jooq.test.jdbcoracle.generatedclasses.multi_schema;


import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;
import org.jooq.test.jdbcoracle.generatedclasses.multi_schema.tables.TAuthor;
import org.jooq.test.jdbcoracle.generatedclasses.multi_schema.tables.TBook;
import org.jooq.test.jdbcoracle.generatedclasses.multi_schema.tables.TBookSale;
import org.jooq.test.jdbcoracle.generatedclasses.multi_schema.tables.records.TAuthorRecord;
import org.jooq.test.jdbcoracle.generatedclasses.multi_schema.tables.records.TBookRecord;
import org.jooq.test.jdbcoracle.generatedclasses.multi_schema.tables.records.TBookSaleRecord;


/**
 * A class modelling foreign key relationships between tables of the <code>MULTI_SCHEMA</code> 
 * schema
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------


	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final UniqueKey<TAuthorRecord> PK_T_AUTHOR = UniqueKeys0.PK_T_AUTHOR;
	public static final UniqueKey<TBookRecord> PK_T_BOOK = UniqueKeys0.PK_T_BOOK;
	public static final UniqueKey<TBookSaleRecord> PK_T_BOOK_SALE = UniqueKeys0.PK_T_BOOK_SALE;

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------


	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private static class UniqueKeys0 extends AbstractKeys {
		public static final UniqueKey<TAuthorRecord> PK_T_AUTHOR = createUniqueKey(TAuthor.T_AUTHOR, TAuthor.ID);
		public static final UniqueKey<TBookRecord> PK_T_BOOK = createUniqueKey(TBook.T_BOOK, TBook.ID);
		public static final UniqueKey<TBookSaleRecord> PK_T_BOOK_SALE = createUniqueKey(TBookSale.T_BOOK_SALE, TBookSale.ID);
	}
}
