/**
 * This class is generated by jOOQ
 */
package org.jooq.test.mysql.generatedclasses;


import java.math.BigDecimal;

import org.jooq.Configuration;
import org.jooq.Field;
import org.jooq.test.mysql.generatedclasses.routines.F317;
import org.jooq.test.mysql.generatedclasses.routines.FAuthorExists;
import org.jooq.test.mysql.generatedclasses.routines.FNumber;
import org.jooq.test.mysql.generatedclasses.routines.FOne;
import org.jooq.test.mysql.generatedclasses.routines.Fp1908_FUNCTION;
import org.jooq.test.mysql.generatedclasses.routines.Fp1908_PROCEDURE;
import org.jooq.test.mysql.generatedclasses.routines.P2412;
import org.jooq.test.mysql.generatedclasses.routines.P391;
import org.jooq.test.mysql.generatedclasses.routines.PAuthorExists;
import org.jooq.test.mysql.generatedclasses.routines.PCreateAuthor;
import org.jooq.test.mysql.generatedclasses.routines.PCreateAuthorByName;
import org.jooq.test.mysql.generatedclasses.routines.PResults;
import org.jooq.test.mysql.generatedclasses.routines.PResultsAndOutParameters;
import org.jooq.test.mysql.generatedclasses.routines.PUnused;


/**
 * Convenience access to all stored procedures and functions in test
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Routines {

	/**
	 * Call <code>test.f317</code>
	 */
	public static Integer f317(Configuration configuration, Integer p1, Integer p2, Integer p3, Integer p4) {
		F317 f = new F317();
		f.setP1(p1);
		f.setP2(p2);
		f.setP3(p3);
		f.setP4(p4);

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>test.f317</code> as a field
	 */
	public static Field<Integer> f317(Integer p1, Integer p2, Integer p3, Integer p4) {
		F317 f = new F317();
		f.setP1(p1);
		f.setP2(p2);
		f.setP3(p3);
		f.setP4(p4);

		return f.asField();
	}

	/**
	 * Get <code>test.f317</code> as a field
	 */
	public static Field<Integer> f317(Field<Integer> p1, Field<Integer> p2, Field<Integer> p3, Field<Integer> p4) {
		F317 f = new F317();
		f.setP1(p1);
		f.setP2(p2);
		f.setP3(p3);
		f.setP4(p4);

		return f.asField();
	}

	/**
	 * Call <code>test.fp1908</code>
	 */
	public static Integer fp1908_FUNCTION(Configuration configuration, Integer p1) {
		Fp1908_FUNCTION f = new Fp1908_FUNCTION();
		f.setP1(p1);

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>test.fp1908</code> as a field
	 */
	public static Field<Integer> fp1908_FUNCTION(Integer p1) {
		Fp1908_FUNCTION f = new Fp1908_FUNCTION();
		f.setP1(p1);

		return f.asField();
	}

	/**
	 * Get <code>test.fp1908</code> as a field
	 */
	public static Field<Integer> fp1908_FUNCTION(Field<Integer> p1) {
		Fp1908_FUNCTION f = new Fp1908_FUNCTION();
		f.setP1(p1);

		return f.asField();
	}

	/**
	 * Call <code>test.fp1908</code>
	 */
	public static Integer fp1908_PROCEDURE(Configuration configuration, Integer p1) {
		Fp1908_PROCEDURE p = new Fp1908_PROCEDURE();
		p.setP1(p1);

		p.execute(configuration);
		return p.getP2();
	}

	/**
	 * Call <code>test.f_author_exists</code>
	 */
	public static Integer fAuthorExists(Configuration configuration, String authorName) {
		FAuthorExists f = new FAuthorExists();
		f.setAuthorName(authorName);

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>test.f_author_exists</code> as a field
	 */
	public static Field<Integer> fAuthorExists(String authorName) {
		FAuthorExists f = new FAuthorExists();
		f.setAuthorName(authorName);

		return f.asField();
	}

	/**
	 * Get <code>test.f_author_exists</code> as a field
	 */
	public static Field<Integer> fAuthorExists(Field<String> authorName) {
		FAuthorExists f = new FAuthorExists();
		f.setAuthorName(authorName);

		return f.asField();
	}

	/**
	 * Call <code>test.f_number</code>
	 */
	public static Integer fNumber(Configuration configuration, Integer n) {
		FNumber f = new FNumber();
		f.setN(n);

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>test.f_number</code> as a field
	 */
	public static Field<Integer> fNumber(Integer n) {
		FNumber f = new FNumber();
		f.setN(n);

		return f.asField();
	}

	/**
	 * Get <code>test.f_number</code> as a field
	 */
	public static Field<Integer> fNumber(Field<Integer> n) {
		FNumber f = new FNumber();
		f.setN(n);

		return f.asField();
	}

	/**
	 * Call <code>test.f_one</code>
	 */
	public static Integer fOne(Configuration configuration) {
		FOne f = new FOne();

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>test.f_one</code> as a field
	 */
	public static Field<Integer> fOne() {
		FOne f = new FOne();

		return f.asField();
	}

	/**
	 * Call <code>test.p2412</code>
	 */
	public static P2412 p2412(Configuration configuration, Integer pIn_1, Integer pIn_2, BigDecimal pInOut) {
		P2412 p = new P2412();
		p.setPIn_1(pIn_1);
		p.setPIn_2(pIn_2);
		p.setPInOut(pInOut);

		p.execute(configuration);
		return p;
	}

	/**
	 * Call <code>test.p391</code>
	 */
	public static P391 p391(Configuration configuration, Integer i1, Integer io1, Integer io2, Integer i2) {
		P391 p = new P391();
		p.setI1(i1);
		p.setIo1(io1);
		p.setIo2(io2);
		p.setI2(i2);

		p.execute(configuration);
		return p;
	}

	/**
	 * Call <code>test.p_author_exists</code>
	 */
	public static Integer pAuthorExists(Configuration configuration, String authorName) {
		PAuthorExists p = new PAuthorExists();
		p.setAuthorName(authorName);

		p.execute(configuration);
		return p.getResult();
	}

	/**
	 * Call <code>test.p_create_author</code>
	 */
	public static void pCreateAuthor(Configuration configuration) {
		PCreateAuthor p = new PCreateAuthor();

		p.execute(configuration);
	}

	/**
	 * Call <code>test.p_create_author_by_name</code>
	 */
	public static void pCreateAuthorByName(Configuration configuration, String firstName, String lastName) {
		PCreateAuthorByName p = new PCreateAuthorByName();
		p.setFirstName(firstName);
		p.setLastName(lastName);

		p.execute(configuration);
	}

	/**
	 * Call <code>test.p_results</code>
	 */
	public static void pResults(Configuration configuration, Integer pResultSets) {
		PResults p = new PResults();
		p.setPResultSets(pResultSets);

		p.execute(configuration);
	}

	/**
	 * Call <code>test.p_results_and_out_parameters</code>
	 */
	public static Integer pResultsAndOutParameters(Configuration configuration, Integer pResultSets) {
		PResultsAndOutParameters p = new PResultsAndOutParameters();
		p.setPResultSets(pResultSets);

		p.execute(configuration);
		return p.getPCount();
	}

	/**
	 * Call <code>test.p_unused</code>
	 */
	public static PUnused pUnused(Configuration configuration, String in1, Byte out2) {
		PUnused p = new PUnused();
		p.setIn1(in1);
		p.setOut2(out2);

		p.execute(configuration);
		return p;
	}
}
