/**
 * This class is generated by jOOQ
 */
package org.jooq.test.mysql.generatedclasses.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.test.all.converters.UUIDBinaryConverter;
import org.jooq.test.mysql.generatedclasses.Keys;
import org.jooq.test.mysql.generatedclasses.Test;
import org.jooq.test.mysql.generatedclasses.tables.records.TExoticTypesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TExoticTypes extends TableImpl<TExoticTypesRecord> {

	private static final long serialVersionUID = -1472571895;

	/**
	 * The reference instance of <code>test.t_exotic_types</code>
	 */
	public static final TExoticTypes T_EXOTIC_TYPES = new TExoticTypes();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TExoticTypesRecord> getRecordType() {
		return TExoticTypesRecord.class;
	}

	/**
	 * The column <code>test.t_exotic_types.ID</code>.
	 */
	public static final TableField<TExoticTypesRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), T_EXOTIC_TYPES, "");

	/**
	 * The column <code>test.t_exotic_types.UU</code>.
	 */
	public static final TableField<TExoticTypesRecord, UUID> UU = createField("UU", org.jooq.impl.SQLDataType.BINARY.length(16), T_EXOTIC_TYPES, "", new UUIDBinaryConverter());

	/**
	 * No further instances allowed
	 */
	private TExoticTypes() {
		this("t_exotic_types", null);
	}

	private TExoticTypes(String alias, Table<TExoticTypesRecord> aliased) {
		this(alias, aliased, null);
	}

	private TExoticTypes(String alias, Table<TExoticTypesRecord> aliased, Field<?>[] parameters) {
		super(alias, Test.TEST, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<TExoticTypesRecord> getPrimaryKey() {
		return Keys.KEY_T_EXOTIC_TYPES_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<TExoticTypesRecord>> getKeys() {
		return Arrays.<UniqueKey<TExoticTypesRecord>>asList(Keys.KEY_T_EXOTIC_TYPES_PRIMARY);
	}
}
