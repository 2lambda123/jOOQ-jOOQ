/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oracle.generatedclasses.test.udt;


import java.math.BigDecimal;

import org.jooq.Configuration;
import org.jooq.Field;
import org.jooq.Package;
import org.jooq.UDTField;
import org.jooq.impl.UDTImpl;
import org.jooq.test.oracle.generatedclasses.test.Test;
import org.jooq.test.oracle.generatedclasses.test.udt.records.UAuthorTypeRecord;
import org.jooq.test.oracle.generatedclasses.test.udt.u_author_type.CountBooks;
import org.jooq.test.oracle.generatedclasses.test.udt.u_author_type.GetAuthor;
import org.jooq.test.oracle.generatedclasses.test.udt.u_author_type.GetBooks;
import org.jooq.test.oracle.generatedclasses.test.udt.u_author_type.Load;
import org.jooq.test.oracle.generatedclasses.test.udt.u_author_type.NewAuthor;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UAuthorType extends UDTImpl<UAuthorTypeRecord> implements Package {

	private static final long serialVersionUID = -507417494;

	/**
	 * The reference instance of <code>TEST.U_AUTHOR_TYPE</code>
	 */
	public static final UAuthorType U_AUTHOR_TYPE = new UAuthorType();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<UAuthorTypeRecord> getRecordType() {
		return UAuthorTypeRecord.class;
	}

	/**
	 * The attribute <code>TEST.U_AUTHOR_TYPE.ID</code>.
	 */
	public static final UDTField<UAuthorTypeRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER, U_AUTHOR_TYPE, "");

	/**
	 * The attribute <code>TEST.U_AUTHOR_TYPE.FIRST_NAME</code>.
	 */
	public static final UDTField<UAuthorTypeRecord, String> FIRST_NAME = createField("FIRST_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(50), U_AUTHOR_TYPE, "");

	/**
	 * The attribute <code>TEST.U_AUTHOR_TYPE.LAST_NAME</code>.
	 */
	public static final UDTField<UAuthorTypeRecord, String> LAST_NAME = createField("LAST_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(50), U_AUTHOR_TYPE, "");

	/**
	 * Call <code>TEST.U_AUTHOR_TYPE.COUNT_BOOKS</code>
	 */
	public static BigDecimal countBooks(Configuration configuration, UAuthorTypeRecord self) {
		CountBooks f = new CountBooks();
		f.setSelf(self);

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.U_AUTHOR_TYPE.COUNT_BOOKS</code> as a field
	 */
	public static Field<BigDecimal> countBooks(UAuthorTypeRecord self) {
		CountBooks f = new CountBooks();
		f.setSelf(self);

		return f.asField();
	}

	/**
	 * Get <code>TEST.U_AUTHOR_TYPE.COUNT_BOOKS</code> as a field
	 */
	public static Field<BigDecimal> countBooks(Field<UAuthorTypeRecord> self) {
		CountBooks f = new CountBooks();
		f.setSelf(self);

		return f.asField();
	}

	/**
	 * Call <code>TEST.U_AUTHOR_TYPE.GET_AUTHOR</code>
	 */
	public static UAuthorTypeRecord getAuthor(Configuration configuration, Number pId) {
		GetAuthor f = new GetAuthor();
		f.setPId(pId);

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.U_AUTHOR_TYPE.GET_AUTHOR</code> as a field
	 */
	public static Field<UAuthorTypeRecord> getAuthor(Number pId) {
		GetAuthor f = new GetAuthor();
		f.setPId(pId);

		return f.asField();
	}

	/**
	 * Get <code>TEST.U_AUTHOR_TYPE.GET_AUTHOR</code> as a field
	 */
	public static Field<UAuthorTypeRecord> getAuthor(Field<? extends Number> pId) {
		GetAuthor f = new GetAuthor();
		f.setPId(pId);

		return f.asField();
	}

	/**
	 * Call <code>TEST.U_AUTHOR_TYPE.GET_BOOKS</code>
	 */
	public static GetBooks getBooks(Configuration configuration, UAuthorTypeRecord self) {
		GetBooks p = new GetBooks();
		p.setSelf(self);

		p.execute(configuration);
		return p;
	}

	/**
	 * Call <code>TEST.U_AUTHOR_TYPE.LOAD</code>
	 */
	public static UAuthorTypeRecord load(Configuration configuration, UAuthorTypeRecord self) {
		Load p = new Load();
		p.setSelf(self);

		p.execute(configuration);
		return p.getSelf();
	}

	/**
	 * Call <code>TEST.U_AUTHOR_TYPE.NEW_AUTHOR</code>
	 */
	public static UAuthorTypeRecord newAuthor(Configuration configuration, Number pId, String pFirstName, String pLastName) {
		NewAuthor p = new NewAuthor();
		p.setPId(pId);
		p.setPFirstName(pFirstName);
		p.setPLastName(pLastName);

		p.execute(configuration);
		return p.getPAuthor();
	}

	/**
	 * No further instances allowed
	 */
	private UAuthorType() {
		super("U_AUTHOR_TYPE", Test.TEST);

		// Initialise data type
		getDataType();
	}
}
