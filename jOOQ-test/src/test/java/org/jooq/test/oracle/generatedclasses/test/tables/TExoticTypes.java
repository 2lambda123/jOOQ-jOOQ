/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oracle.generatedclasses.test.tables;


import java.io.Serializable;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.test.all.bindings.SerializedBinding;
import org.jooq.test.oracle.generatedclasses.sys.udt.records.XmltypeRecord;
import org.jooq.test.oracle.generatedclasses.test.Keys;
import org.jooq.test.oracle.generatedclasses.test.Test;
import org.jooq.test.oracle.generatedclasses.test.tables.records.TExoticTypesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TExoticTypes extends TableImpl<TExoticTypesRecord> {

	private static final long serialVersionUID = -1843119473;

	/**
	 * The reference instance of <code>TEST.T_EXOTIC_TYPES</code>
	 */
	public static final TExoticTypes T_EXOTIC_TYPES = new TExoticTypes();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TExoticTypesRecord> getRecordType() {
		return TExoticTypesRecord.class;
	}

	/**
	 * The column <code>TEST.T_EXOTIC_TYPES.ID</code>.
	 */
	public final TableField<TExoticTypesRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>TEST.T_EXOTIC_TYPES.UU</code>.
	 */
	public final TableField<TExoticTypesRecord, UUID> UU = createField("UU", org.jooq.impl.SQLDataType.UUID, this, "");

	/**
	 * The column <code>TEST.T_EXOTIC_TYPES.JAVA_IO_SERIALIZABLE</code>.
	 */
	public final TableField<TExoticTypesRecord, Serializable> JAVA_IO_SERIALIZABLE = createField("JAVA_IO_SERIALIZABLE", org.jooq.impl.SQLDataType.BLOB, this, "", new SerializedBinding());

	/**
	 * The column <code>TEST.T_EXOTIC_TYPES.PLAIN_SQL_CONVERTER_XML</code>.
	 */
	public final TableField<TExoticTypesRecord, String> PLAIN_SQL_CONVERTER_XML = createField("PLAIN_SQL_CONVERTER_XML", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>TEST.T_EXOTIC_TYPES.PLAIN_SQL_BINDING_XML</code>.
	 */
	public final TableField<TExoticTypesRecord, String> PLAIN_SQL_BINDING_XML = createField("PLAIN_SQL_BINDING_XML", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>TEST.T_EXOTIC_TYPES.ORACLE_XML_AS_IS</code>.
	 */
	public final TableField<TExoticTypesRecord, XmltypeRecord> ORACLE_XML_AS_IS = createField("ORACLE_XML_AS_IS", org.jooq.test.oracle.generatedclasses.sys.udt.Xmltype.XMLTYPE.getDataType(), this, "");

	/**
	 * The column <code>TEST.T_EXOTIC_TYPES.ORACLE_XML_AS_DOCUMENT</code>.
	 */
	public final TableField<TExoticTypesRecord, XmltypeRecord> ORACLE_XML_AS_DOCUMENT = createField("ORACLE_XML_AS_DOCUMENT", org.jooq.test.oracle.generatedclasses.sys.udt.Xmltype.XMLTYPE.getDataType(), this, "");

	/**
	 * Create a <code>TEST.T_EXOTIC_TYPES</code> table reference
	 */
	public TExoticTypes() {
		this("T_EXOTIC_TYPES", null);
	}

	/**
	 * Create an aliased <code>TEST.T_EXOTIC_TYPES</code> table reference
	 */
	public TExoticTypes(String alias) {
		this(alias, T_EXOTIC_TYPES);
	}

	private TExoticTypes(String alias, Table<TExoticTypesRecord> aliased) {
		this(alias, aliased, null);
	}

	private TExoticTypes(String alias, Table<TExoticTypesRecord> aliased, Field<?>[] parameters) {
		super(alias, Test.TEST, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<TExoticTypesRecord> getPrimaryKey() {
		return Keys.PK_T_EXOTIC_TYPES;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<TExoticTypesRecord>> getKeys() {
		return Arrays.<UniqueKey<TExoticTypesRecord>>asList(Keys.PK_T_EXOTIC_TYPES);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TExoticTypes as(String alias) {
		return new TExoticTypes(alias, this);
	}

	/**
	 * Rename this table
	 */
	public TExoticTypes rename(String name) {
		return new TExoticTypes(name, null);
	}
}
