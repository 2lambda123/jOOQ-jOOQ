/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oracle.generatedclasses.test;


import java.math.BigDecimal;
import java.sql.Date;
import java.time.LocalDate;

import org.jooq.AggregateFunction;
import org.jooq.Configuration;
import org.jooq.Field;
import org.jooq.Result;
import org.jooq.test.oracle.generatedclasses.test.routines.F2155;
import org.jooq.test.oracle.generatedclasses.test.routines.F317;
import org.jooq.test.oracle.generatedclasses.test.routines.F377;
import org.jooq.test.oracle.generatedclasses.test.routines.F378;
import org.jooq.test.oracle.generatedclasses.test.routines.F691cursorIn;
import org.jooq.test.oracle.generatedclasses.test.routines.F691cursorOut;
import org.jooq.test.oracle.generatedclasses.test.routines.FArrays1;
import org.jooq.test.oracle.generatedclasses.test.routines.FArrays2;
import org.jooq.test.oracle.generatedclasses.test.routines.FArrays3;
import org.jooq.test.oracle.generatedclasses.test.routines.FArrays4;
import org.jooq.test.oracle.generatedclasses.test.routines.FAuthorExists;
import org.jooq.test.oracle.generatedclasses.test.routines.FGetOneCursor;
import org.jooq.test.oracle.generatedclasses.test.routines.FNumber;
import org.jooq.test.oracle.generatedclasses.test.routines.FOne;
import org.jooq.test.oracle.generatedclasses.test.routines.FPipelinedArray1;
import org.jooq.test.oracle.generatedclasses.test.routines.FPipelinedArray4;
import org.jooq.test.oracle.generatedclasses.test.routines.FPipelinedTable1;
import org.jooq.test.oracle.generatedclasses.test.routines.FPipelinedTable4;
import org.jooq.test.oracle.generatedclasses.test.routines.FTables1;
import org.jooq.test.oracle.generatedclasses.test.routines.FTables2;
import org.jooq.test.oracle.generatedclasses.test.routines.FTables3;
import org.jooq.test.oracle.generatedclasses.test.routines.FTables4;
import org.jooq.test.oracle.generatedclasses.test.routines.P1490;
import org.jooq.test.oracle.generatedclasses.test.routines.P2155;
import org.jooq.test.oracle.generatedclasses.test.routines.P3005;
import org.jooq.test.oracle.generatedclasses.test.routines.P377;
import org.jooq.test.oracle.generatedclasses.test.routines.P391;
import org.jooq.test.oracle.generatedclasses.test.routines.PArrays1;
import org.jooq.test.oracle.generatedclasses.test.routines.PArrays2;
import org.jooq.test.oracle.generatedclasses.test.routines.PArrays3;
import org.jooq.test.oracle.generatedclasses.test.routines.PArrays4;
import org.jooq.test.oracle.generatedclasses.test.routines.PAuthorExists;
import org.jooq.test.oracle.generatedclasses.test.routines.PCreateAuthor;
import org.jooq.test.oracle.generatedclasses.test.routines.PCreateAuthorByName;
import org.jooq.test.oracle.generatedclasses.test.routines.PDefault;
import org.jooq.test.oracle.generatedclasses.test.routines.PEnhanceAddress1;
import org.jooq.test.oracle.generatedclasses.test.routines.PEnhanceAddress2;
import org.jooq.test.oracle.generatedclasses.test.routines.PEnhanceAddress3;
import org.jooq.test.oracle.generatedclasses.test.routines.PGetOneCursor;
import org.jooq.test.oracle.generatedclasses.test.routines.PGetTwoCursors;
import org.jooq.test.oracle.generatedclasses.test.routines.PNested;
import org.jooq.test.oracle.generatedclasses.test.routines.PTables1;
import org.jooq.test.oracle.generatedclasses.test.routines.PTables2;
import org.jooq.test.oracle.generatedclasses.test.routines.PTables3;
import org.jooq.test.oracle.generatedclasses.test.routines.PTables4;
import org.jooq.test.oracle.generatedclasses.test.routines.PUnused;
import org.jooq.test.oracle.generatedclasses.test.routines.SecondMax;
import org.jooq.test.oracle.generatedclasses.test.udt.records.UAddressTypeRecord;
import org.jooq.test.oracle.generatedclasses.test.udt.records.UBookArrayRecord;
import org.jooq.test.oracle.generatedclasses.test.udt.records.UBookTableRecord;
import org.jooq.test.oracle.generatedclasses.test.udt.records.UNested_3Record;
import org.jooq.test.oracle.generatedclasses.test.udt.records.UNumberArrayRecord;
import org.jooq.test.oracle.generatedclasses.test.udt.records.UNumberLongArrayRecord;
import org.jooq.test.oracle.generatedclasses.test.udt.records.UNumberLongTableRecord;
import org.jooq.test.oracle.generatedclasses.test.udt.records.UNumberTableRecord;
import org.jooq.test.oracle.generatedclasses.test.udt.records.UStringArrayRecord;
import org.jooq.test.oracle.generatedclasses.test.udt.records.UStringTableRecord;
import org.jooq.test.oracle.generatedclasses.test.udt.records.U_3005Record;


/**
 * Convenience access to all stored procedures and functions in TEST
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Routines {

	/**
	 * Call <code>TEST.F_ARRAYS1</code>
	 */
	public static UNumberArrayRecord fArrays1(Configuration configuration, UNumberArrayRecord inArray) {
		FArrays1 f = new FArrays1();
		f.setInArray(inArray);

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.F_ARRAYS1</code> as a field
	 */
	public static Field<UNumberArrayRecord> fArrays1(UNumberArrayRecord inArray) {
		FArrays1 f = new FArrays1();
		f.setInArray(inArray);

		return f.asField();
	}

	/**
	 * Get <code>TEST.F_ARRAYS1</code> as a field
	 */
	public static Field<UNumberArrayRecord> fArrays1(Field<UNumberArrayRecord> inArray) {
		FArrays1 f = new FArrays1();
		f.setInArray(inArray);

		return f.asField();
	}

	/**
	 * Call <code>TEST.F_ARRAYS2</code>
	 */
	public static UNumberLongArrayRecord fArrays2(Configuration configuration, UNumberLongArrayRecord inArray) {
		FArrays2 f = new FArrays2();
		f.setInArray(inArray);

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.F_ARRAYS2</code> as a field
	 */
	public static Field<UNumberLongArrayRecord> fArrays2(UNumberLongArrayRecord inArray) {
		FArrays2 f = new FArrays2();
		f.setInArray(inArray);

		return f.asField();
	}

	/**
	 * Get <code>TEST.F_ARRAYS2</code> as a field
	 */
	public static Field<UNumberLongArrayRecord> fArrays2(Field<UNumberLongArrayRecord> inArray) {
		FArrays2 f = new FArrays2();
		f.setInArray(inArray);

		return f.asField();
	}

	/**
	 * Call <code>TEST.F_ARRAYS3</code>
	 */
	public static UStringArrayRecord fArrays3(Configuration configuration, UStringArrayRecord inArray) {
		FArrays3 f = new FArrays3();
		f.setInArray(inArray);

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.F_ARRAYS3</code> as a field
	 */
	public static Field<UStringArrayRecord> fArrays3(UStringArrayRecord inArray) {
		FArrays3 f = new FArrays3();
		f.setInArray(inArray);

		return f.asField();
	}

	/**
	 * Get <code>TEST.F_ARRAYS3</code> as a field
	 */
	public static Field<UStringArrayRecord> fArrays3(Field<UStringArrayRecord> inArray) {
		FArrays3 f = new FArrays3();
		f.setInArray(inArray);

		return f.asField();
	}

	/**
	 * Call <code>TEST.F_ARRAYS4</code>
	 */
	public static UBookArrayRecord fArrays4(Configuration configuration, UBookArrayRecord inArray) {
		FArrays4 f = new FArrays4();
		f.setInArray(inArray);

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.F_ARRAYS4</code> as a field
	 */
	public static Field<UBookArrayRecord> fArrays4(UBookArrayRecord inArray) {
		FArrays4 f = new FArrays4();
		f.setInArray(inArray);

		return f.asField();
	}

	/**
	 * Get <code>TEST.F_ARRAYS4</code> as a field
	 */
	public static Field<UBookArrayRecord> fArrays4(Field<UBookArrayRecord> inArray) {
		FArrays4 f = new FArrays4();
		f.setInArray(inArray);

		return f.asField();
	}

	/**
	 * Call <code>TEST.F_AUTHOR_EXISTS</code>
	 */
	public static BigDecimal fAuthorExists(Configuration configuration, String authorName) {
		FAuthorExists f = new FAuthorExists();
		f.setAuthorName(authorName);

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.F_AUTHOR_EXISTS</code> as a field
	 */
	public static Field<BigDecimal> fAuthorExists(String authorName) {
		FAuthorExists f = new FAuthorExists();
		f.setAuthorName(authorName);

		return f.asField();
	}

	/**
	 * Get <code>TEST.F_AUTHOR_EXISTS</code> as a field
	 */
	public static Field<BigDecimal> fAuthorExists(Field<String> authorName) {
		FAuthorExists f = new FAuthorExists();
		f.setAuthorName(authorName);

		return f.asField();
	}

	/**
	 * Call <code>TEST.F_GET_ONE_CURSOR</code>
	 */
	public static Result<org.jooq.Record> fGetOneCursor(Configuration configuration, UNumberArrayRecord bookIds) {
		FGetOneCursor f = new FGetOneCursor();
		f.setBookIds(bookIds);

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.F_GET_ONE_CURSOR</code> as a field
	 */
	public static Field<Result<org.jooq.Record>> fGetOneCursor(UNumberArrayRecord bookIds) {
		FGetOneCursor f = new FGetOneCursor();
		f.setBookIds(bookIds);

		return f.asField();
	}

	/**
	 * Get <code>TEST.F_GET_ONE_CURSOR</code> as a field
	 */
	public static Field<Result<org.jooq.Record>> fGetOneCursor(Field<UNumberArrayRecord> bookIds) {
		FGetOneCursor f = new FGetOneCursor();
		f.setBookIds(bookIds);

		return f.asField();
	}

	/**
	 * Call <code>TEST.F_NUMBER</code>
	 */
	public static BigDecimal fNumber(Configuration configuration, Number n) {
		FNumber f = new FNumber();
		f.setN(n);

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.F_NUMBER</code> as a field
	 */
	public static Field<BigDecimal> fNumber(Number n) {
		FNumber f = new FNumber();
		f.setN(n);

		return f.asField();
	}

	/**
	 * Get <code>TEST.F_NUMBER</code> as a field
	 */
	public static Field<BigDecimal> fNumber(Field<? extends Number> n) {
		FNumber f = new FNumber();
		f.setN(n);

		return f.asField();
	}

	/**
	 * Call <code>TEST.F_ONE</code>
	 */
	public static BigDecimal fOne(Configuration configuration) {
		FOne f = new FOne();

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.F_ONE</code> as a field
	 */
	public static Field<BigDecimal> fOne() {
		FOne f = new FOne();

		return f.asField();
	}

	/**
	 * Call <code>TEST.F_PIPELINED_ARRAY1</code>
	 */
	public static UNumberArrayRecord fPipelinedArray1(Configuration configuration) {
		FPipelinedArray1 f = new FPipelinedArray1();

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.F_PIPELINED_ARRAY1</code> as a field
	 */
	public static Field<UNumberArrayRecord> fPipelinedArray1() {
		FPipelinedArray1 f = new FPipelinedArray1();

		return f.asField();
	}

	/**
	 * Call <code>TEST.F_PIPELINED_ARRAY4</code>
	 */
	public static UBookArrayRecord fPipelinedArray4(Configuration configuration) {
		FPipelinedArray4 f = new FPipelinedArray4();

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.F_PIPELINED_ARRAY4</code> as a field
	 */
	public static Field<UBookArrayRecord> fPipelinedArray4() {
		FPipelinedArray4 f = new FPipelinedArray4();

		return f.asField();
	}

	/**
	 * Call <code>TEST.F_PIPELINED_TABLE1</code>
	 */
	public static UNumberTableRecord fPipelinedTable1(Configuration configuration) {
		FPipelinedTable1 f = new FPipelinedTable1();

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.F_PIPELINED_TABLE1</code> as a field
	 */
	public static Field<UNumberTableRecord> fPipelinedTable1() {
		FPipelinedTable1 f = new FPipelinedTable1();

		return f.asField();
	}

	/**
	 * Call <code>TEST.F_PIPELINED_TABLE4</code>
	 */
	public static UBookTableRecord fPipelinedTable4(Configuration configuration) {
		FPipelinedTable4 f = new FPipelinedTable4();

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.F_PIPELINED_TABLE4</code> as a field
	 */
	public static Field<UBookTableRecord> fPipelinedTable4() {
		FPipelinedTable4 f = new FPipelinedTable4();

		return f.asField();
	}

	/**
	 * Call <code>TEST.F_TABLES1</code>
	 */
	public static UNumberTableRecord fTables1(Configuration configuration, UNumberTableRecord inTable) {
		FTables1 f = new FTables1();
		f.setInTable(inTable);

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.F_TABLES1</code> as a field
	 */
	public static Field<UNumberTableRecord> fTables1(UNumberTableRecord inTable) {
		FTables1 f = new FTables1();
		f.setInTable(inTable);

		return f.asField();
	}

	/**
	 * Get <code>TEST.F_TABLES1</code> as a field
	 */
	public static Field<UNumberTableRecord> fTables1(Field<UNumberTableRecord> inTable) {
		FTables1 f = new FTables1();
		f.setInTable(inTable);

		return f.asField();
	}

	/**
	 * Call <code>TEST.F_TABLES2</code>
	 */
	public static UNumberLongTableRecord fTables2(Configuration configuration, UNumberLongTableRecord inTable) {
		FTables2 f = new FTables2();
		f.setInTable(inTable);

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.F_TABLES2</code> as a field
	 */
	public static Field<UNumberLongTableRecord> fTables2(UNumberLongTableRecord inTable) {
		FTables2 f = new FTables2();
		f.setInTable(inTable);

		return f.asField();
	}

	/**
	 * Get <code>TEST.F_TABLES2</code> as a field
	 */
	public static Field<UNumberLongTableRecord> fTables2(Field<UNumberLongTableRecord> inTable) {
		FTables2 f = new FTables2();
		f.setInTable(inTable);

		return f.asField();
	}

	/**
	 * Call <code>TEST.F_TABLES3</code>
	 */
	public static UStringTableRecord fTables3(Configuration configuration, UStringTableRecord inTable) {
		FTables3 f = new FTables3();
		f.setInTable(inTable);

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.F_TABLES3</code> as a field
	 */
	public static Field<UStringTableRecord> fTables3(UStringTableRecord inTable) {
		FTables3 f = new FTables3();
		f.setInTable(inTable);

		return f.asField();
	}

	/**
	 * Get <code>TEST.F_TABLES3</code> as a field
	 */
	public static Field<UStringTableRecord> fTables3(Field<UStringTableRecord> inTable) {
		FTables3 f = new FTables3();
		f.setInTable(inTable);

		return f.asField();
	}

	/**
	 * Call <code>TEST.F_TABLES4</code>
	 */
	public static UBookTableRecord fTables4(Configuration configuration, UBookTableRecord inTable) {
		FTables4 f = new FTables4();
		f.setInTable(inTable);

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.F_TABLES4</code> as a field
	 */
	public static Field<UBookTableRecord> fTables4(UBookTableRecord inTable) {
		FTables4 f = new FTables4();
		f.setInTable(inTable);

		return f.asField();
	}

	/**
	 * Get <code>TEST.F_TABLES4</code> as a field
	 */
	public static Field<UBookTableRecord> fTables4(Field<UBookTableRecord> inTable) {
		FTables4 f = new FTables4();
		f.setInTable(inTable);

		return f.asField();
	}

	/**
	 * Call <code>TEST.F2155</code>
	 */
	public static LocalDate f2155(Configuration configuration, Number p1, LocalDate p2, Number p3, LocalDate p4) {
		F2155 f = new F2155();
		f.setP1(p1);
		f.setP2(p2);
		f.setP3(p3);
		f.setP4(p4);

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.F2155</code> as a field
	 */
	public static Field<LocalDate> f2155(Number p1, LocalDate p2, Number p3, LocalDate p4) {
		F2155 f = new F2155();
		f.setP1(p1);
		f.setP2(p2);
		f.setP3(p3);
		f.setP4(p4);

		return f.asField();
	}

	/**
	 * Get <code>TEST.F2155</code> as a field
	 */
	public static Field<LocalDate> f2155(Field<? extends Number> p1, Field<LocalDate> p2, Field<? extends Number> p3, Field<LocalDate> p4) {
		F2155 f = new F2155();
		f.setP1(p1);
		f.setP2(p2);
		f.setP3(p3);
		f.setP4(p4);

		return f.asField();
	}

	/**
	 * Call <code>TEST.F317</code>
	 */
	public static BigDecimal f317(Configuration configuration, Number p1, Number p2, Number p3, Number p4) {
		F317 f = new F317();
		f.setP1(p1);
		f.setP2(p2);
		f.setP3(p3);
		f.setP4(p4);

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.F317</code> as a field
	 */
	public static Field<BigDecimal> f317(Number p1, Number p2, Number p3, Number p4) {
		F317 f = new F317();
		f.setP1(p1);
		f.setP2(p2);
		f.setP3(p3);
		f.setP4(p4);

		return f.asField();
	}

	/**
	 * Get <code>TEST.F317</code> as a field
	 */
	public static Field<BigDecimal> f317(Field<? extends Number> p1, Field<? extends Number> p2, Field<? extends Number> p3, Field<? extends Number> p4) {
		F317 f = new F317();
		f.setP1(p1);
		f.setP2(p2);
		f.setP3(p3);
		f.setP4(p4);

		return f.asField();
	}

	/**
	 * Call <code>TEST.F377</code>
	 */
	public static void f377(Configuration configuration) {
		F377 p = new F377();

		p.execute(configuration);
	}

	/**
	 * Call <code>TEST.F378</code>
	 */
	public static F378 f378(Configuration configuration, Number i, Number io) {
		F378 p = new F378();
		p.setI(i);
		p.setIo(io);

		p.execute(configuration);
		return p;
	}

	/**
	 * Call <code>TEST.F691CURSOR_IN</code>
	 */
	public static BigDecimal f691cursorIn(Configuration configuration, Result<org.jooq.Record> c) {
		F691cursorIn f = new F691cursorIn();
		f.setC(c);

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.F691CURSOR_IN</code> as a field
	 */
	public static Field<BigDecimal> f691cursorIn(Result<org.jooq.Record> c) {
		F691cursorIn f = new F691cursorIn();
		f.setC(c);

		return f.asField();
	}

	/**
	 * Get <code>TEST.F691CURSOR_IN</code> as a field
	 */
	public static Field<BigDecimal> f691cursorIn(Field<Result<org.jooq.Record>> c) {
		F691cursorIn f = new F691cursorIn();
		f.setC(c);

		return f.asField();
	}

	/**
	 * Call <code>TEST.F691CURSOR_OUT</code>
	 */
	public static Result<org.jooq.Record> f691cursorOut(Configuration configuration) {
		F691cursorOut f = new F691cursorOut();

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.F691CURSOR_OUT</code> as a field
	 */
	public static Field<Result<org.jooq.Record>> f691cursorOut() {
		F691cursorOut f = new F691cursorOut();

		return f.asField();
	}

	/**
	 * Call <code>TEST.P_ARRAYS1</code>
	 */
	public static UNumberArrayRecord pArrays1(Configuration configuration, UNumberArrayRecord inArray) {
		PArrays1 p = new PArrays1();
		p.setInArray(inArray);

		p.execute(configuration);
		return p.getOutArray();
	}

	/**
	 * Call <code>TEST.P_ARRAYS2</code>
	 */
	public static UNumberLongArrayRecord pArrays2(Configuration configuration, UNumberLongArrayRecord inArray) {
		PArrays2 p = new PArrays2();
		p.setInArray(inArray);

		p.execute(configuration);
		return p.getOutArray();
	}

	/**
	 * Call <code>TEST.P_ARRAYS3</code>
	 */
	public static UStringArrayRecord pArrays3(Configuration configuration, UStringArrayRecord inArray) {
		PArrays3 p = new PArrays3();
		p.setInArray(inArray);

		p.execute(configuration);
		return p.getOutArray();
	}

	/**
	 * Call <code>TEST.P_ARRAYS4</code>
	 */
	public static UBookArrayRecord pArrays4(Configuration configuration, UBookArrayRecord inArray) {
		PArrays4 p = new PArrays4();
		p.setInArray(inArray);

		p.execute(configuration);
		return p.getOutArray();
	}

	/**
	 * Call <code>TEST.P_AUTHOR_EXISTS</code>
	 */
	public static BigDecimal pAuthorExists(Configuration configuration, String authorName) {
		PAuthorExists p = new PAuthorExists();
		p.setAuthorName(authorName);

		p.execute(configuration);
		return p.getResult();
	}

	/**
	 * Call <code>TEST.P_CREATE_AUTHOR</code>
	 */
	public static void pCreateAuthor(Configuration configuration) {
		PCreateAuthor p = new PCreateAuthor();

		p.execute(configuration);
	}

	/**
	 * Call <code>TEST.P_CREATE_AUTHOR_BY_NAME</code>
	 */
	public static void pCreateAuthorByName(Configuration configuration, String firstName, String lastName) {
		PCreateAuthorByName p = new PCreateAuthorByName();
		p.setFirstName(firstName);
		p.setLastName(lastName);

		p.execute(configuration);
	}

	/**
	 * Call <code>TEST.P_DEFAULT</code>
	 */
	public static PDefault pDefault(Configuration configuration, Number pInNumber, String pInVarchar, Date pInDate) {
		PDefault p = new PDefault();
		p.setPInNumber(pInNumber);
		p.setPInVarchar(pInVarchar);
		p.setPInDate(pInDate);

		p.execute(configuration);
		return p;
	}

	/**
	 * Call <code>TEST.P_ENHANCE_ADDRESS1</code>
	 */
	public static String pEnhanceAddress1(Configuration configuration, UAddressTypeRecord address) {
		PEnhanceAddress1 p = new PEnhanceAddress1();
		p.setAddress(address);

		p.execute(configuration);
		return p.getNo();
	}

	/**
	 * Call <code>TEST.P_ENHANCE_ADDRESS2</code>
	 */
	public static UAddressTypeRecord pEnhanceAddress2(Configuration configuration) {
		PEnhanceAddress2 p = new PEnhanceAddress2();

		p.execute(configuration);
		return p.getAddress();
	}

	/**
	 * Call <code>TEST.P_ENHANCE_ADDRESS3</code>
	 */
	public static UAddressTypeRecord pEnhanceAddress3(Configuration configuration, UAddressTypeRecord address) {
		PEnhanceAddress3 p = new PEnhanceAddress3();
		p.setAddress(address);

		p.execute(configuration);
		return p.getAddress();
	}

	/**
	 * Call <code>TEST.P_GET_ONE_CURSOR</code>
	 */
	public static PGetOneCursor pGetOneCursor(Configuration configuration, UNumberArrayRecord bookIds) {
		PGetOneCursor p = new PGetOneCursor();
		p.setBookIds(bookIds);

		p.execute(configuration);
		return p;
	}

	/**
	 * Call <code>TEST.P_GET_TWO_CURSORS</code>
	 */
	public static PGetTwoCursors pGetTwoCursors(Configuration configuration) {
		PGetTwoCursors p = new PGetTwoCursors();

		p.execute(configuration);
		return p;
	}

	/**
	 * Call <code>TEST.P_NESTED</code>
	 */
	public static PNested pNested(Configuration configuration, UNested_3Record p1, UNested_3Record p2) {
		PNested p = new PNested();
		p.setP1(p1);
		p.setP2(p2);

		p.execute(configuration);
		return p;
	}

	/**
	 * Call <code>TEST.P_TABLES1</code>
	 */
	public static UNumberTableRecord pTables1(Configuration configuration, UNumberTableRecord inTable) {
		PTables1 p = new PTables1();
		p.setInTable(inTable);

		p.execute(configuration);
		return p.getOutTable();
	}

	/**
	 * Call <code>TEST.P_TABLES2</code>
	 */
	public static UNumberLongTableRecord pTables2(Configuration configuration, UNumberLongTableRecord inTable) {
		PTables2 p = new PTables2();
		p.setInTable(inTable);

		p.execute(configuration);
		return p.getOutTable();
	}

	/**
	 * Call <code>TEST.P_TABLES3</code>
	 */
	public static UStringTableRecord pTables3(Configuration configuration, UStringTableRecord inTable) {
		PTables3 p = new PTables3();
		p.setInTable(inTable);

		p.execute(configuration);
		return p.getOutTable();
	}

	/**
	 * Call <code>TEST.P_TABLES4</code>
	 */
	public static UBookTableRecord pTables4(Configuration configuration, UBookTableRecord inTable) {
		PTables4 p = new PTables4();
		p.setInTable(inTable);

		p.execute(configuration);
		return p.getOutTable();
	}

	/**
	 * Call <code>TEST.P_UNUSED</code>
	 */
	public static PUnused pUnused(Configuration configuration, String in1, Number out2) {
		PUnused p = new PUnused();
		p.setIn1(in1);
		p.setOut2(out2);

		p.execute(configuration);
		return p;
	}

	/**
	 * Call <code>TEST.P1490</code>
	 */
	public static void p1490(Configuration configuration, Number value) {
		P1490 p = new P1490();
		p.setValue(value);

		p.execute(configuration);
	}

	/**
	 * Call <code>TEST.P2155</code>
	 */
	public static P2155 p2155(Configuration configuration, Number p1, LocalDate p2) {
		P2155 p = new P2155();
		p.setP1(p1);
		p.setP2(p2);

		p.execute(configuration);
		return p;
	}

	/**
	 * Call <code>TEST.P3005</code>
	 */
	public static U_3005Record p3005(Configuration configuration) {
		P3005 p = new P3005();

		p.execute(configuration);
		return p.getP1();
	}

	/**
	 * Call <code>TEST.P377</code>
	 */
	public static void p377(Configuration configuration) {
		P377 p = new P377();

		p.execute(configuration);
	}

	/**
	 * Call <code>TEST.P391</code>
	 */
	public static P391 p391(Configuration configuration, Number i1, Number io1, Number io2, Number i2) {
		P391 p = new P391();
		p.setI1(i1);
		p.setIo1(io1);
		p.setIo2(io2);
		p.setI2(i2);

		p.execute(configuration);
		return p;
	}

	/**
	 * Get <code>TEST.SECOND_MAX</code> as a field
	 */
	public static AggregateFunction<BigDecimal> secondMax(Number input) {
		SecondMax f = new SecondMax();
		f.setInput(input);

		return f.asAggregateFunction();
	}

	/**
	 * Get <code>TEST.SECOND_MAX</code> as a field
	 */
	public static AggregateFunction<BigDecimal> secondMax(Field<? extends Number> input) {
		SecondMax f = new SecondMax();
		f.setInput(input);

		return f.asAggregateFunction();
	}
}
