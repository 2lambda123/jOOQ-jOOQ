/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oracle.generatedclasses.test.packages;


import java.math.BigDecimal;

import org.jooq.Configuration;
import org.jooq.Field;
import org.jooq.impl.PackageImpl;
import org.jooq.test.oracle.generatedclasses.test.Test;
import org.jooq.test.oracle.generatedclasses.test.packages.library.PkgF378;
import org.jooq.test.oracle.generatedclasses.test.packages.library.PkgFAuthorExists1;
import org.jooq.test.oracle.generatedclasses.test.packages.library.PkgFAuthorExists2;
import org.jooq.test.oracle.generatedclasses.test.packages.library.PkgFUnused;
import org.jooq.test.oracle.generatedclasses.test.packages.library.PkgPAuthorExists1;
import org.jooq.test.oracle.generatedclasses.test.packages.library.PkgPAuthorExists2;


/**
 * Convenience access to all stored procedures and functions in LIBRARY
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Library extends PackageImpl {

	private static final long serialVersionUID = 517777686;

	/**
	 * The reference instance of <code>TEST.LIBRARY</code>
	 */
	public static final Library LIBRARY = new Library();

	/**
	 * Call <code>TEST.LIBRARY.PKG_F_AUTHOR_EXISTS</code>
	 */
	public static BigDecimal pkgFAuthorExists1(Configuration configuration, String authorName) {
		PkgFAuthorExists1 f = new PkgFAuthorExists1();
		f.setAuthorName(authorName);

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.LIBRARY.PKG_F_AUTHOR_EXISTS</code> as a field
	 */
	public static Field<BigDecimal> pkgFAuthorExists1(String authorName) {
		PkgFAuthorExists1 f = new PkgFAuthorExists1();
		f.setAuthorName(authorName);

		return f.asField();
	}

	/**
	 * Get <code>TEST.LIBRARY.PKG_F_AUTHOR_EXISTS</code> as a field
	 */
	public static Field<BigDecimal> pkgFAuthorExists1(Field<String> authorName) {
		PkgFAuthorExists1 f = new PkgFAuthorExists1();
		f.setAuthorName(authorName);

		return f.asField();
	}

	/**
	 * Call <code>TEST.LIBRARY.PKG_F_AUTHOR_EXISTS</code>
	 */
	public static BigDecimal pkgFAuthorExists2(Configuration configuration, String authorName, Number unused) {
		PkgFAuthorExists2 f = new PkgFAuthorExists2();
		f.setAuthorName(authorName);
		f.setUnused(unused);

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.LIBRARY.PKG_F_AUTHOR_EXISTS</code> as a field
	 */
	public static Field<BigDecimal> pkgFAuthorExists2(String authorName, Number unused) {
		PkgFAuthorExists2 f = new PkgFAuthorExists2();
		f.setAuthorName(authorName);
		f.setUnused(unused);

		return f.asField();
	}

	/**
	 * Get <code>TEST.LIBRARY.PKG_F_AUTHOR_EXISTS</code> as a field
	 */
	public static Field<BigDecimal> pkgFAuthorExists2(Field<String> authorName, Field<? extends Number> unused) {
		PkgFAuthorExists2 f = new PkgFAuthorExists2();
		f.setAuthorName(authorName);
		f.setUnused(unused);

		return f.asField();
	}

	/**
	 * Call <code>TEST.LIBRARY.PKG_F_UNUSED</code>
	 */
	public static BigDecimal pkgFUnused(Configuration configuration) {
		PkgFUnused f = new PkgFUnused();

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST.LIBRARY.PKG_F_UNUSED</code> as a field
	 */
	public static Field<BigDecimal> pkgFUnused() {
		PkgFUnused f = new PkgFUnused();

		return f.asField();
	}

	/**
	 * Call <code>TEST.LIBRARY.PKG_F378</code>
	 */
	public static PkgF378 pkgF378(Configuration configuration, Number i, Number io) {
		PkgF378 p = new PkgF378();
		p.setI(i);
		p.setIo(io);

		p.execute(configuration);
		return p;
	}

	/**
	 * Call <code>TEST.LIBRARY.PKG_P_AUTHOR_EXISTS</code>
	 */
	public static BigDecimal pkgPAuthorExists1(Configuration configuration, String authorName) {
		PkgPAuthorExists1 p = new PkgPAuthorExists1();
		p.setAuthorName(authorName);

		p.execute(configuration);
		return p.getResult();
	}

	/**
	 * Call <code>TEST.LIBRARY.PKG_P_AUTHOR_EXISTS</code>
	 */
	public static PkgPAuthorExists2 pkgPAuthorExists2(Configuration configuration, String authorName, Number unused) {
		PkgPAuthorExists2 p = new PkgPAuthorExists2();
		p.setAuthorName(authorName);
		p.setUnused(unused);

		p.execute(configuration);
		return p;
	}

	/**
	 * No further instances allowed
	 */
	private Library() {
		super("LIBRARY", Test.TEST);
	}
}
