/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oracle.generatedclasses.test.tables.pojos;


import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "T_DIRECTORY", schema = "TEST")
public class TDirectory implements Serializable {

	private static final long serialVersionUID = -1756926177;

	private Integer id;
	private Integer parentId;
	private Integer isDirectory;
	private String  name;

	public TDirectory() {}

	public TDirectory(
		Integer id,
		Integer parentId,
		Integer isDirectory,
		String  name
	) {
		this.id = id;
		this.parentId = parentId;
		this.isDirectory = isDirectory;
		this.name = name;
	}

	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 7)
	@NotNull
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "PARENT_ID", precision = 7)
	public Integer getParentId() {
		return this.parentId;
	}

	public void setParentId(Integer parentId) {
		this.parentId = parentId;
	}

	@Column(name = "IS_DIRECTORY", precision = 7)
	public Integer getIsDirectory() {
		return this.isDirectory;
	}

	public void setIsDirectory(Integer isDirectory) {
		this.isDirectory = isDirectory;
	}

	@Column(name = "name", length = 50)
	@Size(max = 50)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		final TDirectory other = (TDirectory) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		}
		else if (!id.equals(other.id))
			return false;
		if (parentId == null) {
			if (other.parentId != null)
				return false;
		}
		else if (!parentId.equals(other.parentId))
			return false;
		if (isDirectory == null) {
			if (other.isDirectory != null)
				return false;
		}
		else if (!isDirectory.equals(other.isDirectory))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		}
		else if (!name.equals(other.name))
			return false;
		return true;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((parentId == null) ? 0 : parentId.hashCode());
		result = prime * result + ((isDirectory == null) ? 0 : isDirectory.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}
}
