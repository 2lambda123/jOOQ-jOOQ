/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oracle.generatedclasses.test.tables.pojos;


import java.io.Serializable;
import java.math.BigDecimal;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "T_RESERVED", schema = "TEST")
public class TReserved implements Serializable {

	private static final long serialVersionUID = -1769569977;

	private BigDecimal abstract_;
	private BigDecimal case_;
	private BigDecimal catch_;
	private BigDecimal class_;
	private BigDecimal def;
	private BigDecimal do_;
	private BigDecimal else_;
	private BigDecimal extends_;
	private BigDecimal false_;
	private BigDecimal final_;
	private BigDecimal finally_;
	private BigDecimal for_;
	private BigDecimal forsome;
	private BigDecimal if_;
	private BigDecimal implicit;
	private BigDecimal import_;
	private BigDecimal lazy;
	private BigDecimal match;
	private BigDecimal new_;
	private BigDecimal null_;
	private BigDecimal object;
	private BigDecimal override;
	private BigDecimal package_;
	private BigDecimal private_;
	private BigDecimal protected_;
	private BigDecimal return_;
	private BigDecimal sealed;
	private BigDecimal super_;
	private BigDecimal this_;
	private BigDecimal throw_;
	private BigDecimal trait;
	private BigDecimal try_;
	private BigDecimal true_;
	private BigDecimal type;
	private BigDecimal val;
	private BigDecimal var;
	private BigDecimal while_;
	private BigDecimal with;
	private BigDecimal yield;

	public TReserved() {}

	public TReserved(TReserved value) {
		this.abstract_ = value.abstract_;
		this.case_ = value.case_;
		this.catch_ = value.catch_;
		this.class_ = value.class_;
		this.def = value.def;
		this.do_ = value.do_;
		this.else_ = value.else_;
		this.extends_ = value.extends_;
		this.false_ = value.false_;
		this.final_ = value.final_;
		this.finally_ = value.finally_;
		this.for_ = value.for_;
		this.forsome = value.forsome;
		this.if_ = value.if_;
		this.implicit = value.implicit;
		this.import_ = value.import_;
		this.lazy = value.lazy;
		this.match = value.match;
		this.new_ = value.new_;
		this.null_ = value.null_;
		this.object = value.object;
		this.override = value.override;
		this.package_ = value.package_;
		this.private_ = value.private_;
		this.protected_ = value.protected_;
		this.return_ = value.return_;
		this.sealed = value.sealed;
		this.super_ = value.super_;
		this.this_ = value.this_;
		this.throw_ = value.throw_;
		this.trait = value.trait;
		this.try_ = value.try_;
		this.true_ = value.true_;
		this.type = value.type;
		this.val = value.val;
		this.var = value.var;
		this.while_ = value.while_;
		this.with = value.with;
		this.yield = value.yield;
	}

	public TReserved(
		BigDecimal abstract_,
		BigDecimal case_,
		BigDecimal catch_,
		BigDecimal class_,
		BigDecimal def,
		BigDecimal do_,
		BigDecimal else_,
		BigDecimal extends_,
		BigDecimal false_,
		BigDecimal final_,
		BigDecimal finally_,
		BigDecimal for_,
		BigDecimal forsome,
		BigDecimal if_,
		BigDecimal implicit,
		BigDecimal import_,
		BigDecimal lazy,
		BigDecimal match,
		BigDecimal new_,
		BigDecimal null_,
		BigDecimal object,
		BigDecimal override,
		BigDecimal package_,
		BigDecimal private_,
		BigDecimal protected_,
		BigDecimal return_,
		BigDecimal sealed,
		BigDecimal super_,
		BigDecimal this_,
		BigDecimal throw_,
		BigDecimal trait,
		BigDecimal try_,
		BigDecimal true_,
		BigDecimal type,
		BigDecimal val,
		BigDecimal var,
		BigDecimal while_,
		BigDecimal with,
		BigDecimal yield
	) {
		this.abstract_ = abstract_;
		this.case_ = case_;
		this.catch_ = catch_;
		this.class_ = class_;
		this.def = def;
		this.do_ = do_;
		this.else_ = else_;
		this.extends_ = extends_;
		this.false_ = false_;
		this.final_ = final_;
		this.finally_ = finally_;
		this.for_ = for_;
		this.forsome = forsome;
		this.if_ = if_;
		this.implicit = implicit;
		this.import_ = import_;
		this.lazy = lazy;
		this.match = match;
		this.new_ = new_;
		this.null_ = null_;
		this.object = object;
		this.override = override;
		this.package_ = package_;
		this.private_ = private_;
		this.protected_ = protected_;
		this.return_ = return_;
		this.sealed = sealed;
		this.super_ = super_;
		this.this_ = this_;
		this.throw_ = throw_;
		this.trait = trait;
		this.try_ = try_;
		this.true_ = true_;
		this.type = type;
		this.val = val;
		this.var = var;
		this.while_ = while_;
		this.with = with;
		this.yield = yield;
	}

	@Column(name = "abstract")
	public BigDecimal getAbstract() {
		return this.abstract_;
	}

	public void setAbstract(BigDecimal abstract_) {
		this.abstract_ = abstract_;
	}

	@Column(name = "case")
	public BigDecimal getCase() {
		return this.case_;
	}

	public void setCase(BigDecimal case_) {
		this.case_ = case_;
	}

	@Column(name = "catch")
	public BigDecimal getCatch() {
		return this.catch_;
	}

	public void setCatch(BigDecimal catch_) {
		this.catch_ = catch_;
	}

	@Column(name = "class")
	public BigDecimal getClass_() {
		return this.class_;
	}

	public void setClass_(BigDecimal class_) {
		this.class_ = class_;
	}

	@Column(name = "def")
	public BigDecimal getDef() {
		return this.def;
	}

	public void setDef(BigDecimal def) {
		this.def = def;
	}

	@Column(name = "do")
	public BigDecimal getDo() {
		return this.do_;
	}

	public void setDo(BigDecimal do_) {
		this.do_ = do_;
	}

	@Column(name = "else")
	public BigDecimal getElse() {
		return this.else_;
	}

	public void setElse(BigDecimal else_) {
		this.else_ = else_;
	}

	@Column(name = "extends")
	public BigDecimal getExtends() {
		return this.extends_;
	}

	public void setExtends(BigDecimal extends_) {
		this.extends_ = extends_;
	}

	@Column(name = "false")
	public BigDecimal getFalse() {
		return this.false_;
	}

	public void setFalse(BigDecimal false_) {
		this.false_ = false_;
	}

	@Column(name = "final")
	public BigDecimal getFinal() {
		return this.final_;
	}

	public void setFinal(BigDecimal final_) {
		this.final_ = final_;
	}

	@Column(name = "finally")
	public BigDecimal getFinally() {
		return this.finally_;
	}

	public void setFinally(BigDecimal finally_) {
		this.finally_ = finally_;
	}

	@Column(name = "for")
	public BigDecimal getFor() {
		return this.for_;
	}

	public void setFor(BigDecimal for_) {
		this.for_ = for_;
	}

	@Column(name = "forSome")
	public BigDecimal getForsome() {
		return this.forsome;
	}

	public void setForsome(BigDecimal forsome) {
		this.forsome = forsome;
	}

	@Column(name = "if")
	public BigDecimal getIf() {
		return this.if_;
	}

	public void setIf(BigDecimal if_) {
		this.if_ = if_;
	}

	@Column(name = "implicit")
	public BigDecimal getImplicit() {
		return this.implicit;
	}

	public void setImplicit(BigDecimal implicit) {
		this.implicit = implicit;
	}

	@Column(name = "import")
	public BigDecimal getImport() {
		return this.import_;
	}

	public void setImport(BigDecimal import_) {
		this.import_ = import_;
	}

	@Column(name = "lazy")
	public BigDecimal getLazy() {
		return this.lazy;
	}

	public void setLazy(BigDecimal lazy) {
		this.lazy = lazy;
	}

	@Column(name = "match")
	public BigDecimal getMatch() {
		return this.match;
	}

	public void setMatch(BigDecimal match) {
		this.match = match;
	}

	@Column(name = "new")
	public BigDecimal getNew() {
		return this.new_;
	}

	public void setNew(BigDecimal new_) {
		this.new_ = new_;
	}

	@Column(name = "null")
	public BigDecimal getNull() {
		return this.null_;
	}

	public void setNull(BigDecimal null_) {
		this.null_ = null_;
	}

	@Column(name = "object")
	public BigDecimal getObject() {
		return this.object;
	}

	public void setObject(BigDecimal object) {
		this.object = object;
	}

	@Column(name = "override")
	public BigDecimal getOverride() {
		return this.override;
	}

	public void setOverride(BigDecimal override) {
		this.override = override;
	}

	@Column(name = "package")
	public BigDecimal getPackage() {
		return this.package_;
	}

	public void setPackage(BigDecimal package_) {
		this.package_ = package_;
	}

	@Column(name = "private")
	public BigDecimal getPrivate() {
		return this.private_;
	}

	public void setPrivate(BigDecimal private_) {
		this.private_ = private_;
	}

	@Column(name = "protected")
	public BigDecimal getProtected() {
		return this.protected_;
	}

	public void setProtected(BigDecimal protected_) {
		this.protected_ = protected_;
	}

	@Column(name = "return")
	public BigDecimal getReturn() {
		return this.return_;
	}

	public void setReturn(BigDecimal return_) {
		this.return_ = return_;
	}

	@Column(name = "sealed")
	public BigDecimal getSealed() {
		return this.sealed;
	}

	public void setSealed(BigDecimal sealed) {
		this.sealed = sealed;
	}

	@Column(name = "super")
	public BigDecimal getSuper() {
		return this.super_;
	}

	public void setSuper(BigDecimal super_) {
		this.super_ = super_;
	}

	@Column(name = "this")
	public BigDecimal getThis() {
		return this.this_;
	}

	public void setThis(BigDecimal this_) {
		this.this_ = this_;
	}

	@Column(name = "throw")
	public BigDecimal getThrow() {
		return this.throw_;
	}

	public void setThrow(BigDecimal throw_) {
		this.throw_ = throw_;
	}

	@Column(name = "trait")
	public BigDecimal getTrait() {
		return this.trait;
	}

	public void setTrait(BigDecimal trait) {
		this.trait = trait;
	}

	@Column(name = "try")
	public BigDecimal getTry() {
		return this.try_;
	}

	public void setTry(BigDecimal try_) {
		this.try_ = try_;
	}

	@Column(name = "true")
	public BigDecimal getTrue() {
		return this.true_;
	}

	public void setTrue(BigDecimal true_) {
		this.true_ = true_;
	}

	@Column(name = "type")
	public BigDecimal getType() {
		return this.type;
	}

	public void setType(BigDecimal type) {
		this.type = type;
	}

	@Column(name = "val")
	public BigDecimal getVal() {
		return this.val;
	}

	public void setVal(BigDecimal val) {
		this.val = val;
	}

	@Column(name = "var")
	public BigDecimal getVar() {
		return this.var;
	}

	public void setVar(BigDecimal var) {
		this.var = var;
	}

	@Column(name = "while")
	public BigDecimal getWhile() {
		return this.while_;
	}

	public void setWhile(BigDecimal while_) {
		this.while_ = while_;
	}

	@Column(name = "with")
	public BigDecimal getWith() {
		return this.with;
	}

	public void setWith(BigDecimal with) {
		this.with = with;
	}

	@Column(name = "yield")
	public BigDecimal getYield() {
		return this.yield;
	}

	public void setYield(BigDecimal yield) {
		this.yield = yield;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		final TReserved other = (TReserved) obj;
		if (abstract_ == null) {
			if (other.abstract_ != null)
				return false;
		}
		else if (!abstract_.equals(other.abstract_))
			return false;
		if (case_ == null) {
			if (other.case_ != null)
				return false;
		}
		else if (!case_.equals(other.case_))
			return false;
		if (catch_ == null) {
			if (other.catch_ != null)
				return false;
		}
		else if (!catch_.equals(other.catch_))
			return false;
		if (class_ == null) {
			if (other.class_ != null)
				return false;
		}
		else if (!class_.equals(other.class_))
			return false;
		if (def == null) {
			if (other.def != null)
				return false;
		}
		else if (!def.equals(other.def))
			return false;
		if (do_ == null) {
			if (other.do_ != null)
				return false;
		}
		else if (!do_.equals(other.do_))
			return false;
		if (else_ == null) {
			if (other.else_ != null)
				return false;
		}
		else if (!else_.equals(other.else_))
			return false;
		if (extends_ == null) {
			if (other.extends_ != null)
				return false;
		}
		else if (!extends_.equals(other.extends_))
			return false;
		if (false_ == null) {
			if (other.false_ != null)
				return false;
		}
		else if (!false_.equals(other.false_))
			return false;
		if (final_ == null) {
			if (other.final_ != null)
				return false;
		}
		else if (!final_.equals(other.final_))
			return false;
		if (finally_ == null) {
			if (other.finally_ != null)
				return false;
		}
		else if (!finally_.equals(other.finally_))
			return false;
		if (for_ == null) {
			if (other.for_ != null)
				return false;
		}
		else if (!for_.equals(other.for_))
			return false;
		if (forsome == null) {
			if (other.forsome != null)
				return false;
		}
		else if (!forsome.equals(other.forsome))
			return false;
		if (if_ == null) {
			if (other.if_ != null)
				return false;
		}
		else if (!if_.equals(other.if_))
			return false;
		if (implicit == null) {
			if (other.implicit != null)
				return false;
		}
		else if (!implicit.equals(other.implicit))
			return false;
		if (import_ == null) {
			if (other.import_ != null)
				return false;
		}
		else if (!import_.equals(other.import_))
			return false;
		if (lazy == null) {
			if (other.lazy != null)
				return false;
		}
		else if (!lazy.equals(other.lazy))
			return false;
		if (match == null) {
			if (other.match != null)
				return false;
		}
		else if (!match.equals(other.match))
			return false;
		if (new_ == null) {
			if (other.new_ != null)
				return false;
		}
		else if (!new_.equals(other.new_))
			return false;
		if (null_ == null) {
			if (other.null_ != null)
				return false;
		}
		else if (!null_.equals(other.null_))
			return false;
		if (object == null) {
			if (other.object != null)
				return false;
		}
		else if (!object.equals(other.object))
			return false;
		if (override == null) {
			if (other.override != null)
				return false;
		}
		else if (!override.equals(other.override))
			return false;
		if (package_ == null) {
			if (other.package_ != null)
				return false;
		}
		else if (!package_.equals(other.package_))
			return false;
		if (private_ == null) {
			if (other.private_ != null)
				return false;
		}
		else if (!private_.equals(other.private_))
			return false;
		if (protected_ == null) {
			if (other.protected_ != null)
				return false;
		}
		else if (!protected_.equals(other.protected_))
			return false;
		if (return_ == null) {
			if (other.return_ != null)
				return false;
		}
		else if (!return_.equals(other.return_))
			return false;
		if (sealed == null) {
			if (other.sealed != null)
				return false;
		}
		else if (!sealed.equals(other.sealed))
			return false;
		if (super_ == null) {
			if (other.super_ != null)
				return false;
		}
		else if (!super_.equals(other.super_))
			return false;
		if (this_ == null) {
			if (other.this_ != null)
				return false;
		}
		else if (!this_.equals(other.this_))
			return false;
		if (throw_ == null) {
			if (other.throw_ != null)
				return false;
		}
		else if (!throw_.equals(other.throw_))
			return false;
		if (trait == null) {
			if (other.trait != null)
				return false;
		}
		else if (!trait.equals(other.trait))
			return false;
		if (try_ == null) {
			if (other.try_ != null)
				return false;
		}
		else if (!try_.equals(other.try_))
			return false;
		if (true_ == null) {
			if (other.true_ != null)
				return false;
		}
		else if (!true_.equals(other.true_))
			return false;
		if (type == null) {
			if (other.type != null)
				return false;
		}
		else if (!type.equals(other.type))
			return false;
		if (val == null) {
			if (other.val != null)
				return false;
		}
		else if (!val.equals(other.val))
			return false;
		if (var == null) {
			if (other.var != null)
				return false;
		}
		else if (!var.equals(other.var))
			return false;
		if (while_ == null) {
			if (other.while_ != null)
				return false;
		}
		else if (!while_.equals(other.while_))
			return false;
		if (with == null) {
			if (other.with != null)
				return false;
		}
		else if (!with.equals(other.with))
			return false;
		if (yield == null) {
			if (other.yield != null)
				return false;
		}
		else if (!yield.equals(other.yield))
			return false;
		return true;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((abstract_ == null) ? 0 : abstract_.hashCode());
		result = prime * result + ((case_ == null) ? 0 : case_.hashCode());
		result = prime * result + ((catch_ == null) ? 0 : catch_.hashCode());
		result = prime * result + ((class_ == null) ? 0 : class_.hashCode());
		result = prime * result + ((def == null) ? 0 : def.hashCode());
		result = prime * result + ((do_ == null) ? 0 : do_.hashCode());
		result = prime * result + ((else_ == null) ? 0 : else_.hashCode());
		result = prime * result + ((extends_ == null) ? 0 : extends_.hashCode());
		result = prime * result + ((false_ == null) ? 0 : false_.hashCode());
		result = prime * result + ((final_ == null) ? 0 : final_.hashCode());
		result = prime * result + ((finally_ == null) ? 0 : finally_.hashCode());
		result = prime * result + ((for_ == null) ? 0 : for_.hashCode());
		result = prime * result + ((forsome == null) ? 0 : forsome.hashCode());
		result = prime * result + ((if_ == null) ? 0 : if_.hashCode());
		result = prime * result + ((implicit == null) ? 0 : implicit.hashCode());
		result = prime * result + ((import_ == null) ? 0 : import_.hashCode());
		result = prime * result + ((lazy == null) ? 0 : lazy.hashCode());
		result = prime * result + ((match == null) ? 0 : match.hashCode());
		result = prime * result + ((new_ == null) ? 0 : new_.hashCode());
		result = prime * result + ((null_ == null) ? 0 : null_.hashCode());
		result = prime * result + ((object == null) ? 0 : object.hashCode());
		result = prime * result + ((override == null) ? 0 : override.hashCode());
		result = prime * result + ((package_ == null) ? 0 : package_.hashCode());
		result = prime * result + ((private_ == null) ? 0 : private_.hashCode());
		result = prime * result + ((protected_ == null) ? 0 : protected_.hashCode());
		result = prime * result + ((return_ == null) ? 0 : return_.hashCode());
		result = prime * result + ((sealed == null) ? 0 : sealed.hashCode());
		result = prime * result + ((super_ == null) ? 0 : super_.hashCode());
		result = prime * result + ((this_ == null) ? 0 : this_.hashCode());
		result = prime * result + ((throw_ == null) ? 0 : throw_.hashCode());
		result = prime * result + ((trait == null) ? 0 : trait.hashCode());
		result = prime * result + ((try_ == null) ? 0 : try_.hashCode());
		result = prime * result + ((true_ == null) ? 0 : true_.hashCode());
		result = prime * result + ((type == null) ? 0 : type.hashCode());
		result = prime * result + ((val == null) ? 0 : val.hashCode());
		result = prime * result + ((var == null) ? 0 : var.hashCode());
		result = prime * result + ((while_ == null) ? 0 : while_.hashCode());
		result = prime * result + ((with == null) ? 0 : with.hashCode());
		result = prime * result + ((yield == null) ? 0 : yield.hashCode());
		return result;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("TReserved (");

		sb.append(abstract_);
		sb.append(", ").append(case_);
		sb.append(", ").append(catch_);
		sb.append(", ").append(class_);
		sb.append(", ").append(def);
		sb.append(", ").append(do_);
		sb.append(", ").append(else_);
		sb.append(", ").append(extends_);
		sb.append(", ").append(false_);
		sb.append(", ").append(final_);
		sb.append(", ").append(finally_);
		sb.append(", ").append(for_);
		sb.append(", ").append(forsome);
		sb.append(", ").append(if_);
		sb.append(", ").append(implicit);
		sb.append(", ").append(import_);
		sb.append(", ").append(lazy);
		sb.append(", ").append(match);
		sb.append(", ").append(new_);
		sb.append(", ").append(null_);
		sb.append(", ").append(object);
		sb.append(", ").append(override);
		sb.append(", ").append(package_);
		sb.append(", ").append(private_);
		sb.append(", ").append(protected_);
		sb.append(", ").append(return_);
		sb.append(", ").append(sealed);
		sb.append(", ").append(super_);
		sb.append(", ").append(this_);
		sb.append(", ").append(throw_);
		sb.append(", ").append(trait);
		sb.append(", ").append(try_);
		sb.append(", ").append(true_);
		sb.append(", ").append(type);
		sb.append(", ").append(val);
		sb.append(", ").append(var);
		sb.append(", ").append(while_);
		sb.append(", ").append(with);
		sb.append(", ").append(yield);

		sb.append(")");
		return sb.toString();
	}
}
