/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oracle.generatedclasses.multi_schema.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.test.oracle.generatedclasses.multi_schema.Keys;
import org.jooq.test.oracle.generatedclasses.multi_schema.MultiSchema;
import org.jooq.test.oracle.generatedclasses.multi_schema.tables.records.TAuthorRecord;
import org.jooq.test.oracle.generatedclasses.test.udt.records.UAddressTypeRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TAuthor extends TableImpl<TAuthorRecord> {

	private static final long serialVersionUID = 908471595;

	/**
	 * The reference instance of <code>MULTI_SCHEMA.T_AUTHOR</code>
	 */
	public static final TAuthor T_AUTHOR = new TAuthor();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TAuthorRecord> getRecordType() {
		return TAuthorRecord.class;
	}

	/**
	 * The column <code>MULTI_SCHEMA.T_AUTHOR.ID</code>.
	 */
	public final TableField<TAuthorRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>MULTI_SCHEMA.T_AUTHOR.FIRST_NAME</code>.
	 */
	public final TableField<TAuthorRecord, String> FIRST_NAME = createField("FIRST_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	/**
	 * The column <code>MULTI_SCHEMA.T_AUTHOR.LAST_NAME</code>.
	 */
	public final TableField<TAuthorRecord, String> LAST_NAME = createField("LAST_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

	/**
	 * The column <code>MULTI_SCHEMA.T_AUTHOR.DATE_OF_BIRTH</code>.
	 */
	public final TableField<TAuthorRecord, Date> DATE_OF_BIRTH = createField("DATE_OF_BIRTH", org.jooq.impl.SQLDataType.DATE, this, "");

	/**
	 * The column <code>MULTI_SCHEMA.T_AUTHOR.YEAR_OF_BIRTH</code>.
	 */
	public final TableField<TAuthorRecord, Integer> YEAR_OF_BIRTH = createField("YEAR_OF_BIRTH", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>MULTI_SCHEMA.T_AUTHOR.ADDRESS</code>.
	 */
	public final TableField<TAuthorRecord, UAddressTypeRecord> ADDRESS = createField("ADDRESS", org.jooq.test.oracle.generatedclasses.test.udt.UAddressType.U_ADDRESS_TYPE.getDataType(), this, "");

	/**
	 * Create a <code>MULTI_SCHEMA.T_AUTHOR</code> table reference
	 */
	public TAuthor() {
		this("T_AUTHOR", null);
	}

	/**
	 * Create an aliased <code>MULTI_SCHEMA.T_AUTHOR</code> table reference
	 */
	public TAuthor(String alias) {
		this(alias, T_AUTHOR);
	}

	private TAuthor(String alias, Table<TAuthorRecord> aliased) {
		this(alias, aliased, null);
	}

	private TAuthor(String alias, Table<TAuthorRecord> aliased, Field<?>[] parameters) {
		super(alias, MultiSchema.MULTI_SCHEMA, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<TAuthorRecord> getPrimaryKey() {
		return Keys.PK_T_AUTHOR;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<TAuthorRecord>> getKeys() {
		return Arrays.<UniqueKey<TAuthorRecord>>asList(Keys.PK_T_AUTHOR);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TAuthor as(String alias) {
		return new TAuthor(alias, this);
	}

	/**
	 * Rename this table
	 */
	public TAuthor rename(String name) {
		return new TAuthor(name, null);
	}
}
