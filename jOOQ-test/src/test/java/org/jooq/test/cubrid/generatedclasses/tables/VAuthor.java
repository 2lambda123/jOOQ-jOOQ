/**
 * This class is generated by jOOQ
 */
package org.jooq.test.cubrid.generatedclasses.tables;


import java.sql.Date;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;
import org.jooq.test.cubrid.generatedclasses.DefaultSchema;
import org.jooq.test.cubrid.generatedclasses.tables.records.VAuthorRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VAuthor extends TableImpl<VAuthorRecord> {

	private static final long serialVersionUID = 5933831;

	/**
	 * The reference instance of <code>v_author</code>
	 */
	public static final VAuthor V_AUTHOR = new VAuthor();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<VAuthorRecord> getRecordType() {
		return VAuthorRecord.class;
	}

	/**
	 * The column <code>v_author.id</code>.
	 */
	public static final TableField<VAuthorRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, V_AUTHOR, "");

	/**
	 * The column <code>v_author.first_name</code>.
	 */
	public static final TableField<VAuthorRecord, String> FIRST_NAME = createField("first_name", org.jooq.impl.SQLDataType.VARCHAR.length(50), V_AUTHOR, "");

	/**
	 * The column <code>v_author.last_name</code>.
	 */
	public static final TableField<VAuthorRecord, String> LAST_NAME = createField("last_name", org.jooq.impl.SQLDataType.VARCHAR.length(50), V_AUTHOR, "");

	/**
	 * The column <code>v_author.date_of_birth</code>.
	 */
	public static final TableField<VAuthorRecord, Date> DATE_OF_BIRTH = createField("date_of_birth", org.jooq.impl.SQLDataType.DATE, V_AUTHOR, "");

	/**
	 * The column <code>v_author.year_of_birth</code>.
	 */
	public static final TableField<VAuthorRecord, Integer> YEAR_OF_BIRTH = createField("year_of_birth", org.jooq.impl.SQLDataType.INTEGER, V_AUTHOR, "");

	/**
	 * The column <code>v_author.address</code>.
	 */
	public static final TableField<VAuthorRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.VARCHAR.length(200), V_AUTHOR, "");

	/**
	 * No further instances allowed
	 */
	private VAuthor() {
		this("v_author", null);
	}

	private VAuthor(String alias, Table<VAuthorRecord> aliased) {
		this(alias, aliased, null);
	}

	private VAuthor(String alias, Table<VAuthorRecord> aliased, Field<?>[] parameters) {
		super(alias, DefaultSchema.DEFAULT_SCHEMA, aliased, parameters, "");
	}
}
