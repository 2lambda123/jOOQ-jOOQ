/**
 * This class is generated by jOOQ
 */
package org.jooq.test.h2.generatedclasses.tables.records;


import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.test.h2.generatedclasses.tables.Accounts;
import org.jooq.test.h2.generatedclasses.tables.interfaces.IAccounts;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountsRecord extends UpdatableRecordImpl<AccountsRecord> implements Record4<Integer, String, String, BigDecimal>, IAccounts {

	private static final long serialVersionUID = 1339502641;

	/**
	 * Setter for <code>PUBLIC.ACCOUNTS.ID</code>.
	 */
	@Override
	public AccountsRecord setId(Integer value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>PUBLIC.ACCOUNTS.ID</code>.
	 */
	@Override
	public Integer getId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>PUBLIC.ACCOUNTS.ACCOUNT_OWNER</code>.
	 */
	@Override
	public AccountsRecord setAccountOwner(String value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>PUBLIC.ACCOUNTS.ACCOUNT_OWNER</code>.
	 */
	@Override
	public String getAccountOwner() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>PUBLIC.ACCOUNTS.ACCOUNT_NAME</code>.
	 */
	@Override
	public AccountsRecord setAccountName(String value) {
		setValue(2, value);
		return this;
	}

	/**
	 * Getter for <code>PUBLIC.ACCOUNTS.ACCOUNT_NAME</code>.
	 */
	@Override
	public String getAccountName() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>PUBLIC.ACCOUNTS.AMOUNT</code>.
	 */
	@Override
	public AccountsRecord setAmount(BigDecimal value) {
		setValue(3, value);
		return this;
	}

	/**
	 * Getter for <code>PUBLIC.ACCOUNTS.AMOUNT</code>.
	 */
	@Override
	public BigDecimal getAmount() {
		return (BigDecimal) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, String, String, BigDecimal> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, String, String, BigDecimal> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return Accounts.ACCOUNTS.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Accounts.ACCOUNTS.ACCOUNT_OWNER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return Accounts.ACCOUNTS.ACCOUNT_NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<BigDecimal> field4() {
		return Accounts.ACCOUNTS.AMOUNT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getAccountOwner();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getAccountName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BigDecimal value4() {
		return getAmount();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AccountsRecord value1(Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AccountsRecord value2(String value) {
		setAccountOwner(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AccountsRecord value3(String value) {
		setAccountName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AccountsRecord value4(BigDecimal value) {
		setAmount(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AccountsRecord values(Integer value1, String value2, String value3, BigDecimal value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IAccounts from) {
		setId(from.getId());
		setAccountOwner(from.getAccountOwner());
		setAccountName(from.getAccountName());
		setAmount(from.getAmount());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IAccounts> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached AccountsRecord
	 */
	public AccountsRecord() {
		super(Accounts.ACCOUNTS);
	}

	/**
	 * Create a detached, initialised AccountsRecord
	 */
	public AccountsRecord(Integer id, String accountOwner, String accountName, BigDecimal amount) {
		super(Accounts.ACCOUNTS);

		setValue(0, id);
		setValue(1, accountOwner);
		setValue(2, accountName);
		setValue(3, amount);
	}
}
