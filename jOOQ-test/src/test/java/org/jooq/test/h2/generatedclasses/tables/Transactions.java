/**
 * This class is generated by jOOQ
 */
package org.jooq.test.h2.generatedclasses.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.test.h2.generatedclasses.Keys;
import org.jooq.test.h2.generatedclasses.Public;
import org.jooq.test.h2.generatedclasses.tables.records.TransactionsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transactions extends TableImpl<TransactionsRecord> {

	private static final long serialVersionUID = 1139647558;

	/**
	 * The reference instance of <code>PUBLIC.TRANSACTIONS</code>
	 */
	public static final Transactions TRANSACTIONS = new Transactions();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TransactionsRecord> getRecordType() {
		return TransactionsRecord.class;
	}

	/**
	 * The column <code>PUBLIC.TRANSACTIONS.ID</code>.
	 */
	public final TableField<TransactionsRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.TRANSACTIONS.ACCOUNT_ID</code>.
	 */
	public final TableField<TransactionsRecord, Integer> ACCOUNT_ID = createField("ACCOUNT_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.TRANSACTIONS.AMOUNT</code>.
	 */
	public final TableField<TransactionsRecord, BigDecimal> AMOUNT = createField("AMOUNT", org.jooq.impl.SQLDataType.DECIMAL.precision(18, 2).nullable(false), this, "");

	/**
	 * Create a <code>PUBLIC.TRANSACTIONS</code> table reference
	 */
	public Transactions() {
		this("TRANSACTIONS", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.TRANSACTIONS</code> table reference
	 */
	public Transactions(String alias) {
		this(alias, TRANSACTIONS);
	}

	private Transactions(String alias, Table<TransactionsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Transactions(String alias, Table<TransactionsRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<TransactionsRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_F;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<TransactionsRecord>> getKeys() {
		return Arrays.<UniqueKey<TransactionsRecord>>asList(Keys.CONSTRAINT_F);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Transactions as(String alias) {
		return new Transactions(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Transactions rename(String name) {
		return new Transactions(name, null);
	}
}
