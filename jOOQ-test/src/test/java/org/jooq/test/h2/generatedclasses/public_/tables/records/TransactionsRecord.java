/**
 * This class is generated by jOOQ
 */
package org.jooq.test.h2.generatedclasses.public_.tables.records;


import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.test.h2.generatedclasses.public_.tables.Transactions;
import org.jooq.test.h2.generatedclasses.public_.tables.interfaces.ITransactions;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionsRecord extends UpdatableRecordImpl<TransactionsRecord> implements Record3<Integer, Integer, BigDecimal>, ITransactions {

	private static final long serialVersionUID = -2064817531;

	/**
	 * Setter for <code>PUBLIC.TRANSACTIONS.ID</code>.
	 */
	@Override
	public TransactionsRecord setId(Integer value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>PUBLIC.TRANSACTIONS.ID</code>.
	 */
	@Override
	public Integer getId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>PUBLIC.TRANSACTIONS.ACCOUNT_ID</code>.
	 */
	@Override
	public TransactionsRecord setAccountId(Integer value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>PUBLIC.TRANSACTIONS.ACCOUNT_ID</code>.
	 */
	@Override
	public Integer getAccountId() {
		return (Integer) getValue(1);
	}

	/**
	 * Setter for <code>PUBLIC.TRANSACTIONS.AMOUNT</code>.
	 */
	@Override
	public TransactionsRecord setAmount(BigDecimal value) {
		setValue(2, value);
		return this;
	}

	/**
	 * Getter for <code>PUBLIC.TRANSACTIONS.AMOUNT</code>.
	 */
	@Override
	public BigDecimal getAmount() {
		return (BigDecimal) getValue(2);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Integer, Integer, BigDecimal> fieldsRow() {
		return (Row3) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Integer, Integer, BigDecimal> valuesRow() {
		return (Row3) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return Transactions.TRANSACTIONS.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return Transactions.TRANSACTIONS.ACCOUNT_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<BigDecimal> field3() {
		return Transactions.TRANSACTIONS.AMOUNT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getAccountId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BigDecimal value3() {
		return getAmount();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TransactionsRecord value1(Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TransactionsRecord value2(Integer value) {
		setAccountId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TransactionsRecord value3(BigDecimal value) {
		setAmount(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TransactionsRecord values(Integer value1, Integer value2, BigDecimal value3) {
		value1(value1);
		value2(value2);
		value3(value3);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(ITransactions from) {
		setId(from.getId());
		setAccountId(from.getAccountId());
		setAmount(from.getAmount());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends ITransactions> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached TransactionsRecord
	 */
	public TransactionsRecord() {
		super(Transactions.TRANSACTIONS);
	}

	/**
	 * Create a detached, initialised TransactionsRecord
	 */
	public TransactionsRecord(Integer id, Integer accountId, BigDecimal amount) {
		super(Transactions.TRANSACTIONS);

		setValue(0, id);
		setValue(1, accountId);
		setValue(2, amount);
	}
}
