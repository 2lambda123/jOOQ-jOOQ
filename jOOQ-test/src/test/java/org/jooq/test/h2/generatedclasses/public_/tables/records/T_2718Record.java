/**
 * This class is generated by jOOQ
 */
package org.jooq.test.h2.generatedclasses.public_.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.test.h2.generatedclasses.public_.tables.T_2718;
import org.jooq.test.h2.generatedclasses.public_.tables.interfaces.IT_2718;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class T_2718Record extends UpdatableRecordImpl<T_2718Record> implements Record2<Integer, Integer>, IT_2718 {

	private static final long serialVersionUID = 867675790;

	/**
	 * Setter for <code>PUBLIC.T_2718.EXCLUDE_ME</code>.
	 */
	@Override
	public T_2718Record setExcludeMe(Integer value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>PUBLIC.T_2718.EXCLUDE_ME</code>.
	 */
	@Override
	public Integer getExcludeMe() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>PUBLIC.T_2718.XX</code>.
	 */
	@Override
	public T_2718Record setXx(Integer value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>PUBLIC.T_2718.XX</code>.
	 */
	@Override
	public Integer getXx() {
		return (Integer) getValue(1);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Integer, Integer> fieldsRow() {
		return (Row2) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Integer, Integer> valuesRow() {
		return (Row2) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return T_2718.T_2718.EXCLUDE_ME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return T_2718.T_2718.XX;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getExcludeMe();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getXx();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public T_2718Record value1(Integer value) {
		setExcludeMe(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public T_2718Record value2(Integer value) {
		setXx(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public T_2718Record values(Integer value1, Integer value2) {
		value1(value1);
		value2(value2);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IT_2718 from) {
		setExcludeMe(from.getExcludeMe());
		setXx(from.getXx());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IT_2718> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached T_2718Record
	 */
	public T_2718Record() {
		super(T_2718.T_2718);
	}

	/**
	 * Create a detached, initialised T_2718Record
	 */
	public T_2718Record(Integer excludeMe, Integer xx) {
		super(T_2718.T_2718);

		setValue(0, excludeMe);
		setValue(1, xx);
	}
}
