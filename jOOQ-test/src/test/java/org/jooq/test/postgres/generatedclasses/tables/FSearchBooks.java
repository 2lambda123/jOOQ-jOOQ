/**
 * This class is generated by jOOQ
 */
package org.jooq.test.postgres.generatedclasses.tables;


import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.test.postgres.generatedclasses.Public;
import org.jooq.test.postgres.generatedclasses.enums.UBookStatus;
import org.jooq.test.postgres.generatedclasses.tables.records.FSearchBooksRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FSearchBooks extends TableImpl<FSearchBooksRecord> {

	private static final long serialVersionUID = -1963956314;

	/**
	 * The reference instance of <code>public.f_search_books</code>
	 */
	public static final FSearchBooks F_SEARCH_BOOKS = new FSearchBooks();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<FSearchBooksRecord> getRecordType() {
		return FSearchBooksRecord.class;
	}

	/**
	 * The column <code>public.f_search_books.id</code>.
	 */
	public final TableField<FSearchBooksRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>public.f_search_books.author_id</code>.
	 */
	public final TableField<FSearchBooksRecord, Integer> AUTHOR_ID = createField("author_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>public.f_search_books.co_author_id</code>.
	 */
	public final TableField<FSearchBooksRecord, Integer> CO_AUTHOR_ID = createField("co_author_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.f_search_books.details_id</code>.
	 */
	public final TableField<FSearchBooksRecord, Integer> DETAILS_ID = createField("details_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.f_search_books.title</code>.
	 */
	public final TableField<FSearchBooksRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR.length(400).nullable(false), this, "");

	/**
	 * The column <code>public.f_search_books.published_in</code>.
	 */
	public final TableField<FSearchBooksRecord, Integer> PUBLISHED_IN = createField("published_in", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>public.f_search_books.language_id</code>.
	 */
	public final TableField<FSearchBooksRecord, Integer> LANGUAGE_ID = createField("language_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.f_search_books.content_text</code>.
	 */
	public final TableField<FSearchBooksRecord, String> CONTENT_TEXT = createField("content_text", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>public.f_search_books.content_pdf</code>.
	 */
	public final TableField<FSearchBooksRecord, byte[]> CONTENT_PDF = createField("content_pdf", org.jooq.impl.SQLDataType.BLOB, this, "");

	/**
	 * The column <code>public.f_search_books.status</code>.
	 */
	public final TableField<FSearchBooksRecord, UBookStatus> STATUS = createField("status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(org.jooq.test.postgres.generatedclasses.enums.UBookStatus.class), this, "");

	/**
	 * Create a <code>public.f_search_books</code> table reference
	 */
	public FSearchBooks() {
		this("f_search_books", null);
	}

	/**
	 * Create an aliased <code>public.f_search_books</code> table reference
	 */
	public FSearchBooks(String alias) {
		this(alias, F_SEARCH_BOOKS);
	}

	private FSearchBooks(String alias, Table<FSearchBooksRecord> aliased) {
		this(alias, aliased, new Field[3]);
	}

	private FSearchBooks(String alias, Table<FSearchBooksRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public FSearchBooks as(String alias) {
		return new FSearchBooks(alias, this, parameters);
	}

	/**
	 * Rename this table
	 */
	public FSearchBooks rename(String name) {
		return new FSearchBooks(name, null, parameters);
	}

	/**
	 * Call this table-valued function
	 */
	public FSearchBooks call(String pTitle, Long pLimit, Long pOffset) {
		return new FSearchBooks(getName(), null, new Field[] { DSL.val(pTitle), DSL.val(pLimit), DSL.val(pOffset) });
	}

	/**
	 * Call this table-valued function
	 */
	public FSearchBooks call(Field<String> pTitle, Field<Long> pLimit, Field<Long> pOffset) {
		return new FSearchBooks(getName(), null, new Field[] { pTitle, pLimit, pOffset });
	}
}
