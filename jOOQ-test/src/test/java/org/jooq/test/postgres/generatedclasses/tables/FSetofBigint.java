/**
 * This class is generated by jOOQ
 */
package org.jooq.test.postgres.generatedclasses.tables;


import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.test.postgres.generatedclasses.Public;
import org.jooq.test.postgres.generatedclasses.tables.records.FSetofBigintRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FSetofBigint extends TableImpl<FSetofBigintRecord> {

	private static final long serialVersionUID = 312209520;

	/**
	 * The reference instance of <code>public.f_setof_bigint</code>
	 */
	public static final FSetofBigint F_SETOF_BIGINT = new FSetofBigint();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<FSetofBigintRecord> getRecordType() {
		return FSetofBigintRecord.class;
	}

	/**
	 * The column <code>public.f_setof_bigint.f_setof_bigint</code>.
	 */
	public final TableField<FSetofBigintRecord, Long> F_SETOF_BIGINT_ = createField("f_setof_bigint", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * Create a <code>public.f_setof_bigint</code> table reference
	 */
	public FSetofBigint() {
		this("f_setof_bigint", null);
	}

	/**
	 * Create an aliased <code>public.f_setof_bigint</code> table reference
	 */
	public FSetofBigint(String alias) {
		this(alias, F_SETOF_BIGINT);
	}

	private FSetofBigint(String alias, Table<FSetofBigintRecord> aliased) {
		this(alias, aliased, new Field[1]);
	}

	private FSetofBigint(String alias, Table<FSetofBigintRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public FSetofBigint as(String alias) {
		return new FSetofBigint(alias, this, parameters);
	}

	/**
	 * Rename this table
	 */
	public FSetofBigint rename(String name) {
		return new FSetofBigint(name, null, parameters);
	}

	/**
	 * Call this table-valued function
	 */
	public FSetofBigint call(Long arg) {
		return new FSetofBigint(getName(), null, new Field[] { DSL.val(arg) });
	}

	/**
	 * Call this table-valued function
	 */
	public FSetofBigint call(Field<Long> arg) {
		return new FSetofBigint(getName(), null, new Field[] { arg });
	}
}
