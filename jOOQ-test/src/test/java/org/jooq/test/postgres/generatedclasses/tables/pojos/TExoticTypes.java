/**
 * This class is generated by jOOQ
 */
package org.jooq.test.postgres.generatedclasses.tables.pojos;


import com.google.gson.JsonElement;

import java.util.Arrays;
import java.util.Map;
import java.util.UUID;

import org.codehaus.jackson.JsonNode;
import org.jooq.lambda.tuple.Range;
import org.jooq.test.all.types.JSONJacksonHelloWorld;
import org.jooq.test.postgres.generatedclasses.tables.interfaces.ITExoticTypes;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TExoticTypes implements ITExoticTypes {

	private static final long serialVersionUID = 1755964375;

	private final Integer               id;
	private final UUID                  uu;
	private final UUID[]                uuArray;
	private final UUID                  uuWrapper;
	private final UUID[]                uuWrapperArray;
	private final Object                js;
	private final JsonElement           jsGson;
	private final Object                jsJavax;
	private final JSONJacksonHelloWorld jsJackson;
	private final JsonNode              jsJacksonJsonNode;
	private final Object                hstore;
	private final Map<String, String>   hstoreMap;
	private final Range<Integer>        rangeInt4;
	private final Object                rangeInt8;
	private final Object                pgXmlAsIs;
	private final Object                pgXmlAsDocument;

	public TExoticTypes(TExoticTypes value) {
		this.id = value.id;
		this.uu = value.uu;
		this.uuArray = value.uuArray;
		this.uuWrapper = value.uuWrapper;
		this.uuWrapperArray = value.uuWrapperArray;
		this.js = value.js;
		this.jsGson = value.jsGson;
		this.jsJavax = value.jsJavax;
		this.jsJackson = value.jsJackson;
		this.jsJacksonJsonNode = value.jsJacksonJsonNode;
		this.hstore = value.hstore;
		this.hstoreMap = value.hstoreMap;
		this.rangeInt4 = value.rangeInt4;
		this.rangeInt8 = value.rangeInt8;
		this.pgXmlAsIs = value.pgXmlAsIs;
		this.pgXmlAsDocument = value.pgXmlAsDocument;
	}

	public TExoticTypes(
		Integer               id,
		UUID                  uu,
		UUID[]                uuArray,
		UUID                  uuWrapper,
		UUID[]                uuWrapperArray,
		Object                js,
		JsonElement           jsGson,
		Object                jsJavax,
		JSONJacksonHelloWorld jsJackson,
		JsonNode              jsJacksonJsonNode,
		Object                hstore,
		Map<String, String>   hstoreMap,
		Range<Integer>        rangeInt4,
		Object                rangeInt8,
		Object                pgXmlAsIs,
		Object                pgXmlAsDocument
	) {
		this.id = id;
		this.uu = uu;
		this.uuArray = uuArray;
		this.uuWrapper = uuWrapper;
		this.uuWrapperArray = uuWrapperArray;
		this.js = js;
		this.jsGson = jsGson;
		this.jsJavax = jsJavax;
		this.jsJackson = jsJackson;
		this.jsJacksonJsonNode = jsJacksonJsonNode;
		this.hstore = hstore;
		this.hstoreMap = hstoreMap;
		this.rangeInt4 = rangeInt4;
		this.rangeInt8 = rangeInt8;
		this.pgXmlAsIs = pgXmlAsIs;
		this.pgXmlAsDocument = pgXmlAsDocument;
	}

	@Override
	public Integer getId() {
		return this.id;
	}

	@Override
	public UUID getUu() {
		return this.uu;
	}

	@Override
	public UUID[] getUuArray() {
		return this.uuArray;
	}

	@Override
	public UUID getUuWrapper() {
		return this.uuWrapper;
	}

	@Override
	public UUID[] getUuWrapperArray() {
		return this.uuWrapperArray;
	}

	@Override
	public Object getJs() {
		return this.js;
	}

	@Override
	public JsonElement getJsGson() {
		return this.jsGson;
	}

	@Override
	public Object getJsJavax() {
		return this.jsJavax;
	}

	@Override
	public JSONJacksonHelloWorld getJsJackson() {
		return this.jsJackson;
	}

	@Override
	public JsonNode getJsJacksonJsonNode() {
		return this.jsJacksonJsonNode;
	}

	@Override
	public Object getHstore() {
		return this.hstore;
	}

	@Override
	public Map<String, String> getHstoreMap() {
		return this.hstoreMap;
	}

	@Override
	public Range<Integer> getRangeInt4() {
		return this.rangeInt4;
	}

	@Override
	public Object getRangeInt8() {
		return this.rangeInt8;
	}

	@Override
	public Object getPgXmlAsIs() {
		return this.pgXmlAsIs;
	}

	@Override
	public Object getPgXmlAsDocument() {
		return this.pgXmlAsDocument;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("TExoticTypes (");

		sb.append(id);
		sb.append(", ").append(uu);
		sb.append(", ").append(Arrays.toString(uuArray));
		sb.append(", ").append(uuWrapper);
		sb.append(", ").append(Arrays.toString(uuWrapperArray));
		sb.append(", ").append(js);
		sb.append(", ").append(jsGson);
		sb.append(", ").append(jsJavax);
		sb.append(", ").append(jsJackson);
		sb.append(", ").append(jsJacksonJsonNode);
		sb.append(", ").append(hstore);
		sb.append(", ").append(hstoreMap);
		sb.append(", ").append(rangeInt4);
		sb.append(", ").append(rangeInt8);
		sb.append(", ").append(pgXmlAsIs);
		sb.append(", ").append(pgXmlAsDocument);

		sb.append(")");
		return sb.toString();
	}
}
