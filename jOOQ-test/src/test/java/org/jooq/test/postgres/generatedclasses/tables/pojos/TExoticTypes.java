/**
 * This class is generated by jOOQ
 */
package org.jooq.test.postgres.generatedclasses.tables.pojos;


import com.google.gson.JsonElement;

import java.util.Map;
import java.util.UUID;

import org.codehaus.jackson.JsonNode;
import org.jooq.test.all.types.JSONJacksonHelloWorld;
import org.jooq.test.postgres.generatedclasses.tables.interfaces.ITExoticTypes;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TExoticTypes implements ITExoticTypes {

	private static final long serialVersionUID = -1647070700;

	private final Integer               id;
	private final UUID                  uu;
	private final Object                js;
	private final JsonElement           jsGson;
	private final Object                jsJavax;
	private final JSONJacksonHelloWorld jsJackson;
	private final JsonNode              jsJacksonJsonNode;
	private final Object                hstore;
	private final Map<String, String>   hstoreMap;

	public TExoticTypes(
		Integer               id,
		UUID                  uu,
		Object                js,
		JsonElement           jsGson,
		Object                jsJavax,
		JSONJacksonHelloWorld jsJackson,
		JsonNode              jsJacksonJsonNode,
		Object                hstore,
		Map<String, String>   hstoreMap
	) {
		this.id = id;
		this.uu = uu;
		this.js = js;
		this.jsGson = jsGson;
		this.jsJavax = jsJavax;
		this.jsJackson = jsJackson;
		this.jsJacksonJsonNode = jsJacksonJsonNode;
		this.hstore = hstore;
		this.hstoreMap = hstoreMap;
	}

	@Override
	public Integer getId() {
		return this.id;
	}

	@Override
	public UUID getUu() {
		return this.uu;
	}

	@Override
	public Object getJs() {
		return this.js;
	}

	@Override
	public JsonElement getJsGson() {
		return this.jsGson;
	}

	@Override
	public Object getJsJavax() {
		return this.jsJavax;
	}

	@Override
	public JSONJacksonHelloWorld getJsJackson() {
		return this.jsJackson;
	}

	@Override
	public JsonNode getJsJacksonJsonNode() {
		return this.jsJacksonJsonNode;
	}

	@Override
	public Object getHstore() {
		return this.hstore;
	}

	@Override
	public Map<String, String> getHstoreMap() {
		return this.hstoreMap;
	}
}
