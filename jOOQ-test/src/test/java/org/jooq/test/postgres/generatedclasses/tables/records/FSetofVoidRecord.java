/**
 * This class is generated by jOOQ
 */
package org.jooq.test.postgres.generatedclasses.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Row;
import org.jooq.Row1;
import org.jooq.impl.TableRecordImpl;
import org.jooq.test.postgres.generatedclasses.tables.FSetofVoid;
import org.jooq.test.postgres.generatedclasses.tables.interfaces.IFSetofVoid;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FSetofVoidRecord extends TableRecordImpl<FSetofVoidRecord> implements Record1<Object>, IFSetofVoid {

	private static final long serialVersionUID = -1872973072;

	/**
	 * Setter for <code>public.f_setof_void.f_setof_void</code>.
	 */
	public FSetofVoidRecord setFSetofVoid(Object value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>public.f_setof_void.f_setof_void</code>.
	 */
	@Override
	public Object getFSetofVoid() {
		return (Object) getValue(0);
	}

	// -------------------------------------------------------------------------
	// Record1 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row1<Object> fieldsRow() {
		return (Row1) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row1<Object> valuesRow() {
		return (Row1) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Object> field1() {
		return FSetofVoid.F_SETOF_VOID.F_SETOF_VOID_;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Object value1() {
		return getFSetofVoid();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public FSetofVoidRecord value1(Object value) {
		setFSetofVoid(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public FSetofVoidRecord values(Object value1) {
		value1(value1);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached FSetofVoidRecord
	 */
	public FSetofVoidRecord() {
		super(FSetofVoid.F_SETOF_VOID);
	}

	/**
	 * Create a detached, initialised FSetofVoidRecord
	 */
	public FSetofVoidRecord(Object fSetofVoid) {
		super(FSetofVoid.F_SETOF_VOID);

		setValue(0, fSetofVoid);
	}
}
