/**
 * This class is generated by jOOQ
 */
package org.jooq.test.postgres.generatedclasses.tables;


import java.sql.Date;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.test.postgres.generatedclasses.Public;
import org.jooq.test.postgres.generatedclasses.enums.UCountry;
import org.jooq.test.postgres.generatedclasses.tables.records.FGetArraysRecord;
import org.jooq.test.postgres.generatedclasses.udt.records.UAddressTypeRecord;
import org.jooq.test.postgres.generatedclasses.udt.records.UStreetTypeRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FGetArrays extends TableImpl<FGetArraysRecord> {

	private static final long serialVersionUID = 934956628;

	/**
	 * The reference instance of <code>public.f_get_arrays</code>
	 */
	public static final FGetArrays F_GET_ARRAYS = new FGetArrays();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<FGetArraysRecord> getRecordType() {
		return FGetArraysRecord.class;
	}

	/**
	 * The column <code>public.f_get_arrays.id</code>.
	 */
	public final TableField<FGetArraysRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>public.f_get_arrays.string_array</code>.
	 */
	public final TableField<FGetArraysRecord, String[]> STRING_ARRAY = createField("string_array", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

	/**
	 * The column <code>public.f_get_arrays.number_array</code>.
	 */
	public final TableField<FGetArraysRecord, Integer[]> NUMBER_ARRAY = createField("number_array", org.jooq.impl.SQLDataType.INTEGER.getArrayDataType(), this, "");

	/**
	 * The column <code>public.f_get_arrays.date_array</code>.
	 */
	public final TableField<FGetArraysRecord, Date[]> DATE_ARRAY = createField("date_array", org.jooq.impl.SQLDataType.DATE.getArrayDataType(), this, "");

	/**
	 * The column <code>public.f_get_arrays.udt_array</code>.
	 */
	public final TableField<FGetArraysRecord, UStreetTypeRecord[]> UDT_ARRAY = createField("udt_array", org.jooq.test.postgres.generatedclasses.udt.UStreetType.U_STREET_TYPE.getDataType().getArrayDataType(), this, "");

	/**
	 * The column <code>public.f_get_arrays.address_array</code>.
	 */
	public final TableField<FGetArraysRecord, UAddressTypeRecord[]> ADDRESS_ARRAY = createField("address_array", org.jooq.test.postgres.generatedclasses.udt.UAddressType.U_ADDRESS_TYPE.getDataType().getArrayDataType(), this, "");

	/**
	 * The column <code>public.f_get_arrays.enum_array</code>.
	 */
	public final TableField<FGetArraysRecord, UCountry[]> ENUM_ARRAY = createField("enum_array", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(org.jooq.test.postgres.generatedclasses.enums.UCountry.class).getArrayDataType(), this, "");

	/**
	 * The column <code>public.f_get_arrays.array_array</code>.
	 */
	public final TableField<FGetArraysRecord, Integer[]> ARRAY_ARRAY = createField("array_array", org.jooq.impl.SQLDataType.INTEGER.getArrayDataType(), this, "");

	/**
	 * The column <code>public.f_get_arrays.number_list</code>.
	 */
	public final TableField<FGetArraysRecord, String[]> NUMBER_LIST = createField("number_list", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

	/**
	 * The column <code>public.f_get_arrays.string_list</code>.
	 */
	public final TableField<FGetArraysRecord, String[]> STRING_LIST = createField("string_list", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

	/**
	 * The column <code>public.f_get_arrays.date_list</code>.
	 */
	public final TableField<FGetArraysRecord, String[]> DATE_LIST = createField("date_list", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

	/**
	 * Create a <code>public.f_get_arrays</code> table reference
	 */
	public FGetArrays() {
		this("f_get_arrays", null);
	}

	/**
	 * Create an aliased <code>public.f_get_arrays</code> table reference
	 */
	public FGetArrays(String alias) {
		this(alias, F_GET_ARRAYS);
	}

	private FGetArrays(String alias, Table<FGetArraysRecord> aliased) {
		this(alias, aliased, new Field[1]);
	}

	private FGetArrays(String alias, Table<FGetArraysRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public FGetArrays as(String alias) {
		return new FGetArrays(alias, this, parameters);
	}

	/**
	 * Rename this table
	 */
	public FGetArrays rename(String name) {
		return new FGetArrays(name, null, parameters);
	}

	/**
	 * Call this table-valued function
	 */
	public FGetArrays call(Integer pId) {
		return new FGetArrays(getName(), null, new Field[] { DSL.val(pId) });
	}

	/**
	 * Call this table-valued function
	 */
	public FGetArrays call(Field<Integer> pId) {
		return new FGetArrays(getName(), null, new Field[] { pId });
	}
}
