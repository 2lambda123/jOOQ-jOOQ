/**
 * This class is generated by jOOQ
 */
package org.jooq.test.postgres.generatedclasses.tables;


import com.google.gson.JsonElement;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.codehaus.jackson.JsonNode;
import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.lambda.tuple.Range;
import org.jooq.test.all.bindings.PostgresHstoreMapBinding;
import org.jooq.test.all.bindings.PostgresInt4RangeBinding;
import org.jooq.test.all.bindings.PostgresJSONGsonBinding;
import org.jooq.test.all.bindings.PostgresJSONJacksonBinding;
import org.jooq.test.all.bindings.PostgresJSONJacksonJsonNodeBinding;
import org.jooq.test.all.types.JSONJacksonHelloWorld;
import org.jooq.test.postgres.generatedclasses.Keys;
import org.jooq.test.postgres.generatedclasses.Public;
import org.jooq.test.postgres.generatedclasses.tables.records.TExoticTypesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TExoticTypes extends TableImpl<TExoticTypesRecord> {

	private static final long serialVersionUID = -286861723;

	/**
	 * The reference instance of <code>public.t_exotic_types</code>
	 */
	public static final TExoticTypes T_EXOTIC_TYPES = new TExoticTypes();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TExoticTypesRecord> getRecordType() {
		return TExoticTypesRecord.class;
	}

	/**
	 * The column <code>public.t_exotic_types.id</code>.
	 */
	public final TableField<TExoticTypesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>public.t_exotic_types.uu</code>.
	 */
	public final TableField<TExoticTypesRecord, UUID> UU = createField("uu", org.jooq.impl.SQLDataType.UUID, this, "");

	/**
	 * The column <code>public.t_exotic_types.js</code>.
	 */
	public final TableField<TExoticTypesRecord, Object> JS = createField("js", org.jooq.impl.SQLDataType.OTHER, this, "");

	/**
	 * The column <code>public.t_exotic_types.js_gson</code>.
	 */
	public final TableField<TExoticTypesRecord, JsonElement> JS_GSON = createField("js_gson", org.jooq.impl.SQLDataType.OTHER, this, "", new PostgresJSONGsonBinding());

	/**
	 * The column <code>public.t_exotic_types.js_javax</code>.
	 */
	public final TableField<TExoticTypesRecord, Object> JS_JAVAX = createField("js_javax", org.jooq.impl.SQLDataType.OTHER, this, "");

	/**
	 * The column <code>public.t_exotic_types.js_jackson</code>.
	 */
	public final TableField<TExoticTypesRecord, JSONJacksonHelloWorld> JS_JACKSON = createField("js_jackson", org.jooq.impl.SQLDataType.OTHER, this, "", new PostgresJSONJacksonBinding());

	/**
	 * The column <code>public.t_exotic_types.js_jackson_json_node</code>.
	 */
	public final TableField<TExoticTypesRecord, JsonNode> JS_JACKSON_JSON_NODE = createField("js_jackson_json_node", org.jooq.impl.SQLDataType.OTHER, this, "", new PostgresJSONJacksonJsonNodeBinding());

	/**
	 * The column <code>public.t_exotic_types.hstore</code>.
	 */
	public final TableField<TExoticTypesRecord, Object> HSTORE = createField("hstore", org.jooq.impl.DefaultDataType.getDefaultDataType("USER-DEFINED"), this, "");

	/**
	 * The column <code>public.t_exotic_types.hstore_map</code>.
	 */
	public final TableField<TExoticTypesRecord, Map<String, String>> HSTORE_MAP = createField("hstore_map", org.jooq.impl.DefaultDataType.getDefaultDataType("USER-DEFINED"), this, "", new PostgresHstoreMapBinding());

	/**
	 * The column <code>public.t_exotic_types.range_int4</code>.
	 */
	public final TableField<TExoticTypesRecord, Range<Integer>> RANGE_INT4 = createField("range_int4", org.jooq.impl.DefaultDataType.getDefaultDataType("int4range"), this, "", new PostgresInt4RangeBinding());

	/**
	 * The column <code>public.t_exotic_types.range_int8</code>.
	 */
	public final TableField<TExoticTypesRecord, Object> RANGE_INT8 = createField("range_int8", org.jooq.impl.DefaultDataType.getDefaultDataType("int8range"), this, "");

	/**
	 * The column <code>public.t_exotic_types.pg_xml_as_is</code>.
	 */
	public final TableField<TExoticTypesRecord, Object> PG_XML_AS_IS = createField("pg_xml_as_is", org.jooq.impl.DefaultDataType.getDefaultDataType("xml"), this, "");

	/**
	 * The column <code>public.t_exotic_types.pg_xml_as_document</code>.
	 */
	public final TableField<TExoticTypesRecord, Object> PG_XML_AS_DOCUMENT = createField("pg_xml_as_document", org.jooq.impl.DefaultDataType.getDefaultDataType("xml"), this, "");

	/**
	 * Create a <code>public.t_exotic_types</code> table reference
	 */
	public TExoticTypes() {
		this("t_exotic_types", null);
	}

	/**
	 * Create an aliased <code>public.t_exotic_types</code> table reference
	 */
	public TExoticTypes(String alias) {
		this(alias, T_EXOTIC_TYPES);
	}

	private TExoticTypes(String alias, Table<TExoticTypesRecord> aliased) {
		this(alias, aliased, null);
	}

	private TExoticTypes(String alias, Table<TExoticTypesRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<TExoticTypesRecord> getPrimaryKey() {
		return Keys.PK_T_EXOTIC_TYPES;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<TExoticTypesRecord>> getKeys() {
		return Arrays.<UniqueKey<TExoticTypesRecord>>asList(Keys.PK_T_EXOTIC_TYPES);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TExoticTypes as(String alias) {
		return new TExoticTypes(alias, this);
	}

	/**
	 * Rename this table
	 */
	public TExoticTypes rename(String name) {
		return new TExoticTypes(name, null);
	}
}
