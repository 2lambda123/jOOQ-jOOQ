/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oracle3.generatedclasses.packages;


import org.jooq.Configuration;
import org.jooq.Field;
import org.jooq.impl.PackageImpl;
import org.jooq.test.oracle3.generatedclasses.DefaultSchema;
import org.jooq.test.oracle3.generatedclasses.packages.test_synonym_package.ACTUAL_OBJECT;
import org.jooq.test.oracle3.generatedclasses.packages.test_synonym_package.ACTUAL_TABLE;
import org.jooq.test.oracle3.generatedclasses.packages.test_synonym_package.PUBLIC_OBJECT;
import org.jooq.test.oracle3.generatedclasses.packages.test_synonym_package.PUBLIC_TABLE;
import org.jooq.test.oracle3.generatedclasses.packages.test_synonym_package.TEST_OBJECT;
import org.jooq.test.oracle3.generatedclasses.packages.test_synonym_package.TEST_TABLE;
import org.jooq.test.oracle3.generatedclasses.packages.test_synonym_package.TEST_TRANSITIVE;


/**
 * Convenience access to all stored procedures and functions in TEST_SYNONYM_PACKAGE
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TEST_SYNONYM_PACKAGE extends PackageImpl implements Cloneable {

	private static final long serialVersionUID = -1619491959;

	/**
	 * The reference instance of <code>TEST_SYNONYM_PACKAGE</code>
	 */
	public static final TEST_SYNONYM_PACKAGE TEST_SYNONYM_PACKAGE = new TEST_SYNONYM_PACKAGE();

	/**
	 * Call <code>TEST_SYNONYM_PACKAGE.ACTUAL_OBJECT</code>
	 */
	public static Object call_ACTUAL_OBJECT(Configuration configuration) {
		ACTUAL_OBJECT f = new ACTUAL_OBJECT();

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST_SYNONYM_PACKAGE.ACTUAL_OBJECT</code> as a field
	 */
	public static Field<Object> call_ACTUAL_OBJECT() {
		ACTUAL_OBJECT f = new ACTUAL_OBJECT();

		return f.asField();
	}

	/**
	 * Call <code>TEST_SYNONYM_PACKAGE.ACTUAL_TABLE</code>
	 */
	public static Object call_ACTUAL_TABLE(Configuration configuration) {
		ACTUAL_TABLE f = new ACTUAL_TABLE();

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST_SYNONYM_PACKAGE.ACTUAL_TABLE</code> as a field
	 */
	public static Field<Object> call_ACTUAL_TABLE() {
		ACTUAL_TABLE f = new ACTUAL_TABLE();

		return f.asField();
	}

	/**
	 * Call <code>TEST_SYNONYM_PACKAGE.PUBLIC_OBJECT</code>
	 */
	public static Object call_PUBLIC_OBJECT(Configuration configuration) {
		PUBLIC_OBJECT f = new PUBLIC_OBJECT();

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST_SYNONYM_PACKAGE.PUBLIC_OBJECT</code> as a field
	 */
	public static Field<Object> call_PUBLIC_OBJECT() {
		PUBLIC_OBJECT f = new PUBLIC_OBJECT();

		return f.asField();
	}

	/**
	 * Call <code>TEST_SYNONYM_PACKAGE.PUBLIC_TABLE</code>
	 */
	public static Object call_PUBLIC_TABLE(Configuration configuration) {
		PUBLIC_TABLE f = new PUBLIC_TABLE();

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST_SYNONYM_PACKAGE.PUBLIC_TABLE</code> as a field
	 */
	public static Field<Object> call_PUBLIC_TABLE() {
		PUBLIC_TABLE f = new PUBLIC_TABLE();

		return f.asField();
	}

	/**
	 * Call <code>TEST_SYNONYM_PACKAGE.TEST_OBJECT</code>
	 */
	public static Object call_TEST_OBJECT(Configuration configuration) {
		TEST_OBJECT f = new TEST_OBJECT();

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST_SYNONYM_PACKAGE.TEST_OBJECT</code> as a field
	 */
	public static Field<Object> call_TEST_OBJECT() {
		TEST_OBJECT f = new TEST_OBJECT();

		return f.asField();
	}

	/**
	 * Call <code>TEST_SYNONYM_PACKAGE.TEST_TABLE</code>
	 */
	public static Object call_TEST_TABLE(Configuration configuration) {
		TEST_TABLE f = new TEST_TABLE();

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST_SYNONYM_PACKAGE.TEST_TABLE</code> as a field
	 */
	public static Field<Object> call_TEST_TABLE() {
		TEST_TABLE f = new TEST_TABLE();

		return f.asField();
	}

	/**
	 * Call <code>TEST_SYNONYM_PACKAGE.TEST_TRANSITIVE</code>
	 */
	public static Object call_TEST_TRANSITIVE(Configuration configuration) {
		TEST_TRANSITIVE f = new TEST_TRANSITIVE();

		f.execute(configuration);
		return f.getReturnValue();
	}

	/**
	 * Get <code>TEST_SYNONYM_PACKAGE.TEST_TRANSITIVE</code> as a field
	 */
	public static Field<Object> call_TEST_TRANSITIVE() {
		TEST_TRANSITIVE f = new TEST_TRANSITIVE();

		return f.asField();
	}

	/**
	 * No further instances allowed
	 */
	private TEST_SYNONYM_PACKAGE() {
		super("TEST_SYNONYM_PACKAGE", DefaultSchema.DEFAULT_SCHEMA);
	}
}
