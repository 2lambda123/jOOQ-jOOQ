/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oracle3.generatedclasses.udt.pojos;


import java.util.ArrayList;
import java.util.List;

import org.jooq.test.oracle3.generatedclasses.udt.interfaces.U_NESTED_1_INTERFACE;
import org.jooq.test.oracle3.generatedclasses.udt.interfaces.U_NESTED_3_INTERFACE;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class U_NESTED_3_POJO extends ThreadDeath implements Cloneable, U_NESTED_3_INTERFACE {

	private static final long serialVersionUID = -1619092800;

	private Integer               ID;
	private List<U_NESTED_1_POJO> NESTED;

	public U_NESTED_3_POJO() {}

	public U_NESTED_3_POJO(U_NESTED_3_POJO value) {
		this.ID = value.ID;
		this.NESTED = value.NESTED;
	}

	public U_NESTED_3_POJO(
		Integer               ID,
		List<U_NESTED_1_POJO> NESTED
	) {
		this.ID = ID;
		this.NESTED = NESTED;
	}

	@Override
	public Integer getID() {
		return this.ID;
	}

	@Override
	public void setID(Integer ID) {
		this.ID = ID;
	}

	@Override
	public List<U_NESTED_1_POJO> getNESTED() {
		return this.NESTED;
	}

	@Override
	public void setNESTED(List<? extends org.jooq.test.oracle3.generatedclasses.udt.interfaces.U_NESTED_1_INTERFACE> NESTED) {
		if (NESTED == null)
			this.NESTED = null;
		else {
			this.NESTED = new ArrayList();

			for (U_NESTED_1_INTERFACE i : NESTED)
				this.NESTED.add(i.into(new U_NESTED_1_POJO()));
		}
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("U_NESTED_3_POJO (");

		sb.append(ID);
		sb.append(", ").append(NESTED);

		sb.append(")");
		return sb.toString();
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(U_NESTED_3_INTERFACE from) {
		setID(from.getID());
		setNESTED(from.getNESTED());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends U_NESTED_3_INTERFACE> E into(E into) {
		into.from(this);
		return into;
	}
}
