/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oracle3.generatedclasses.tables.records;


import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.test.oracle3.generatedclasses.tables.interfaces.T_EXOTIC_TYPES_INTERFACE;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "T_EXOTIC_TYPES")
public class T_EXOTIC_TYPES extends UpdatableRecordImpl<T_EXOTIC_TYPES> implements Cloneable, Record8<Integer, String, byte[], String, String, Object, Object, Object>, T_EXOTIC_TYPES_INTERFACE {

	private static final long serialVersionUID = 1123743320;

	/**
	 * Setter for <code>T_EXOTIC_TYPES.ID</code>.
	 */
	@Override
	public void setID(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>T_EXOTIC_TYPES.ID</code>.
	 */
	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 7)
	@Override
	public Integer getID() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>T_EXOTIC_TYPES.UU</code>.
	 */
	@Override
	public void setUU(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>T_EXOTIC_TYPES.UU</code>.
	 */
	@Column(name = "UU", length = 36)
	@Override
	public String getUU() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>T_EXOTIC_TYPES.JAVA_IO_SERIALIZABLE</code>.
	 */
	@Override
	public void setJAVA_IO_SERIALIZABLE(byte[] value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>T_EXOTIC_TYPES.JAVA_IO_SERIALIZABLE</code>.
	 */
	@Column(name = "JAVA_IO_SERIALIZABLE")
	@Override
	public byte[] getJAVA_IO_SERIALIZABLE() {
		return (byte[]) getValue(2);
	}

	/**
	 * Setter for <code>T_EXOTIC_TYPES.PLAIN_SQL_CONVERTER_XML</code>.
	 */
	@Override
	public void setPLAIN_SQL_CONVERTER_XML(String value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>T_EXOTIC_TYPES.PLAIN_SQL_CONVERTER_XML</code>.
	 */
	@Column(name = "PLAIN_SQL_CONVERTER_XML")
	@Override
	public String getPLAIN_SQL_CONVERTER_XML() {
		return (String) getValue(3);
	}

	/**
	 * Setter for <code>T_EXOTIC_TYPES.PLAIN_SQL_BINDING_XML</code>.
	 */
	@Override
	public void setPLAIN_SQL_BINDING_XML(String value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>T_EXOTIC_TYPES.PLAIN_SQL_BINDING_XML</code>.
	 */
	@Column(name = "PLAIN_SQL_BINDING_XML")
	@Override
	public String getPLAIN_SQL_BINDING_XML() {
		return (String) getValue(4);
	}

	/**
	 * Setter for <code>T_EXOTIC_TYPES.ORACLE_XML_AS_IS</code>.
	 */
	@Override
	public void setORACLE_XML_AS_IS(Object value) {
		setValue(5, value);
	}

	/**
	 * Getter for <code>T_EXOTIC_TYPES.ORACLE_XML_AS_IS</code>.
	 */
	@Column(name = "ORACLE_XML_AS_IS")
	@Override
	public Object getORACLE_XML_AS_IS() {
		return (Object) getValue(5);
	}

	/**
	 * Setter for <code>T_EXOTIC_TYPES.ORACLE_XML_AS_DOCUMENT</code>.
	 */
	@Override
	public void setORACLE_XML_AS_DOCUMENT(Object value) {
		setValue(6, value);
	}

	/**
	 * Getter for <code>T_EXOTIC_TYPES.ORACLE_XML_AS_DOCUMENT</code>.
	 */
	@Column(name = "ORACLE_XML_AS_DOCUMENT")
	@Override
	public Object getORACLE_XML_AS_DOCUMENT() {
		return (Object) getValue(6);
	}

	/**
	 * Setter for <code>T_EXOTIC_TYPES.ORACLE_XML_AS_SQLXML</code>.
	 */
	@Override
	public void setORACLE_XML_AS_SQLXML(Object value) {
		setValue(7, value);
	}

	/**
	 * Getter for <code>T_EXOTIC_TYPES.ORACLE_XML_AS_SQLXML</code>.
	 */
	@Column(name = "ORACLE_XML_AS_SQLXML")
	@Override
	public Object getORACLE_XML_AS_SQLXML() {
		return (Object) getValue(7);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record8 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row8<Integer, String, byte[], String, String, Object, Object, Object> fieldsRow() {
		return (Row8) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row8<Integer, String, byte[], String, String, Object, Object, Object> valuesRow() {
		return (Row8) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return org.jooq.test.oracle3.generatedclasses.tables.T_EXOTIC_TYPES.T_EXOTIC_TYPES.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return org.jooq.test.oracle3.generatedclasses.tables.T_EXOTIC_TYPES.T_EXOTIC_TYPES.UU;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<byte[]> field3() {
		return org.jooq.test.oracle3.generatedclasses.tables.T_EXOTIC_TYPES.T_EXOTIC_TYPES.JAVA_IO_SERIALIZABLE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field4() {
		return org.jooq.test.oracle3.generatedclasses.tables.T_EXOTIC_TYPES.T_EXOTIC_TYPES.PLAIN_SQL_CONVERTER_XML;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field5() {
		return org.jooq.test.oracle3.generatedclasses.tables.T_EXOTIC_TYPES.T_EXOTIC_TYPES.PLAIN_SQL_BINDING_XML;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Object> field6() {
		return org.jooq.test.oracle3.generatedclasses.tables.T_EXOTIC_TYPES.T_EXOTIC_TYPES.ORACLE_XML_AS_IS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Object> field7() {
		return org.jooq.test.oracle3.generatedclasses.tables.T_EXOTIC_TYPES.T_EXOTIC_TYPES.ORACLE_XML_AS_DOCUMENT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Object> field8() {
		return org.jooq.test.oracle3.generatedclasses.tables.T_EXOTIC_TYPES.T_EXOTIC_TYPES.ORACLE_XML_AS_SQLXML;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getID();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getUU();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public byte[] value3() {
		return getJAVA_IO_SERIALIZABLE();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value4() {
		return getPLAIN_SQL_CONVERTER_XML();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value5() {
		return getPLAIN_SQL_BINDING_XML();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Object value6() {
		return getORACLE_XML_AS_IS();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Object value7() {
		return getORACLE_XML_AS_DOCUMENT();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Object value8() {
		return getORACLE_XML_AS_SQLXML();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public T_EXOTIC_TYPES value1(Integer value) {
		setID(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public T_EXOTIC_TYPES value2(String value) {
		setUU(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public T_EXOTIC_TYPES value3(byte[] value) {
		setJAVA_IO_SERIALIZABLE(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public T_EXOTIC_TYPES value4(String value) {
		setPLAIN_SQL_CONVERTER_XML(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public T_EXOTIC_TYPES value5(String value) {
		setPLAIN_SQL_BINDING_XML(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public T_EXOTIC_TYPES value6(Object value) {
		setORACLE_XML_AS_IS(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public T_EXOTIC_TYPES value7(Object value) {
		setORACLE_XML_AS_DOCUMENT(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public T_EXOTIC_TYPES value8(Object value) {
		setORACLE_XML_AS_SQLXML(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public T_EXOTIC_TYPES values(Integer value1, String value2, byte[] value3, String value4, String value5, Object value6, Object value7, Object value8) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		value6(value6);
		value7(value7);
		value8(value8);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(T_EXOTIC_TYPES_INTERFACE from) {
		setID(from.getID());
		setUU(from.getUU());
		setJAVA_IO_SERIALIZABLE(from.getJAVA_IO_SERIALIZABLE());
		setPLAIN_SQL_CONVERTER_XML(from.getPLAIN_SQL_CONVERTER_XML());
		setPLAIN_SQL_BINDING_XML(from.getPLAIN_SQL_BINDING_XML());
		setORACLE_XML_AS_IS(from.getORACLE_XML_AS_IS());
		setORACLE_XML_AS_DOCUMENT(from.getORACLE_XML_AS_DOCUMENT());
		setORACLE_XML_AS_SQLXML(from.getORACLE_XML_AS_SQLXML());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends T_EXOTIC_TYPES_INTERFACE> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached T_EXOTIC_TYPES
	 */
	public T_EXOTIC_TYPES() {
		super(org.jooq.test.oracle3.generatedclasses.tables.T_EXOTIC_TYPES.T_EXOTIC_TYPES);
	}

	/**
	 * Create a detached, initialised T_EXOTIC_TYPES
	 */
	public T_EXOTIC_TYPES(Integer ID, String UU, byte[] JAVA_IO_SERIALIZABLE, String PLAIN_SQL_CONVERTER_XML, String PLAIN_SQL_BINDING_XML, Object ORACLE_XML_AS_IS, Object ORACLE_XML_AS_DOCUMENT, Object ORACLE_XML_AS_SQLXML) {
		super(org.jooq.test.oracle3.generatedclasses.tables.T_EXOTIC_TYPES.T_EXOTIC_TYPES);

		setValue(0, ID);
		setValue(1, UU);
		setValue(2, JAVA_IO_SERIALIZABLE);
		setValue(3, PLAIN_SQL_CONVERTER_XML);
		setValue(4, PLAIN_SQL_BINDING_XML);
		setValue(5, ORACLE_XML_AS_IS);
		setValue(6, ORACLE_XML_AS_DOCUMENT);
		setValue(7, ORACLE_XML_AS_SQLXML);
	}
}
