/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oracle3.generatedclasses.tables.pojos;


import java.math.BigDecimal;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;

import org.jooq.test.oracle3.generatedclasses.tables.interfaces.T_RESERVED_INTERFACE;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "T_RESERVED")
public class T_RESERVED_POJO extends ThreadDeath implements Cloneable, T_RESERVED_INTERFACE {

	private static final long serialVersionUID = 1637536767;

	private BigDecimal abstract_;
	private BigDecimal case_;
	private BigDecimal catch_;
	private BigDecimal class_;
	private BigDecimal def;
	private BigDecimal do_;
	private BigDecimal else_;
	private BigDecimal extends_;
	private BigDecimal false_;
	private BigDecimal final_;
	private BigDecimal finally_;
	private BigDecimal for_;
	private BigDecimal forSome;
	private BigDecimal if_;
	private BigDecimal implicit;
	private BigDecimal import_;
	private BigDecimal lazy;
	private BigDecimal match;
	private BigDecimal new_;
	private BigDecimal null_;
	private BigDecimal object;
	private BigDecimal override;
	private BigDecimal package_;
	private BigDecimal private_;
	private BigDecimal protected_;
	private BigDecimal return_;
	private BigDecimal sealed;
	private BigDecimal super_;
	private BigDecimal this_;
	private BigDecimal throw_;
	private BigDecimal trait;
	private BigDecimal try_;
	private BigDecimal true_;
	private BigDecimal type;
	private BigDecimal val;
	private BigDecimal var;
	private BigDecimal while_;
	private BigDecimal with;
	private BigDecimal yield;

	public T_RESERVED_POJO() {}

	public T_RESERVED_POJO(T_RESERVED_POJO value) {
		this.abstract_ = value.abstract_;
		this.case_ = value.case_;
		this.catch_ = value.catch_;
		this.class_ = value.class_;
		this.def = value.def;
		this.do_ = value.do_;
		this.else_ = value.else_;
		this.extends_ = value.extends_;
		this.false_ = value.false_;
		this.final_ = value.final_;
		this.finally_ = value.finally_;
		this.for_ = value.for_;
		this.forSome = value.forSome;
		this.if_ = value.if_;
		this.implicit = value.implicit;
		this.import_ = value.import_;
		this.lazy = value.lazy;
		this.match = value.match;
		this.new_ = value.new_;
		this.null_ = value.null_;
		this.object = value.object;
		this.override = value.override;
		this.package_ = value.package_;
		this.private_ = value.private_;
		this.protected_ = value.protected_;
		this.return_ = value.return_;
		this.sealed = value.sealed;
		this.super_ = value.super_;
		this.this_ = value.this_;
		this.throw_ = value.throw_;
		this.trait = value.trait;
		this.try_ = value.try_;
		this.true_ = value.true_;
		this.type = value.type;
		this.val = value.val;
		this.var = value.var;
		this.while_ = value.while_;
		this.with = value.with;
		this.yield = value.yield;
	}

	public T_RESERVED_POJO(
		BigDecimal abstract_,
		BigDecimal case_,
		BigDecimal catch_,
		BigDecimal class_,
		BigDecimal def,
		BigDecimal do_,
		BigDecimal else_,
		BigDecimal extends_,
		BigDecimal false_,
		BigDecimal final_,
		BigDecimal finally_,
		BigDecimal for_,
		BigDecimal forSome,
		BigDecimal if_,
		BigDecimal implicit,
		BigDecimal import_,
		BigDecimal lazy,
		BigDecimal match,
		BigDecimal new_,
		BigDecimal null_,
		BigDecimal object,
		BigDecimal override,
		BigDecimal package_,
		BigDecimal private_,
		BigDecimal protected_,
		BigDecimal return_,
		BigDecimal sealed,
		BigDecimal super_,
		BigDecimal this_,
		BigDecimal throw_,
		BigDecimal trait,
		BigDecimal try_,
		BigDecimal true_,
		BigDecimal type,
		BigDecimal val,
		BigDecimal var,
		BigDecimal while_,
		BigDecimal with,
		BigDecimal yield
	) {
		this.abstract_ = abstract_;
		this.case_ = case_;
		this.catch_ = catch_;
		this.class_ = class_;
		this.def = def;
		this.do_ = do_;
		this.else_ = else_;
		this.extends_ = extends_;
		this.false_ = false_;
		this.final_ = final_;
		this.finally_ = finally_;
		this.for_ = for_;
		this.forSome = forSome;
		this.if_ = if_;
		this.implicit = implicit;
		this.import_ = import_;
		this.lazy = lazy;
		this.match = match;
		this.new_ = new_;
		this.null_ = null_;
		this.object = object;
		this.override = override;
		this.package_ = package_;
		this.private_ = private_;
		this.protected_ = protected_;
		this.return_ = return_;
		this.sealed = sealed;
		this.super_ = super_;
		this.this_ = this_;
		this.throw_ = throw_;
		this.trait = trait;
		this.try_ = try_;
		this.true_ = true_;
		this.type = type;
		this.val = val;
		this.var = var;
		this.while_ = while_;
		this.with = with;
		this.yield = yield;
	}

	@Column(name = "abstract")
	@Override
	public BigDecimal getabstract() {
		return this.abstract_;
	}

	@Override
	public void setabstract(BigDecimal abstract_) {
		this.abstract_ = abstract_;
	}

	@Column(name = "case")
	@Override
	public BigDecimal getcase() {
		return this.case_;
	}

	@Override
	public void setcase(BigDecimal case_) {
		this.case_ = case_;
	}

	@Column(name = "catch")
	@Override
	public BigDecimal getcatch() {
		return this.catch_;
	}

	@Override
	public void setcatch(BigDecimal catch_) {
		this.catch_ = catch_;
	}

	@Column(name = "class")
	@Override
	public BigDecimal getclass() {
		return this.class_;
	}

	@Override
	public void setclass(BigDecimal class_) {
		this.class_ = class_;
	}

	@Column(name = "def")
	@Override
	public BigDecimal getdef() {
		return this.def;
	}

	@Override
	public void setdef(BigDecimal def) {
		this.def = def;
	}

	@Column(name = "do")
	@Override
	public BigDecimal getdo() {
		return this.do_;
	}

	@Override
	public void setdo(BigDecimal do_) {
		this.do_ = do_;
	}

	@Column(name = "else")
	@Override
	public BigDecimal getelse() {
		return this.else_;
	}

	@Override
	public void setelse(BigDecimal else_) {
		this.else_ = else_;
	}

	@Column(name = "extends")
	@Override
	public BigDecimal getextends() {
		return this.extends_;
	}

	@Override
	public void setextends(BigDecimal extends_) {
		this.extends_ = extends_;
	}

	@Column(name = "false")
	@Override
	public BigDecimal getfalse() {
		return this.false_;
	}

	@Override
	public void setfalse(BigDecimal false_) {
		this.false_ = false_;
	}

	@Column(name = "final")
	@Override
	public BigDecimal getfinal() {
		return this.final_;
	}

	@Override
	public void setfinal(BigDecimal final_) {
		this.final_ = final_;
	}

	@Column(name = "finally")
	@Override
	public BigDecimal getfinally() {
		return this.finally_;
	}

	@Override
	public void setfinally(BigDecimal finally_) {
		this.finally_ = finally_;
	}

	@Column(name = "for")
	@Override
	public BigDecimal getfor() {
		return this.for_;
	}

	@Override
	public void setfor(BigDecimal for_) {
		this.for_ = for_;
	}

	@Column(name = "forSome")
	@Override
	public BigDecimal getforSome() {
		return this.forSome;
	}

	@Override
	public void setforSome(BigDecimal forSome) {
		this.forSome = forSome;
	}

	@Column(name = "if")
	@Override
	public BigDecimal getif() {
		return this.if_;
	}

	@Override
	public void setif(BigDecimal if_) {
		this.if_ = if_;
	}

	@Column(name = "implicit")
	@Override
	public BigDecimal getimplicit() {
		return this.implicit;
	}

	@Override
	public void setimplicit(BigDecimal implicit) {
		this.implicit = implicit;
	}

	@Column(name = "import")
	@Override
	public BigDecimal getimport() {
		return this.import_;
	}

	@Override
	public void setimport(BigDecimal import_) {
		this.import_ = import_;
	}

	@Column(name = "lazy")
	@Override
	public BigDecimal getlazy() {
		return this.lazy;
	}

	@Override
	public void setlazy(BigDecimal lazy) {
		this.lazy = lazy;
	}

	@Column(name = "match")
	@Override
	public BigDecimal getmatch() {
		return this.match;
	}

	@Override
	public void setmatch(BigDecimal match) {
		this.match = match;
	}

	@Column(name = "new")
	@Override
	public BigDecimal getnew() {
		return this.new_;
	}

	@Override
	public void setnew(BigDecimal new_) {
		this.new_ = new_;
	}

	@Column(name = "null")
	@Override
	public BigDecimal getnull() {
		return this.null_;
	}

	@Override
	public void setnull(BigDecimal null_) {
		this.null_ = null_;
	}

	@Column(name = "object")
	@Override
	public BigDecimal getobject() {
		return this.object;
	}

	@Override
	public void setobject(BigDecimal object) {
		this.object = object;
	}

	@Column(name = "override")
	@Override
	public BigDecimal getoverride() {
		return this.override;
	}

	@Override
	public void setoverride(BigDecimal override) {
		this.override = override;
	}

	@Column(name = "package")
	@Override
	public BigDecimal getpackage() {
		return this.package_;
	}

	@Override
	public void setpackage(BigDecimal package_) {
		this.package_ = package_;
	}

	@Column(name = "private")
	@Override
	public BigDecimal getprivate() {
		return this.private_;
	}

	@Override
	public void setprivate(BigDecimal private_) {
		this.private_ = private_;
	}

	@Column(name = "protected")
	@Override
	public BigDecimal getprotected() {
		return this.protected_;
	}

	@Override
	public void setprotected(BigDecimal protected_) {
		this.protected_ = protected_;
	}

	@Column(name = "return")
	@Override
	public BigDecimal getreturn() {
		return this.return_;
	}

	@Override
	public void setreturn(BigDecimal return_) {
		this.return_ = return_;
	}

	@Column(name = "sealed")
	@Override
	public BigDecimal getsealed() {
		return this.sealed;
	}

	@Override
	public void setsealed(BigDecimal sealed) {
		this.sealed = sealed;
	}

	@Column(name = "super")
	@Override
	public BigDecimal getsuper() {
		return this.super_;
	}

	@Override
	public void setsuper(BigDecimal super_) {
		this.super_ = super_;
	}

	@Column(name = "this")
	@Override
	public BigDecimal getthis() {
		return this.this_;
	}

	@Override
	public void setthis(BigDecimal this_) {
		this.this_ = this_;
	}

	@Column(name = "throw")
	@Override
	public BigDecimal getthrow() {
		return this.throw_;
	}

	@Override
	public void setthrow(BigDecimal throw_) {
		this.throw_ = throw_;
	}

	@Column(name = "trait")
	@Override
	public BigDecimal gettrait() {
		return this.trait;
	}

	@Override
	public void settrait(BigDecimal trait) {
		this.trait = trait;
	}

	@Column(name = "try")
	@Override
	public BigDecimal gettry() {
		return this.try_;
	}

	@Override
	public void settry(BigDecimal try_) {
		this.try_ = try_;
	}

	@Column(name = "true")
	@Override
	public BigDecimal gettrue() {
		return this.true_;
	}

	@Override
	public void settrue(BigDecimal true_) {
		this.true_ = true_;
	}

	@Column(name = "type")
	@Override
	public BigDecimal gettype() {
		return this.type;
	}

	@Override
	public void settype(BigDecimal type) {
		this.type = type;
	}

	@Column(name = "val")
	@Override
	public BigDecimal getval() {
		return this.val;
	}

	@Override
	public void setval(BigDecimal val) {
		this.val = val;
	}

	@Column(name = "var")
	@Override
	public BigDecimal getvar() {
		return this.var;
	}

	@Override
	public void setvar(BigDecimal var) {
		this.var = var;
	}

	@Column(name = "while")
	@Override
	public BigDecimal getwhile() {
		return this.while_;
	}

	@Override
	public void setwhile(BigDecimal while_) {
		this.while_ = while_;
	}

	@Column(name = "with")
	@Override
	public BigDecimal getwith() {
		return this.with;
	}

	@Override
	public void setwith(BigDecimal with) {
		this.with = with;
	}

	@Column(name = "yield")
	@Override
	public BigDecimal getyield() {
		return this.yield;
	}

	@Override
	public void setyield(BigDecimal yield) {
		this.yield = yield;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("T_RESERVED_POJO (");

		sb.append(abstract_);
		sb.append(", ").append(case_);
		sb.append(", ").append(catch_);
		sb.append(", ").append(class_);
		sb.append(", ").append(def);
		sb.append(", ").append(do_);
		sb.append(", ").append(else_);
		sb.append(", ").append(extends_);
		sb.append(", ").append(false_);
		sb.append(", ").append(final_);
		sb.append(", ").append(finally_);
		sb.append(", ").append(for_);
		sb.append(", ").append(forSome);
		sb.append(", ").append(if_);
		sb.append(", ").append(implicit);
		sb.append(", ").append(import_);
		sb.append(", ").append(lazy);
		sb.append(", ").append(match);
		sb.append(", ").append(new_);
		sb.append(", ").append(null_);
		sb.append(", ").append(object);
		sb.append(", ").append(override);
		sb.append(", ").append(package_);
		sb.append(", ").append(private_);
		sb.append(", ").append(protected_);
		sb.append(", ").append(return_);
		sb.append(", ").append(sealed);
		sb.append(", ").append(super_);
		sb.append(", ").append(this_);
		sb.append(", ").append(throw_);
		sb.append(", ").append(trait);
		sb.append(", ").append(try_);
		sb.append(", ").append(true_);
		sb.append(", ").append(type);
		sb.append(", ").append(val);
		sb.append(", ").append(var);
		sb.append(", ").append(while_);
		sb.append(", ").append(with);
		sb.append(", ").append(yield);

		sb.append(")");
		return sb.toString();
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(T_RESERVED_INTERFACE from) {
		setabstract(from.getabstract());
		setcase(from.getcase());
		setcatch(from.getcatch());
		setclass(from.getclass());
		setdef(from.getdef());
		setdo(from.getdo());
		setelse(from.getelse());
		setextends(from.getextends());
		setfalse(from.getfalse());
		setfinal(from.getfinal());
		setfinally(from.getfinally());
		setfor(from.getfor());
		setforSome(from.getforSome());
		setif(from.getif());
		setimplicit(from.getimplicit());
		setimport(from.getimport());
		setlazy(from.getlazy());
		setmatch(from.getmatch());
		setnew(from.getnew());
		setnull(from.getnull());
		setobject(from.getobject());
		setoverride(from.getoverride());
		setpackage(from.getpackage());
		setprivate(from.getprivate());
		setprotected(from.getprotected());
		setreturn(from.getreturn());
		setsealed(from.getsealed());
		setsuper(from.getsuper());
		setthis(from.getthis());
		setthrow(from.getthrow());
		settrait(from.gettrait());
		settry(from.gettry());
		settrue(from.gettrue());
		settype(from.gettype());
		setval(from.getval());
		setvar(from.getvar());
		setwhile(from.getwhile());
		setwith(from.getwith());
		setyield(from.getyield());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends T_RESERVED_INTERFACE> E into(E into) {
		into.from(this);
		return into;
	}
}
