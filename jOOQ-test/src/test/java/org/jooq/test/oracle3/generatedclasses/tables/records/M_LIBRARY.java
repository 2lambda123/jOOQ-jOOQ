/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oracle3.generatedclasses.tables.records;


import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;
import org.jooq.test.oracle3.generatedclasses.tables.interfaces.M_LIBRARY_INTERFACE;


/**
 * snapshot table for snapshot TEST.M_LIBRARY
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "M_LIBRARY")
public class M_LIBRARY extends TableRecordImpl<M_LIBRARY> implements Serializable, Cloneable, Record2<String, String>, M_LIBRARY_INTERFACE {

	private static final long serialVersionUID = 1632487359;

	/**
	 * Setter for <code>M_LIBRARY.AUTHOR</code>.
	 */
	@Override
	public void setAUTHOR(String value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>M_LIBRARY.AUTHOR</code>.
	 */
	@Column(name = "AUTHOR", length = 101)
	@Override
	public String getAUTHOR() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>M_LIBRARY.TITLE</code>.
	 */
	@Override
	public void setTITLE(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>M_LIBRARY.TITLE</code>.
	 */
	@Column(name = "TITLE", nullable = false, length = 400)
	@Override
	public String getTITLE() {
		return (String) getValue(1);
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<String, String> fieldsRow() {
		return (Row2) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<String, String> valuesRow() {
		return (Row2) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field1() {
		return org.jooq.test.oracle3.generatedclasses.tables.M_LIBRARY.M_LIBRARY.AUTHOR;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return org.jooq.test.oracle3.generatedclasses.tables.M_LIBRARY.M_LIBRARY.TITLE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value1() {
		return getAUTHOR();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getTITLE();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public M_LIBRARY value1(String value) {
		setAUTHOR(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public M_LIBRARY value2(String value) {
		setTITLE(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public M_LIBRARY values(String value1, String value2) {
		value1(value1);
		value2(value2);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(M_LIBRARY_INTERFACE from) {
		setAUTHOR(from.getAUTHOR());
		setTITLE(from.getTITLE());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends M_LIBRARY_INTERFACE> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached M_LIBRARY
	 */
	public M_LIBRARY() {
		super(org.jooq.test.oracle3.generatedclasses.tables.M_LIBRARY.M_LIBRARY);
	}

	/**
	 * Create a detached, initialised M_LIBRARY
	 */
	public M_LIBRARY(String AUTHOR, String TITLE) {
		super(org.jooq.test.oracle3.generatedclasses.tables.M_LIBRARY.M_LIBRARY);

		setValue(0, AUTHOR);
		setValue(1, TITLE);
	}
}
