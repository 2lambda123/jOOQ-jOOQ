/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oracle3.generatedclasses.packages.library;


import java.math.BigDecimal;

import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;
import org.jooq.test.oracle3.generatedclasses.DefaultSchema;
import org.jooq.test.oracle3.generatedclasses.packages.LIBRARY;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PKG_P_AUTHOR_EXISTS______ABC_2 extends AbstractRoutine<java.lang.Void> implements Cloneable {

	private static final long serialVersionUID = 307180232;

	/**
	 * The parameter <code>LIBRARY.PKG_P_AUTHOR_EXISTS.AUTHOR_NAME</code>.
	 */
	public static final Parameter<String> AUTHOR_NAME = createParameter("AUTHOR_NAME", org.jooq.impl.SQLDataType.VARCHAR, false);

	/**
	 * The parameter <code>LIBRARY.PKG_P_AUTHOR_EXISTS.RESULT</code>.
	 */
	public static final Parameter<BigDecimal> RESULT = createParameter("RESULT", org.jooq.impl.SQLDataType.NUMERIC, false);

	/**
	 * The parameter <code>LIBRARY.PKG_P_AUTHOR_EXISTS.UNUSED</code>.
	 */
	public static final Parameter<BigDecimal> UNUSED = createParameter("UNUSED", org.jooq.impl.SQLDataType.NUMERIC, false);

	/**
	 * Create a new routine call instance
	 */
	public PKG_P_AUTHOR_EXISTS______ABC_2() {
		super("PKG_P_AUTHOR_EXISTS", DefaultSchema.DEFAULT_SCHEMA, LIBRARY.LIBRARY);

		addInParameter(AUTHOR_NAME);
		addOutParameter(RESULT);
		addInOutParameter(UNUSED);
		setOverloaded(true);
	}

	/**
	 * Set the <code>AUTHOR_NAME</code> parameter IN value to the routine
	 */
	public void setAUTHOR_NAME(String value) {
		setValue(AUTHOR_NAME, value);
	}

	/**
	 * Set the <code>UNUSED</code> parameter IN value to the routine
	 */
	public void setUNUSED(Number value) {
		setNumber(UNUSED, value);
	}

	/**
	 * Get the <code>RESULT</code> parameter OUT value from the routine
	 */
	public BigDecimal getRESULT() {
		return getValue(RESULT);
	}

	/**
	 * Get the <code>UNUSED</code> parameter OUT value from the routine
	 */
	public BigDecimal getUNUSED() {
		return getValue(UNUSED);
	}
}
