/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oracle3.generatedclasses.tables.pojos;


import java.math.BigDecimal;
import java.math.BigInteger;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import org.jooq.test.oracle3.generatedclasses.tables.interfaces.T_639_NUMBERS_TABLE_INTERFACE;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "T_639_NUMBERS_TABLE")
public class T_639_NUMBERS_TABLE_POJO extends ThreadDeath implements Cloneable, T_639_NUMBERS_TABLE_INTERFACE {

	private static final long serialVersionUID = -30928115;

	private Integer    ID;
	private Byte       BYTE;
	private Short      SHORT;
	private Integer    INTEGER;
	private Long       LONG;
	private Byte       BYTE_DECIMAL;
	private Short      SHORT_DECIMAL;
	private Integer    INTEGER_DECIMAL;
	private Long       LONG_DECIMAL;
	private BigInteger BIG_INTEGER;
	private BigDecimal BIG_DECIMAL;
	private Double     FLOAT;
	private Double     REAL;

	public T_639_NUMBERS_TABLE_POJO() {}

	public T_639_NUMBERS_TABLE_POJO(
		Integer    ID,
		Byte       BYTE,
		Short      SHORT,
		Integer    INTEGER,
		Long       LONG,
		Byte       BYTE_DECIMAL,
		Short      SHORT_DECIMAL,
		Integer    INTEGER_DECIMAL,
		Long       LONG_DECIMAL,
		BigInteger BIG_INTEGER,
		BigDecimal BIG_DECIMAL,
		Double     FLOAT,
		Double     REAL
	) {
		this.ID = ID;
		this.BYTE = BYTE;
		this.SHORT = SHORT;
		this.INTEGER = INTEGER;
		this.LONG = LONG;
		this.BYTE_DECIMAL = BYTE_DECIMAL;
		this.SHORT_DECIMAL = SHORT_DECIMAL;
		this.INTEGER_DECIMAL = INTEGER_DECIMAL;
		this.LONG_DECIMAL = LONG_DECIMAL;
		this.BIG_INTEGER = BIG_INTEGER;
		this.BIG_DECIMAL = BIG_DECIMAL;
		this.FLOAT = FLOAT;
		this.REAL = REAL;
	}

	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 7)
	@Override
	public Integer getID() {
		return this.ID;
	}

	@Override
	public void setID(Integer ID) {
		this.ID = ID;
	}

	@Column(name = "BYTE", precision = 2)
	@Override
	public Byte getBYTE() {
		return this.BYTE;
	}

	@Override
	public void setBYTE(Byte BYTE) {
		this.BYTE = BYTE;
	}

	@Column(name = "SHORT", precision = 4)
	@Override
	public Short getSHORT() {
		return this.SHORT;
	}

	@Override
	public void setSHORT(Short SHORT) {
		this.SHORT = SHORT;
	}

	@Column(name = "INTEGER", precision = 7)
	@Override
	public Integer getINTEGER() {
		return this.INTEGER;
	}

	@Override
	public void setINTEGER(Integer INTEGER) {
		this.INTEGER = INTEGER;
	}

	@Column(name = "LONG", precision = 18)
	@Override
	public Long getLONG() {
		return this.LONG;
	}

	@Override
	public void setLONG(Long LONG) {
		this.LONG = LONG;
	}

	@Column(name = "BYTE_DECIMAL", precision = 2)
	@Override
	public Byte getBYTE_DECIMAL() {
		return this.BYTE_DECIMAL;
	}

	@Override
	public void setBYTE_DECIMAL(Byte BYTE_DECIMAL) {
		this.BYTE_DECIMAL = BYTE_DECIMAL;
	}

	@Column(name = "SHORT_DECIMAL", precision = 4)
	@Override
	public Short getSHORT_DECIMAL() {
		return this.SHORT_DECIMAL;
	}

	@Override
	public void setSHORT_DECIMAL(Short SHORT_DECIMAL) {
		this.SHORT_DECIMAL = SHORT_DECIMAL;
	}

	@Column(name = "INTEGER_DECIMAL", precision = 9)
	@Override
	public Integer getINTEGER_DECIMAL() {
		return this.INTEGER_DECIMAL;
	}

	@Override
	public void setINTEGER_DECIMAL(Integer INTEGER_DECIMAL) {
		this.INTEGER_DECIMAL = INTEGER_DECIMAL;
	}

	@Column(name = "LONG_DECIMAL", precision = 18)
	@Override
	public Long getLONG_DECIMAL() {
		return this.LONG_DECIMAL;
	}

	@Override
	public void setLONG_DECIMAL(Long LONG_DECIMAL) {
		this.LONG_DECIMAL = LONG_DECIMAL;
	}

	@Column(name = "BIG_INTEGER", precision = 22)
	@Override
	public BigInteger getBIG_INTEGER() {
		return this.BIG_INTEGER;
	}

	@Override
	public void setBIG_INTEGER(BigInteger BIG_INTEGER) {
		this.BIG_INTEGER = BIG_INTEGER;
	}

	@Column(name = "BIG_DECIMAL", precision = 22, scale = 5)
	@Override
	public BigDecimal getBIG_DECIMAL() {
		return this.BIG_DECIMAL;
	}

	@Override
	public void setBIG_DECIMAL(BigDecimal BIG_DECIMAL) {
		this.BIG_DECIMAL = BIG_DECIMAL;
	}

	@Column(name = "FLOAT", precision = 126)
	@Override
	public Double getFLOAT() {
		return this.FLOAT;
	}

	@Override
	public void setFLOAT(Double FLOAT) {
		this.FLOAT = FLOAT;
	}

	@Column(name = "REAL", precision = 63)
	@Override
	public Double getREAL() {
		return this.REAL;
	}

	@Override
	public void setREAL(Double REAL) {
		this.REAL = REAL;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(T_639_NUMBERS_TABLE_INTERFACE from) {
		setID(from.getID());
		setBYTE(from.getBYTE());
		setSHORT(from.getSHORT());
		setINTEGER(from.getINTEGER());
		setLONG(from.getLONG());
		setBYTE_DECIMAL(from.getBYTE_DECIMAL());
		setSHORT_DECIMAL(from.getSHORT_DECIMAL());
		setINTEGER_DECIMAL(from.getINTEGER_DECIMAL());
		setLONG_DECIMAL(from.getLONG_DECIMAL());
		setBIG_INTEGER(from.getBIG_INTEGER());
		setBIG_DECIMAL(from.getBIG_DECIMAL());
		setFLOAT(from.getFLOAT());
		setREAL(from.getREAL());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends T_639_NUMBERS_TABLE_INTERFACE> E into(E into) {
		into.from(this);
		return into;
	}
}
