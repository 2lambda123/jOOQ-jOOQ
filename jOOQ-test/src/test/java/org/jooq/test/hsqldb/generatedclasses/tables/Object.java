/**
 * This class is generated by jOOQ
 */
package org.jooq.test.hsqldb.generatedclasses.tables;


import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;
import org.jooq.test.hsqldb.generatedclasses.Public;
import org.jooq.test.hsqldb.generatedclasses.tables.records.ObjectRecord;


/**
 * This class is generated by jOOQ.
 */
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Object extends TableImpl<ObjectRecord> {

	private static final long serialVersionUID = -1350548612;

	/**
	 * The reference instance of <code>PUBLIC.OBJECT</code>
	 */
	public static final Object OBJECT = new Object();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<ObjectRecord> getRecordType() {
		return ObjectRecord.class;
	}

	/**
	 * The column <code>PUBLIC.OBJECT.ID</code>.
	 */
	public final TableField<ObjectRecord, java.lang.Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>PUBLIC.OBJECT.OTHER</code>.
	 */
	public final TableField<ObjectRecord, java.lang.Object> OTHER = createField("OTHER", org.jooq.impl.SQLDataType.OTHER, this, "");

	/**
	 * Create a <code>PUBLIC.OBJECT</code> table reference
	 */
	public Object() {
		this("OBJECT", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.OBJECT</code> table reference
	 */
	public Object(java.lang.String alias) {
		this(alias, OBJECT);
	}

	private Object(java.lang.String alias, Table<ObjectRecord> aliased) {
		this(alias, aliased, null);
	}

	private Object(java.lang.String alias, Table<ObjectRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Object as(java.lang.String alias) {
		return new Object(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Object rename(java.lang.String name) {
		return new Object(name, null);
	}
}
