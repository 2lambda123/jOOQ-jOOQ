/**
 * This class is generated by jOOQ
 */
package org.jooq.test.hsqldb.generatedclasses.tables.records;


import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;
import org.jooq.test.hsqldb.generatedclasses.tables.Object;
import org.jooq.test.hsqldb.generatedclasses.tables.interfaces.IObject;


/**
 * This class is generated by jOOQ.
 */
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ObjectRecord extends TableRecordImpl<ObjectRecord> implements Record2<java.lang.Integer, java.lang.Object>, IObject {

	private static final long serialVersionUID = 1258192815;

	/**
	 * Setter for <code>PUBLIC.OBJECT.ID</code>.
	 */
	@Override
	public void setId(java.lang.Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>PUBLIC.OBJECT.ID</code>.
	 */
	@Override
	public java.lang.Integer getId() {
		return (java.lang.Integer) getValue(0);
	}

	/**
	 * Setter for <code>PUBLIC.OBJECT.OTHER</code>.
	 */
	@Override
	public void setOther(java.lang.Object value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>PUBLIC.OBJECT.OTHER</code>.
	 */
	@Override
	public java.lang.Object getOther() {
		return (java.lang.Object) getValue(1);
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<java.lang.Integer, java.lang.Object> fieldsRow() {
		return (Row2) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<java.lang.Integer, java.lang.Object> valuesRow() {
		return (Row2) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<java.lang.Integer> field1() {
		return Object.OBJECT.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<java.lang.Object> field2() {
		return Object.OBJECT.OTHER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Integer value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Object value2() {
		return getOther();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ObjectRecord value1(java.lang.Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ObjectRecord value2(java.lang.Object value) {
		setOther(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ObjectRecord values(java.lang.Integer value1, java.lang.Object value2) {
		value1(value1);
		value2(value2);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IObject from) {
		setId(from.getId());
		setOther(from.getOther());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IObject> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached ObjectRecord
	 */
	public ObjectRecord() {
		super(Object.OBJECT);
	}

	/**
	 * Create a detached, initialised ObjectRecord
	 */
	public ObjectRecord(java.lang.Integer id, java.lang.Object other) {
		super(Object.OBJECT);

		setValue(0, id);
		setValue(1, other);
	}
}
