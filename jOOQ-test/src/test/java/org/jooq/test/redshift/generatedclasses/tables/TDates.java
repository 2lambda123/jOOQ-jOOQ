/**
 * This class is generated by jOOQ
 */
package org.jooq.test.redshift.generatedclasses.tables;


import java.sql.Date;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;
import org.jooq.test.redshift.generatedclasses.Public;
import org.jooq.test.redshift.generatedclasses.tables.records.TDatesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TDates extends TableImpl<TDatesRecord> {

	private static final long serialVersionUID = -593959982;

	/**
	 * The reference instance of <code>public.t_dates</code>
	 */
	public static final TDates T_DATES = new TDates();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TDatesRecord> getRecordType() {
		return TDatesRecord.class;
	}

	/**
	 * The column <code>public.t_dates.id</code>.
	 */
	public final TableField<TDatesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>public.t_dates.d</code>.
	 */
	public final TableField<TDatesRecord, Date> D = createField("d", org.jooq.impl.SQLDataType.DATE, this, "");

	/**
	 * The column <code>public.t_dates.t</code>.
	 */
	public final TableField<TDatesRecord, Object> T = createField("t", org.jooq.impl.DefaultDataType.getDefaultDataType("timestamp without time zone"), this, "");

	/**
	 * The column <code>public.t_dates.ts</code>.
	 */
	public final TableField<TDatesRecord, Object> TS = createField("ts", org.jooq.impl.DefaultDataType.getDefaultDataType("timestamp without time zone"), this, "");

	/**
	 * The column <code>public.t_dates.d_int</code>.
	 */
	public final TableField<TDatesRecord, Integer> D_INT = createField("d_int", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.t_dates.ts_bigint</code>.
	 */
	public final TableField<TDatesRecord, Long> TS_BIGINT = createField("ts_bigint", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * Create a <code>public.t_dates</code> table reference
	 */
	public TDates() {
		this("t_dates", null);
	}

	/**
	 * Create an aliased <code>public.t_dates</code> table reference
	 */
	public TDates(String alias) {
		this(alias, T_DATES);
	}

	private TDates(String alias, Table<TDatesRecord> aliased) {
		this(alias, aliased, null);
	}

	private TDates(String alias, Table<TDatesRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TDates as(String alias) {
		return new TDates(alias, this);
	}

	/**
	 * Rename this table
	 */
	public TDates rename(String name) {
		return new TDates(name, null);
	}
}
