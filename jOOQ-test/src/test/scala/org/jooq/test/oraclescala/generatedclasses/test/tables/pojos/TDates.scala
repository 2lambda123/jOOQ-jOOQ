/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.pojos


import java.io.Serializable
import java.lang.Integer
import java.lang.Long
import java.lang.StringBuilder
import java.sql.Date
import java.sql.Timestamp

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Id
import javax.persistence.Table
import javax.validation.constraints.NotNull

import org.jooq.types.DayToSecond
import org.jooq.types.YearToMonth


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_DATES", schema = "TEST")
class TDates(
	  private var id : Integer    
	, private var d : Date       
	, private var t : Timestamp  
	, private var ts : Timestamp  
	, private var dInt : Integer    
	, private var tsBigint : Long       
	, private var iY : YearToMonth
	, private var iD : DayToSecond
) extends Serializable {

	def this() = {
		this(null, null, null, null, null, null, null, null)
	}

	def this (value : TDates) = {
		this(
			  value.id
			, value.d
			, value.t
			, value.ts
			, value.dInt
			, value.tsBigint
			, value.iY
			, value.iD
		)
	}

	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 7)
	@NotNull
	def getId : Integer = {
		this.id
	}

	def setId(id : Integer) : Unit = {
		this.id = id
	}

	@Column(name = "D")
	def getD : Date = {
		this.d
	}

	def setD(d : Date) : Unit = {
		this.d = d
	}

	@Column(name = "T")
	def getT : Timestamp = {
		this.t
	}

	def setT(t : Timestamp) : Unit = {
		this.t = t
	}

	@Column(name = "TS")
	def getTs : Timestamp = {
		this.ts
	}

	def setTs(ts : Timestamp) : Unit = {
		this.ts = ts
	}

	@Column(name = "D_INT", precision = 7)
	def getDInt : Integer = {
		this.dInt
	}

	def setDInt(dInt : Integer) : Unit = {
		this.dInt = dInt
	}

	@Column(name = "TS_BIGINT", precision = 18)
	def getTsBigint : Long = {
		this.tsBigint
	}

	def setTsBigint(tsBigint : Long) : Unit = {
		this.tsBigint = tsBigint
	}

	@Column(name = "I_Y", precision = 2)
	def getIY : YearToMonth = {
		this.iY
	}

	def setIY(iY : YearToMonth) : Unit = {
		this.iY = iY
	}

	@Column(name = "I_D", precision = 2, scale = 6)
	def getID : DayToSecond = {
		this.iD
	}

	def setID(iD : DayToSecond) : Unit = {
		this.iD = iD
	}

	override def equals(obj : Any) : scala.Boolean = {
		if (this == obj)
			return true
		if (obj == null)
			return false
		if (getClass() != obj.getClass())
			return false
		val other = obj.asInstanceOf[TDates]
		if (id == null) {
			if (other.id != null)
				return false
		}
		else if (!id.equals(other.id))
			return false
		if (d == null) {
			if (other.d != null)
				return false
		}
		else if (!d.equals(other.d))
			return false
		if (t == null) {
			if (other.t != null)
				return false
		}
		else if (!t.equals(other.t))
			return false
		if (ts == null) {
			if (other.ts != null)
				return false
		}
		else if (!ts.equals(other.ts))
			return false
		if (dInt == null) {
			if (other.dInt != null)
				return false
		}
		else if (!dInt.equals(other.dInt))
			return false
		if (tsBigint == null) {
			if (other.tsBigint != null)
				return false
		}
		else if (!tsBigint.equals(other.tsBigint))
			return false
		if (iY == null) {
			if (other.iY != null)
				return false
		}
		else if (!iY.equals(other.iY))
			return false
		if (iD == null) {
			if (other.iD != null)
				return false
		}
		else if (!iD.equals(other.iD))
			return false
		return true
	}

	override def hashCode : Int = {
		val prime = 31
		var result = 1
		result = prime * result + (if (id == null) 0 else id.hashCode())
		result = prime * result + (if (d == null) 0 else d.hashCode())
		result = prime * result + (if (t == null) 0 else t.hashCode())
		result = prime * result + (if (ts == null) 0 else ts.hashCode())
		result = prime * result + (if (dInt == null) 0 else dInt.hashCode())
		result = prime * result + (if (tsBigint == null) 0 else tsBigint.hashCode())
		result = prime * result + (if (iY == null) 0 else iY.hashCode())
		result = prime * result + (if (iD == null) 0 else iD.hashCode())
		return result
	}

	override def toString : String = {
		val sb = new StringBuilder("TDates (")

		sb.append(id)
		sb.append(", ").append(d)
		sb.append(", ").append(t)
		sb.append(", ").append(ts)
		sb.append(", ").append(dInt)
		sb.append(", ").append(tsBigint)
		sb.append(", ").append(iY)
		sb.append(", ").append(iD)

		sb.append(")");
		return sb.toString
	}
}
