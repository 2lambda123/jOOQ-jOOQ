/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.records


import java.lang.Object

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Table

import org.jooq.Field
import org.jooq.Record11
import org.jooq.Row11
import org.jooq.impl.TableRecordImpl
import org.jooq.test.oraclescala.generatedclasses.test.tables.VIncomplete


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "V_INCOMPLETE", schema = "TEST")
class VIncompleteRecord extends TableRecordImpl[VIncompleteRecord](VIncomplete.V_INCOMPLETE) with Record11[Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object] {

	/**
	 * Setter for <code>TEST.V_INCOMPLETE.ID</code>.
	 */
	def setId(value : Object) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>TEST.V_INCOMPLETE.ID</code>.
	 */
	@Column(name = "ID")
	def getId : Object = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[Object]
	}

	/**
	 * Setter for <code>TEST.V_INCOMPLETE.AUTHOR_ID</code>.
	 */
	def setAuthorId(value : Object) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>TEST.V_INCOMPLETE.AUTHOR_ID</code>.
	 */
	@Column(name = "AUTHOR_ID")
	def getAuthorId : Object = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[Object]
	}

	/**
	 * Setter for <code>TEST.V_INCOMPLETE.CO_AUTHOR_ID</code>.
	 */
	def setCoAuthorId(value : Object) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>TEST.V_INCOMPLETE.CO_AUTHOR_ID</code>.
	 */
	@Column(name = "CO_AUTHOR_ID")
	def getCoAuthorId : Object = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[Object]
	}

	/**
	 * Setter for <code>TEST.V_INCOMPLETE.DETAILS_ID</code>.
	 */
	def setDetailsId(value : Object) : Unit = {
		setValue(3, value)
	}

	/**
	 * Getter for <code>TEST.V_INCOMPLETE.DETAILS_ID</code>.
	 */
	@Column(name = "DETAILS_ID")
	def getDetailsId : Object = {
		val r = getValue(3)
		if (r == null) null else r.asInstanceOf[Object]
	}

	/**
	 * Setter for <code>TEST.V_INCOMPLETE.TITLE</code>.
	 */
	def setTitle(value : Object) : Unit = {
		setValue(4, value)
	}

	/**
	 * Getter for <code>TEST.V_INCOMPLETE.TITLE</code>.
	 */
	@Column(name = "TITLE")
	def getTitle : Object = {
		val r = getValue(4)
		if (r == null) null else r.asInstanceOf[Object]
	}

	/**
	 * Setter for <code>TEST.V_INCOMPLETE.PUBLISHED_IN</code>.
	 */
	def setPublishedIn(value : Object) : Unit = {
		setValue(5, value)
	}

	/**
	 * Getter for <code>TEST.V_INCOMPLETE.PUBLISHED_IN</code>.
	 */
	@Column(name = "PUBLISHED_IN")
	def getPublishedIn : Object = {
		val r = getValue(5)
		if (r == null) null else r.asInstanceOf[Object]
	}

	/**
	 * Setter for <code>TEST.V_INCOMPLETE.LANGUAGE_ID</code>.
	 */
	def setLanguageId(value : Object) : Unit = {
		setValue(6, value)
	}

	/**
	 * Getter for <code>TEST.V_INCOMPLETE.LANGUAGE_ID</code>.
	 */
	@Column(name = "LANGUAGE_ID")
	def getLanguageId : Object = {
		val r = getValue(6)
		if (r == null) null else r.asInstanceOf[Object]
	}

	/**
	 * Setter for <code>TEST.V_INCOMPLETE.CONTENT_TEXT</code>.
	 */
	def setContentText(value : Object) : Unit = {
		setValue(7, value)
	}

	/**
	 * Getter for <code>TEST.V_INCOMPLETE.CONTENT_TEXT</code>.
	 */
	@Column(name = "CONTENT_TEXT")
	def getContentText : Object = {
		val r = getValue(7)
		if (r == null) null else r.asInstanceOf[Object]
	}

	/**
	 * Setter for <code>TEST.V_INCOMPLETE.CONTENT_PDF</code>.
	 */
	def setContentPdf(value : Object) : Unit = {
		setValue(8, value)
	}

	/**
	 * Getter for <code>TEST.V_INCOMPLETE.CONTENT_PDF</code>.
	 */
	@Column(name = "CONTENT_PDF")
	def getContentPdf : Object = {
		val r = getValue(8)
		if (r == null) null else r.asInstanceOf[Object]
	}

	/**
	 * Setter for <code>TEST.V_INCOMPLETE.REC_VERSION</code>.
	 */
	def setRecVersion(value : Object) : Unit = {
		setValue(9, value)
	}

	/**
	 * Getter for <code>TEST.V_INCOMPLETE.REC_VERSION</code>.
	 */
	@Column(name = "REC_VERSION")
	def getRecVersion : Object = {
		val r = getValue(9)
		if (r == null) null else r.asInstanceOf[Object]
	}

	/**
	 * Setter for <code>TEST.V_INCOMPLETE.REC_TIMESTAMP</code>.
	 */
	def setRecTimestamp(value : Object) : Unit = {
		setValue(10, value)
	}

	/**
	 * Getter for <code>TEST.V_INCOMPLETE.REC_TIMESTAMP</code>.
	 */
	@Column(name = "REC_TIMESTAMP")
	def getRecTimestamp : Object = {
		val r = getValue(10)
		if (r == null) null else r.asInstanceOf[Object]
	}

	// -------------------------------------------------------------------------
	// Record11 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row11[Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object] = {
		super.fieldsRow.asInstanceOf[ Row11[Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object] ]
	}

	override def valuesRow : Row11[Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object] = {
		super.valuesRow.asInstanceOf[ Row11[Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object] ]
	}
	override def field1 : Field[Object] = VIncomplete.V_INCOMPLETE.ID
	override def field2 : Field[Object] = VIncomplete.V_INCOMPLETE.AUTHOR_ID
	override def field3 : Field[Object] = VIncomplete.V_INCOMPLETE.CO_AUTHOR_ID
	override def field4 : Field[Object] = VIncomplete.V_INCOMPLETE.DETAILS_ID
	override def field5 : Field[Object] = VIncomplete.V_INCOMPLETE.TITLE
	override def field6 : Field[Object] = VIncomplete.V_INCOMPLETE.PUBLISHED_IN
	override def field7 : Field[Object] = VIncomplete.V_INCOMPLETE.LANGUAGE_ID
	override def field8 : Field[Object] = VIncomplete.V_INCOMPLETE.CONTENT_TEXT
	override def field9 : Field[Object] = VIncomplete.V_INCOMPLETE.CONTENT_PDF
	override def field10 : Field[Object] = VIncomplete.V_INCOMPLETE.REC_VERSION
	override def field11 : Field[Object] = VIncomplete.V_INCOMPLETE.REC_TIMESTAMP
	override def value1 : Object = getId
	override def value2 : Object = getAuthorId
	override def value3 : Object = getCoAuthorId
	override def value4 : Object = getDetailsId
	override def value5 : Object = getTitle
	override def value6 : Object = getPublishedIn
	override def value7 : Object = getLanguageId
	override def value8 : Object = getContentText
	override def value9 : Object = getContentPdf
	override def value10 : Object = getRecVersion
	override def value11 : Object = getRecTimestamp

	override def value1(value : Object) : VIncompleteRecord = {
		setId(value)
		this
	}

	override def value2(value : Object) : VIncompleteRecord = {
		setAuthorId(value)
		this
	}

	override def value3(value : Object) : VIncompleteRecord = {
		setCoAuthorId(value)
		this
	}

	override def value4(value : Object) : VIncompleteRecord = {
		setDetailsId(value)
		this
	}

	override def value5(value : Object) : VIncompleteRecord = {
		setTitle(value)
		this
	}

	override def value6(value : Object) : VIncompleteRecord = {
		setPublishedIn(value)
		this
	}

	override def value7(value : Object) : VIncompleteRecord = {
		setLanguageId(value)
		this
	}

	override def value8(value : Object) : VIncompleteRecord = {
		setContentText(value)
		this
	}

	override def value9(value : Object) : VIncompleteRecord = {
		setContentPdf(value)
		this
	}

	override def value10(value : Object) : VIncompleteRecord = {
		setRecVersion(value)
		this
	}

	override def value11(value : Object) : VIncompleteRecord = {
		setRecTimestamp(value)
		this
	}

	override def values(value1 : Object, value2 : Object, value3 : Object, value4 : Object, value5 : Object, value6 : Object, value7 : Object, value8 : Object, value9 : Object, value10 : Object, value11 : Object) : VIncompleteRecord = {
		this.value1(value1)
		this.value2(value2)
		this.value3(value3)
		this.value4(value4)
		this.value5(value5)
		this.value6(value6)
		this.value7(value7)
		this.value8(value8)
		this.value9(value9)
		this.value10(value10)
		this.value11(value11)
		this
	}

	/**
	 * Create a detached, initialised VIncompleteRecord
	 */
	def this(id : Object, authorId : Object, coAuthorId : Object, detailsId : Object, title : Object, publishedIn : Object, languageId : Object, contentText : Object, contentPdf : Object, recVersion : Object, recTimestamp : Object) = {
		this()

		setValue(0, id)
		setValue(1, authorId)
		setValue(2, coAuthorId)
		setValue(3, detailsId)
		setValue(4, title)
		setValue(5, publishedIn)
		setValue(6, languageId)
		setValue(7, contentText)
		setValue(8, contentPdf)
		setValue(9, recVersion)
		setValue(10, recTimestamp)
	}
}
