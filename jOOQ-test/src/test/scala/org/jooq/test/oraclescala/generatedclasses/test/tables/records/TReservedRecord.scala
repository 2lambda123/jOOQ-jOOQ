/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.records


import java.math.BigDecimal

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Table

import org.jooq.impl.TableRecordImpl
import org.jooq.test.oraclescala.generatedclasses.test.tables.TReserved


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_RESERVED", schema = "TEST")
class TReservedRecord extends TableRecordImpl[TReservedRecord](TReserved.T_RESERVED) {

	/**
	 * Setter for <code>TEST.T_RESERVED.abstract</code>.
	 */
	def setAbstract(value : BigDecimal) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.abstract</code>.
	 */
	@Column(name = "abstract")
	def getAbstract : BigDecimal = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.case</code>.
	 */
	def setCase(value : BigDecimal) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.case</code>.
	 */
	@Column(name = "case")
	def getCase : BigDecimal = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.catch</code>.
	 */
	def setCatch(value : BigDecimal) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.catch</code>.
	 */
	@Column(name = "catch")
	def getCatch : BigDecimal = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.class</code>.
	 */
	def setClass_(value : BigDecimal) : Unit = {
		setValue(3, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.class</code>.
	 */
	@Column(name = "class")
	def getClass_ : BigDecimal = {
		val r = getValue(3)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.def</code>.
	 */
	def setDef(value : BigDecimal) : Unit = {
		setValue(4, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.def</code>.
	 */
	@Column(name = "def")
	def getDef : BigDecimal = {
		val r = getValue(4)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.do</code>.
	 */
	def setDo(value : BigDecimal) : Unit = {
		setValue(5, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.do</code>.
	 */
	@Column(name = "do")
	def getDo : BigDecimal = {
		val r = getValue(5)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.else</code>.
	 */
	def setElse(value : BigDecimal) : Unit = {
		setValue(6, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.else</code>.
	 */
	@Column(name = "else")
	def getElse : BigDecimal = {
		val r = getValue(6)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.extends</code>.
	 */
	def setExtends(value : BigDecimal) : Unit = {
		setValue(7, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.extends</code>.
	 */
	@Column(name = "extends")
	def getExtends : BigDecimal = {
		val r = getValue(7)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.false</code>.
	 */
	def setFalse(value : BigDecimal) : Unit = {
		setValue(8, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.false</code>.
	 */
	@Column(name = "false")
	def getFalse : BigDecimal = {
		val r = getValue(8)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.final</code>.
	 */
	def setFinal(value : BigDecimal) : Unit = {
		setValue(9, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.final</code>.
	 */
	@Column(name = "final")
	def getFinal : BigDecimal = {
		val r = getValue(9)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.finally</code>.
	 */
	def setFinally(value : BigDecimal) : Unit = {
		setValue(10, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.finally</code>.
	 */
	@Column(name = "finally")
	def getFinally : BigDecimal = {
		val r = getValue(10)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.for</code>.
	 */
	def setFor(value : BigDecimal) : Unit = {
		setValue(11, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.for</code>.
	 */
	@Column(name = "for")
	def getFor : BigDecimal = {
		val r = getValue(11)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.forSome</code>.
	 */
	def setForsome(value : BigDecimal) : Unit = {
		setValue(12, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.forSome</code>.
	 */
	@Column(name = "forSome")
	def getForsome : BigDecimal = {
		val r = getValue(12)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.if</code>.
	 */
	def setIf(value : BigDecimal) : Unit = {
		setValue(13, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.if</code>.
	 */
	@Column(name = "if")
	def getIf : BigDecimal = {
		val r = getValue(13)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.implicit</code>.
	 */
	def setImplicit(value : BigDecimal) : Unit = {
		setValue(14, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.implicit</code>.
	 */
	@Column(name = "implicit")
	def getImplicit : BigDecimal = {
		val r = getValue(14)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.import</code>.
	 */
	def setImport(value : BigDecimal) : Unit = {
		setValue(15, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.import</code>.
	 */
	@Column(name = "import")
	def getImport : BigDecimal = {
		val r = getValue(15)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.lazy</code>.
	 */
	def setLazy(value : BigDecimal) : Unit = {
		setValue(16, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.lazy</code>.
	 */
	@Column(name = "lazy")
	def getLazy : BigDecimal = {
		val r = getValue(16)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.match</code>.
	 */
	def setMatch(value : BigDecimal) : Unit = {
		setValue(17, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.match</code>.
	 */
	@Column(name = "match")
	def getMatch : BigDecimal = {
		val r = getValue(17)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.new</code>.
	 */
	def setNew(value : BigDecimal) : Unit = {
		setValue(18, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.new</code>.
	 */
	@Column(name = "new")
	def getNew : BigDecimal = {
		val r = getValue(18)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.null</code>.
	 */
	def setNull(value : BigDecimal) : Unit = {
		setValue(19, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.null</code>.
	 */
	@Column(name = "null")
	def getNull : BigDecimal = {
		val r = getValue(19)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.object</code>.
	 */
	def setObject(value : BigDecimal) : Unit = {
		setValue(20, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.object</code>.
	 */
	@Column(name = "object")
	def getObject : BigDecimal = {
		val r = getValue(20)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.override</code>.
	 */
	def setOverride(value : BigDecimal) : Unit = {
		setValue(21, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.override</code>.
	 */
	@Column(name = "override")
	def getOverride : BigDecimal = {
		val r = getValue(21)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.package</code>.
	 */
	def setPackage(value : BigDecimal) : Unit = {
		setValue(22, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.package</code>.
	 */
	@Column(name = "package")
	def getPackage : BigDecimal = {
		val r = getValue(22)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.private</code>.
	 */
	def setPrivate(value : BigDecimal) : Unit = {
		setValue(23, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.private</code>.
	 */
	@Column(name = "private")
	def getPrivate : BigDecimal = {
		val r = getValue(23)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.protected</code>.
	 */
	def setProtected(value : BigDecimal) : Unit = {
		setValue(24, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.protected</code>.
	 */
	@Column(name = "protected")
	def getProtected : BigDecimal = {
		val r = getValue(24)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.return</code>.
	 */
	def setReturn(value : BigDecimal) : Unit = {
		setValue(25, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.return</code>.
	 */
	@Column(name = "return")
	def getReturn : BigDecimal = {
		val r = getValue(25)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.sealed</code>.
	 */
	def setSealed(value : BigDecimal) : Unit = {
		setValue(26, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.sealed</code>.
	 */
	@Column(name = "sealed")
	def getSealed : BigDecimal = {
		val r = getValue(26)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.super</code>.
	 */
	def setSuper(value : BigDecimal) : Unit = {
		setValue(27, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.super</code>.
	 */
	@Column(name = "super")
	def getSuper : BigDecimal = {
		val r = getValue(27)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.this</code>.
	 */
	def setThis(value : BigDecimal) : Unit = {
		setValue(28, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.this</code>.
	 */
	@Column(name = "this")
	def getThis : BigDecimal = {
		val r = getValue(28)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.throw</code>.
	 */
	def setThrow(value : BigDecimal) : Unit = {
		setValue(29, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.throw</code>.
	 */
	@Column(name = "throw")
	def getThrow : BigDecimal = {
		val r = getValue(29)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.trait</code>.
	 */
	def setTrait(value : BigDecimal) : Unit = {
		setValue(30, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.trait</code>.
	 */
	@Column(name = "trait")
	def getTrait : BigDecimal = {
		val r = getValue(30)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.try</code>.
	 */
	def setTry(value : BigDecimal) : Unit = {
		setValue(31, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.try</code>.
	 */
	@Column(name = "try")
	def getTry : BigDecimal = {
		val r = getValue(31)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.true</code>.
	 */
	def setTrue(value : BigDecimal) : Unit = {
		setValue(32, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.true</code>.
	 */
	@Column(name = "true")
	def getTrue : BigDecimal = {
		val r = getValue(32)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.type</code>.
	 */
	def setType(value : BigDecimal) : Unit = {
		setValue(33, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.type</code>.
	 */
	@Column(name = "type")
	def getType : BigDecimal = {
		val r = getValue(33)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.val</code>.
	 */
	def setVal(value : BigDecimal) : Unit = {
		setValue(34, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.val</code>.
	 */
	@Column(name = "val")
	def getVal : BigDecimal = {
		val r = getValue(34)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.var</code>.
	 */
	def setVar(value : BigDecimal) : Unit = {
		setValue(35, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.var</code>.
	 */
	@Column(name = "var")
	def getVar : BigDecimal = {
		val r = getValue(35)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.while</code>.
	 */
	def setWhile(value : BigDecimal) : Unit = {
		setValue(36, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.while</code>.
	 */
	@Column(name = "while")
	def getWhile : BigDecimal = {
		val r = getValue(36)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.with</code>.
	 */
	def setWith(value : BigDecimal) : Unit = {
		setValue(37, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.with</code>.
	 */
	@Column(name = "with")
	def getWith : BigDecimal = {
		val r = getValue(37)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_RESERVED.yield</code>.
	 */
	def setYield(value : BigDecimal) : Unit = {
		setValue(38, value)
	}

	/**
	 * Getter for <code>TEST.T_RESERVED.yield</code>.
	 */
	@Column(name = "yield")
	def getYield : BigDecimal = {
		val r = getValue(38)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Create a detached, initialised TReservedRecord
	 */
	def this(`abstract` : BigDecimal, `case` : BigDecimal, `catch` : BigDecimal, `class` : BigDecimal, `def` : BigDecimal, `do` : BigDecimal, `else` : BigDecimal, `extends` : BigDecimal, `false` : BigDecimal, `final` : BigDecimal, `finally` : BigDecimal, `for` : BigDecimal, forsome : BigDecimal, `if` : BigDecimal, `implicit` : BigDecimal, `import` : BigDecimal, `lazy` : BigDecimal, `match` : BigDecimal, `new` : BigDecimal, `null` : BigDecimal, `object` : BigDecimal, `override` : BigDecimal, `package` : BigDecimal, `private` : BigDecimal, `protected` : BigDecimal, `return` : BigDecimal, `sealed` : BigDecimal, `super` : BigDecimal, `this` : BigDecimal, `throw` : BigDecimal, `trait` : BigDecimal, `try` : BigDecimal, `true` : BigDecimal, `type` : BigDecimal, `val` : BigDecimal, `var` : BigDecimal, `while` : BigDecimal, `with` : BigDecimal, `yield` : BigDecimal) = {
		this()

		setValue(0, `abstract`)
		setValue(1, `case`)
		setValue(2, `catch`)
		setValue(3, `class`)
		setValue(4, `def`)
		setValue(5, `do`)
		setValue(6, `else`)
		setValue(7, `extends`)
		setValue(8, `false`)
		setValue(9, `final`)
		setValue(10, `finally`)
		setValue(11, `for`)
		setValue(12, forsome)
		setValue(13, `if`)
		setValue(14, `implicit`)
		setValue(15, `import`)
		setValue(16, `lazy`)
		setValue(17, `match`)
		setValue(18, `new`)
		setValue(19, `null`)
		setValue(20, `object`)
		setValue(21, `override`)
		setValue(22, `package`)
		setValue(23, `private`)
		setValue(24, `protected`)
		setValue(25, `return`)
		setValue(26, `sealed`)
		setValue(27, `super`)
		setValue(28, `this`)
		setValue(29, `throw`)
		setValue(30, `trait`)
		setValue(31, `try`)
		setValue(32, `true`)
		setValue(33, `type`)
		setValue(34, `val`)
		setValue(35, `var`)
		setValue(36, `while`)
		setValue(37, `with`)
		setValue(38, `yield`)
	}
}
