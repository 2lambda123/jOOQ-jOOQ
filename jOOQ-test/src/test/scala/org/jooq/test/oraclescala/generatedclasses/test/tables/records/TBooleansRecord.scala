/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.records


import java.lang.Boolean
import java.lang.Integer

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Id
import javax.persistence.Table
import javax.validation.constraints.NotNull

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record11
import org.jooq.Row11
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.test.all.converters.Boolean_10
import org.jooq.test.all.converters.Boolean_TF_LC
import org.jooq.test.all.converters.Boolean_TF_UC
import org.jooq.test.all.converters.Boolean_YES_NO_LC
import org.jooq.test.all.converters.Boolean_YES_NO_UC
import org.jooq.test.all.converters.Boolean_YN_LC
import org.jooq.test.all.converters.Boolean_YN_UC
import org.jooq.test.oraclescala.generatedclasses.test.tables.TBooleans


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_BOOLEANS", schema = "TEST")
class TBooleansRecord extends UpdatableRecordImpl[TBooleansRecord](TBooleans.T_BOOLEANS) with Record11[Integer, Boolean_10, Boolean_TF_LC, Boolean_TF_UC, Boolean_YES_NO_LC, Boolean_YES_NO_UC, Boolean_YN_LC, Boolean_YN_UC, Boolean, Boolean, Boolean] {

	/**
	 * Setter for <code>TEST.T_BOOLEANS.ID</code>.
	 */
	def setId(value : Integer) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>TEST.T_BOOLEANS.ID</code>.
	 */
	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 7)
	@NotNull
	def getId : Integer = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>TEST.T_BOOLEANS.ONE_ZERO</code>.
	 */
	def setOneZero(value : Boolean_10) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>TEST.T_BOOLEANS.ONE_ZERO</code>.
	 */
	@Column(name = "ONE_ZERO", precision = 7)
	def getOneZero : Boolean_10 = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[Boolean_10]
	}

	/**
	 * Setter for <code>TEST.T_BOOLEANS.TRUE_FALSE_LC</code>.
	 */
	def setTrueFalseLc(value : Boolean_TF_LC) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>TEST.T_BOOLEANS.TRUE_FALSE_LC</code>.
	 */
	@Column(name = "TRUE_FALSE_LC", length = 5)
	def getTrueFalseLc : Boolean_TF_LC = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[Boolean_TF_LC]
	}

	/**
	 * Setter for <code>TEST.T_BOOLEANS.TRUE_FALSE_UC</code>.
	 */
	def setTrueFalseUc(value : Boolean_TF_UC) : Unit = {
		setValue(3, value)
	}

	/**
	 * Getter for <code>TEST.T_BOOLEANS.TRUE_FALSE_UC</code>.
	 */
	@Column(name = "TRUE_FALSE_UC", length = 5)
	def getTrueFalseUc : Boolean_TF_UC = {
		val r = getValue(3)
		if (r == null) null else r.asInstanceOf[Boolean_TF_UC]
	}

	/**
	 * Setter for <code>TEST.T_BOOLEANS.YES_NO_LC</code>.
	 */
	def setYesNoLc(value : Boolean_YES_NO_LC) : Unit = {
		setValue(4, value)
	}

	/**
	 * Getter for <code>TEST.T_BOOLEANS.YES_NO_LC</code>.
	 */
	@Column(name = "YES_NO_LC", length = 3)
	def getYesNoLc : Boolean_YES_NO_LC = {
		val r = getValue(4)
		if (r == null) null else r.asInstanceOf[Boolean_YES_NO_LC]
	}

	/**
	 * Setter for <code>TEST.T_BOOLEANS.YES_NO_UC</code>.
	 */
	def setYesNoUc(value : Boolean_YES_NO_UC) : Unit = {
		setValue(5, value)
	}

	/**
	 * Getter for <code>TEST.T_BOOLEANS.YES_NO_UC</code>.
	 */
	@Column(name = "YES_NO_UC", length = 3)
	def getYesNoUc : Boolean_YES_NO_UC = {
		val r = getValue(5)
		if (r == null) null else r.asInstanceOf[Boolean_YES_NO_UC]
	}

	/**
	 * Setter for <code>TEST.T_BOOLEANS.Y_N_LC</code>.
	 */
	def setYNLc(value : Boolean_YN_LC) : Unit = {
		setValue(6, value)
	}

	/**
	 * Getter for <code>TEST.T_BOOLEANS.Y_N_LC</code>.
	 */
	@Column(name = "Y_N_LC", length = 1)
	def getYNLc : Boolean_YN_LC = {
		val r = getValue(6)
		if (r == null) null else r.asInstanceOf[Boolean_YN_LC]
	}

	/**
	 * Setter for <code>TEST.T_BOOLEANS.Y_N_UC</code>.
	 */
	def setYNUc(value : Boolean_YN_UC) : Unit = {
		setValue(7, value)
	}

	/**
	 * Getter for <code>TEST.T_BOOLEANS.Y_N_UC</code>.
	 */
	@Column(name = "Y_N_UC", length = 1)
	def getYNUc : Boolean_YN_UC = {
		val r = getValue(7)
		if (r == null) null else r.asInstanceOf[Boolean_YN_UC]
	}

	/**
	 * Setter for <code>TEST.T_BOOLEANS.VC_BOOLEAN</code>.
	 */
	def setVcBoolean(value : Boolean) : Unit = {
		setValue(8, value)
	}

	/**
	 * Getter for <code>TEST.T_BOOLEANS.VC_BOOLEAN</code>.
	 */
	@Column(name = "VC_BOOLEAN")
	def getVcBoolean : Boolean = {
		val r = getValue(8)
		if (r == null) null else r.asInstanceOf[Boolean]
	}

	/**
	 * Setter for <code>TEST.T_BOOLEANS.C_BOOLEAN</code>.
	 */
	def setCBoolean(value : Boolean) : Unit = {
		setValue(9, value)
	}

	/**
	 * Getter for <code>TEST.T_BOOLEANS.C_BOOLEAN</code>.
	 */
	@Column(name = "C_BOOLEAN")
	def getCBoolean : Boolean = {
		val r = getValue(9)
		if (r == null) null else r.asInstanceOf[Boolean]
	}

	/**
	 * Setter for <code>TEST.T_BOOLEANS.N_BOOLEAN</code>.
	 */
	def setNBoolean(value : Boolean) : Unit = {
		setValue(10, value)
	}

	/**
	 * Getter for <code>TEST.T_BOOLEANS.N_BOOLEAN</code>.
	 */
	@Column(name = "N_BOOLEAN")
	def getNBoolean : Boolean = {
		val r = getValue(10)
		if (r == null) null else r.asInstanceOf[Boolean]
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------
	override def key() : Record1[Integer] = {
		return super.key.asInstanceOf[ Record1[Integer] ]
	}

	// -------------------------------------------------------------------------
	// Record11 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row11[Integer, Boolean_10, Boolean_TF_LC, Boolean_TF_UC, Boolean_YES_NO_LC, Boolean_YES_NO_UC, Boolean_YN_LC, Boolean_YN_UC, Boolean, Boolean, Boolean] = {
		super.fieldsRow.asInstanceOf[ Row11[Integer, Boolean_10, Boolean_TF_LC, Boolean_TF_UC, Boolean_YES_NO_LC, Boolean_YES_NO_UC, Boolean_YN_LC, Boolean_YN_UC, Boolean, Boolean, Boolean] ]
	}

	override def valuesRow : Row11[Integer, Boolean_10, Boolean_TF_LC, Boolean_TF_UC, Boolean_YES_NO_LC, Boolean_YES_NO_UC, Boolean_YN_LC, Boolean_YN_UC, Boolean, Boolean, Boolean] = {
		super.valuesRow.asInstanceOf[ Row11[Integer, Boolean_10, Boolean_TF_LC, Boolean_TF_UC, Boolean_YES_NO_LC, Boolean_YES_NO_UC, Boolean_YN_LC, Boolean_YN_UC, Boolean, Boolean, Boolean] ]
	}
	override def field1 : Field[Integer] = TBooleans.T_BOOLEANS.ID
	override def field2 : Field[Boolean_10] = TBooleans.T_BOOLEANS.ONE_ZERO
	override def field3 : Field[Boolean_TF_LC] = TBooleans.T_BOOLEANS.TRUE_FALSE_LC
	override def field4 : Field[Boolean_TF_UC] = TBooleans.T_BOOLEANS.TRUE_FALSE_UC
	override def field5 : Field[Boolean_YES_NO_LC] = TBooleans.T_BOOLEANS.YES_NO_LC
	override def field6 : Field[Boolean_YES_NO_UC] = TBooleans.T_BOOLEANS.YES_NO_UC
	override def field7 : Field[Boolean_YN_LC] = TBooleans.T_BOOLEANS.Y_N_LC
	override def field8 : Field[Boolean_YN_UC] = TBooleans.T_BOOLEANS.Y_N_UC
	override def field9 : Field[Boolean] = TBooleans.T_BOOLEANS.VC_BOOLEAN
	override def field10 : Field[Boolean] = TBooleans.T_BOOLEANS.C_BOOLEAN
	override def field11 : Field[Boolean] = TBooleans.T_BOOLEANS.N_BOOLEAN
	override def value1 : Integer = getId
	override def value2 : Boolean_10 = getOneZero
	override def value3 : Boolean_TF_LC = getTrueFalseLc
	override def value4 : Boolean_TF_UC = getTrueFalseUc
	override def value5 : Boolean_YES_NO_LC = getYesNoLc
	override def value6 : Boolean_YES_NO_UC = getYesNoUc
	override def value7 : Boolean_YN_LC = getYNLc
	override def value8 : Boolean_YN_UC = getYNUc
	override def value9 : Boolean = getVcBoolean
	override def value10 : Boolean = getCBoolean
	override def value11 : Boolean = getNBoolean

	override def value1(value : Integer) : TBooleansRecord = {
		setId(value)
		this
	}

	override def value2(value : Boolean_10) : TBooleansRecord = {
		setOneZero(value)
		this
	}

	override def value3(value : Boolean_TF_LC) : TBooleansRecord = {
		setTrueFalseLc(value)
		this
	}

	override def value4(value : Boolean_TF_UC) : TBooleansRecord = {
		setTrueFalseUc(value)
		this
	}

	override def value5(value : Boolean_YES_NO_LC) : TBooleansRecord = {
		setYesNoLc(value)
		this
	}

	override def value6(value : Boolean_YES_NO_UC) : TBooleansRecord = {
		setYesNoUc(value)
		this
	}

	override def value7(value : Boolean_YN_LC) : TBooleansRecord = {
		setYNLc(value)
		this
	}

	override def value8(value : Boolean_YN_UC) : TBooleansRecord = {
		setYNUc(value)
		this
	}

	override def value9(value : Boolean) : TBooleansRecord = {
		setVcBoolean(value)
		this
	}

	override def value10(value : Boolean) : TBooleansRecord = {
		setCBoolean(value)
		this
	}

	override def value11(value : Boolean) : TBooleansRecord = {
		setNBoolean(value)
		this
	}

	override def values(value1 : Integer, value2 : Boolean_10, value3 : Boolean_TF_LC, value4 : Boolean_TF_UC, value5 : Boolean_YES_NO_LC, value6 : Boolean_YES_NO_UC, value7 : Boolean_YN_LC, value8 : Boolean_YN_UC, value9 : Boolean, value10 : Boolean, value11 : Boolean) : TBooleansRecord = {
		this
	}

	/**
	 * Create a detached, initialised TBooleansRecord
	 */
	def this(id : Integer, oneZero : Boolean_10, trueFalseLc : Boolean_TF_LC, trueFalseUc : Boolean_TF_UC, yesNoLc : Boolean_YES_NO_LC, yesNoUc : Boolean_YES_NO_UC, yNLc : Boolean_YN_LC, yNUc : Boolean_YN_UC, vcBoolean : Boolean, cBoolean : Boolean, nBoolean : Boolean) = {
		this()

		setValue(0, id)
		setValue(1, oneZero)
		setValue(2, trueFalseLc)
		setValue(3, trueFalseUc)
		setValue(4, yesNoLc)
		setValue(5, yesNoUc)
		setValue(6, yNLc)
		setValue(7, yNUc)
		setValue(8, vcBoolean)
		setValue(9, cBoolean)
		setValue(10, nBoolean)
	}
}
