/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.udt.records


import java.lang.Integer
import java.lang.String
import java.sql.Date

import javax.validation.constraints.Size

import org.jooq.Field
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UDTRecordImpl
import org.jooq.test.oraclescala.generatedclasses.test.udt.UAddressType

import scala.Array
import scala.Byte


/**
 * This class is generated by jOOQ.
 */
class UAddressTypeRecord extends UDTRecordImpl[UAddressTypeRecord](UAddressType.U_ADDRESS_TYPE) with Record8[UStreetTypeRecord, String, String, String, Date, Integer, Array[Byte], String] {

	/**
	 * Setter for <code>TEST.U_ADDRESS_TYPE.STREET</code>.
	 */
	def setStreet(value : UStreetTypeRecord) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>TEST.U_ADDRESS_TYPE.STREET</code>.
	 */
	def getStreet : UStreetTypeRecord = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[UStreetTypeRecord]
	}

	/**
	 * Setter for <code>TEST.U_ADDRESS_TYPE.ZIP</code>.
	 */
	def setZip(value : String) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>TEST.U_ADDRESS_TYPE.ZIP</code>.
	 */
	@Size(max = 50)
	def getZip : String = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>TEST.U_ADDRESS_TYPE.CITY</code>.
	 */
	def setCity(value : String) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>TEST.U_ADDRESS_TYPE.CITY</code>.
	 */
	@Size(max = 50)
	def getCity : String = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>TEST.U_ADDRESS_TYPE.COUNTRY</code>.
	 */
	def setCountry(value : String) : Unit = {
		setValue(3, value)
	}

	/**
	 * Getter for <code>TEST.U_ADDRESS_TYPE.COUNTRY</code>.
	 */
	@Size(max = 50)
	def getCountry : String = {
		val r = getValue(3)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>TEST.U_ADDRESS_TYPE.SINCE</code>.
	 */
	def setSince(value : Date) : Unit = {
		setValue(4, value)
	}

	/**
	 * Getter for <code>TEST.U_ADDRESS_TYPE.SINCE</code>.
	 */
	def getSince : Date = {
		val r = getValue(4)
		if (r == null) null else r.asInstanceOf[Date]
	}

	/**
	 * Setter for <code>TEST.U_ADDRESS_TYPE.CODE</code>.
	 */
	def setCode(value : Integer) : Unit = {
		setValue(5, value)
	}

	/**
	 * Getter for <code>TEST.U_ADDRESS_TYPE.CODE</code>.
	 */
	def getCode : Integer = {
		val r = getValue(5)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>TEST.U_ADDRESS_TYPE.F_1323</code>.
	 */
	def setF_1323(value : Array[Byte]) : Unit = {
		setValue(6, value)
	}

	/**
	 * Getter for <code>TEST.U_ADDRESS_TYPE.F_1323</code>.
	 */
	def getF_1323 : Array[Byte] = {
		val r = getValue(6)
		if (r == null) null else r.asInstanceOf[Array[Byte]]
	}

	/**
	 * Setter for <code>TEST.U_ADDRESS_TYPE.F_1326</code>.
	 */
	def setF_1326(value : String) : Unit = {
		setValue(7, value)
	}

	/**
	 * Getter for <code>TEST.U_ADDRESS_TYPE.F_1326</code>.
	 */
	def getF_1326 : String = {
		val r = getValue(7)
		if (r == null) null else r.asInstanceOf[String]
	}

	// -------------------------------------------------------------------------
	// Record8 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row8[UStreetTypeRecord, String, String, String, Date, Integer, Array[Byte], String] = {
		super.fieldsRow.asInstanceOf[ Row8[UStreetTypeRecord, String, String, String, Date, Integer, Array[Byte], String] ]
	}

	override def valuesRow : Row8[UStreetTypeRecord, String, String, String, Date, Integer, Array[Byte], String] = {
		super.valuesRow.asInstanceOf[ Row8[UStreetTypeRecord, String, String, String, Date, Integer, Array[Byte], String] ]
	}
	override def field1 : Field[UStreetTypeRecord] = UAddressType.STREET
	override def field2 : Field[String] = UAddressType.ZIP
	override def field3 : Field[String] = UAddressType.CITY
	override def field4 : Field[String] = UAddressType.COUNTRY
	override def field5 : Field[Date] = UAddressType.SINCE
	override def field6 : Field[Integer] = UAddressType.CODE
	override def field7 : Field[Array[Byte]] = UAddressType.F_1323
	override def field8 : Field[String] = UAddressType.F_1326
	override def value1 : UStreetTypeRecord = getStreet
	override def value2 : String = getZip
	override def value3 : String = getCity
	override def value4 : String = getCountry
	override def value5 : Date = getSince
	override def value6 : Integer = getCode
	override def value7 : Array[Byte] = getF_1323
	override def value8 : String = getF_1326

	override def value1(value : UStreetTypeRecord) : UAddressTypeRecord = {
		setStreet(value)
		this
	}

	override def value2(value : String) : UAddressTypeRecord = {
		setZip(value)
		this
	}

	override def value3(value : String) : UAddressTypeRecord = {
		setCity(value)
		this
	}

	override def value4(value : String) : UAddressTypeRecord = {
		setCountry(value)
		this
	}

	override def value5(value : Date) : UAddressTypeRecord = {
		setSince(value)
		this
	}

	override def value6(value : Integer) : UAddressTypeRecord = {
		setCode(value)
		this
	}

	override def value7(value : Array[Byte]) : UAddressTypeRecord = {
		setF_1323(value)
		this
	}

	override def value8(value : String) : UAddressTypeRecord = {
		setF_1326(value)
		this
	}

	override def values(value1 : UStreetTypeRecord, value2 : String, value3 : String, value4 : String, value5 : Date, value6 : Integer, value7 : Array[Byte], value8 : String) : UAddressTypeRecord = {
		this.value1(value1)
		this.value2(value2)
		this.value3(value3)
		this.value4(value4)
		this.value5(value5)
		this.value6(value6)
		this.value7(value7)
		this.value8(value8)
		this
	}

	/**
	 * Create a detached, initialised UAddressTypeRecord
	 */
	def this(street : UStreetTypeRecord, zip : String, city : String, country : String, since : Date, code : Integer, f_1323 : Array[Byte], f_1326 : String) = {
		this()

		setValue(0, street)
		setValue(1, zip)
		setValue(2, city)
		setValue(3, country)
		setValue(4, since)
		setValue(5, code)
		setValue(6, f_1323)
		setValue(7, f_1326)
	}
}
