/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.multi_schema.packages


import org.jooq.Configuration
import org.jooq.Field
import org.jooq.impl.PackageImpl
import org.jooq.test.oraclescala.generatedclasses.multi_schema.MultiSchema
import org.jooq.test.oraclescala.generatedclasses.multi_schema.packages.ms_synonym_package.ActualObject
import org.jooq.test.oraclescala.generatedclasses.multi_schema.packages.ms_synonym_package.ActualTable
import org.jooq.test.oraclescala.generatedclasses.multi_schema.packages.ms_synonym_package.PublicObject
import org.jooq.test.oraclescala.generatedclasses.multi_schema.packages.ms_synonym_package.PublicTable
import org.jooq.test.oraclescala.generatedclasses.multi_schema.packages.ms_synonym_package.TestObject
import org.jooq.test.oraclescala.generatedclasses.multi_schema.packages.ms_synonym_package.TestTable
import org.jooq.test.oraclescala.generatedclasses.multi_schema.packages.ms_synonym_package.TestTransitive
import org.jooq.test.oraclescala.generatedclasses.multi_schema.udt.records.NumberObjectRecord
import org.jooq.test.oraclescala.generatedclasses.multi_schema.udt.records.NumberTableRecord


/**
 * Convenience access to all stored procedures and functions in MS_SYNONYM_PACKAGE
 */
object MsSynonymPackage extends PackageImpl("MS_SYNONYM_PACKAGE", MultiSchema.MULTI_SCHEMA) {

	/**
	 * The reference instance of <code>MULTI_SCHEMA.MS_SYNONYM_PACKAGE</code>
	 */
	val MS_SYNONYM_PACKAGE = MsSynonymPackage

	/**
	 * Call <code>MULTI_SCHEMA.MS_SYNONYM_PACKAGE.ACTUAL_OBJECT</code>
	 */
	def actualObject(configuration : Configuration) : NumberObjectRecord = {
		val f = new ActualObject()

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>MULTI_SCHEMA.MS_SYNONYM_PACKAGE.ACTUAL_OBJECT</code> as a field
	 */
	def actualObject() : Field[NumberObjectRecord] = {
		val f = new ActualObject

		return f.asField
	}

	/**
	 * Call <code>MULTI_SCHEMA.MS_SYNONYM_PACKAGE.ACTUAL_TABLE</code>
	 */
	def actualTable(configuration : Configuration) : NumberTableRecord = {
		val f = new ActualTable()

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>MULTI_SCHEMA.MS_SYNONYM_PACKAGE.ACTUAL_TABLE</code> as a field
	 */
	def actualTable() : Field[NumberTableRecord] = {
		val f = new ActualTable

		return f.asField
	}

	/**
	 * Call <code>MULTI_SCHEMA.MS_SYNONYM_PACKAGE.PUBLIC_OBJECT</code>
	 */
	def publicObject(configuration : Configuration) : NumberObjectRecord = {
		val f = new PublicObject()

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>MULTI_SCHEMA.MS_SYNONYM_PACKAGE.PUBLIC_OBJECT</code> as a field
	 */
	def publicObject() : Field[NumberObjectRecord] = {
		val f = new PublicObject

		return f.asField
	}

	/**
	 * Call <code>MULTI_SCHEMA.MS_SYNONYM_PACKAGE.PUBLIC_TABLE</code>
	 */
	def publicTable(configuration : Configuration) : NumberTableRecord = {
		val f = new PublicTable()

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>MULTI_SCHEMA.MS_SYNONYM_PACKAGE.PUBLIC_TABLE</code> as a field
	 */
	def publicTable() : Field[NumberTableRecord] = {
		val f = new PublicTable

		return f.asField
	}

	/**
	 * Call <code>MULTI_SCHEMA.MS_SYNONYM_PACKAGE.TEST_OBJECT</code>
	 */
	def testObject(configuration : Configuration) : NumberObjectRecord = {
		val f = new TestObject()

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>MULTI_SCHEMA.MS_SYNONYM_PACKAGE.TEST_OBJECT</code> as a field
	 */
	def testObject() : Field[NumberObjectRecord] = {
		val f = new TestObject

		return f.asField
	}

	/**
	 * Call <code>MULTI_SCHEMA.MS_SYNONYM_PACKAGE.TEST_TABLE</code>
	 */
	def testTable(configuration : Configuration) : NumberTableRecord = {
		val f = new TestTable()

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>MULTI_SCHEMA.MS_SYNONYM_PACKAGE.TEST_TABLE</code> as a field
	 */
	def testTable() : Field[NumberTableRecord] = {
		val f = new TestTable

		return f.asField
	}

	/**
	 * Call <code>MULTI_SCHEMA.MS_SYNONYM_PACKAGE.TEST_TRANSITIVE</code>
	 */
	def testTransitive(configuration : Configuration) : NumberObjectRecord = {
		val f = new TestTransitive()

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>MULTI_SCHEMA.MS_SYNONYM_PACKAGE.TEST_TRANSITIVE</code> as a field
	 */
	def testTransitive() : Field[NumberObjectRecord] = {
		val f = new TestTransitive

		return f.asField
	}
}
