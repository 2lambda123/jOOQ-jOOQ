/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.records


import java.lang.Integer
import java.lang.String

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Id
import javax.persistence.Table
import javax.validation.constraints.NotNull
import javax.validation.constraints.Size

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.test.oraclescala.generatedclasses.test.tables.TDirectory


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_DIRECTORY", schema = "TEST")
class TDirectoryRecord extends UpdatableRecordImpl[TDirectoryRecord](TDirectory.T_DIRECTORY) with Record4[Integer, Integer, Integer, String] {

	/**
	 * Setter for <code>TEST.T_DIRECTORY.ID</code>.
	 */
	def setId(value : Integer) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>TEST.T_DIRECTORY.ID</code>.
	 */
	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 7)
	@NotNull
	def getId : Integer = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>TEST.T_DIRECTORY.PARENT_ID</code>.
	 */
	def setParentId(value : Integer) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>TEST.T_DIRECTORY.PARENT_ID</code>.
	 */
	@Column(name = "PARENT_ID", precision = 7)
	def getParentId : Integer = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>TEST.T_DIRECTORY.IS_DIRECTORY</code>.
	 */
	def setIsDirectory(value : Integer) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>TEST.T_DIRECTORY.IS_DIRECTORY</code>.
	 */
	@Column(name = "IS_DIRECTORY", precision = 7)
	def getIsDirectory : Integer = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>TEST.T_DIRECTORY.name</code>.
	 */
	def setName(value : String) : Unit = {
		setValue(3, value)
	}

	/**
	 * Getter for <code>TEST.T_DIRECTORY.name</code>.
	 */
	@Column(name = "name", length = 50)
	@Size(max = 50)
	def getName : String = {
		val r = getValue(3)
		if (r == null) null else r.asInstanceOf[String]
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------
	override def key() : Record1[Integer] = {
		return super.key.asInstanceOf[ Record1[Integer] ]
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row4[Integer, Integer, Integer, String] = {
		super.fieldsRow.asInstanceOf[ Row4[Integer, Integer, Integer, String] ]
	}

	override def valuesRow : Row4[Integer, Integer, Integer, String] = {
		super.valuesRow.asInstanceOf[ Row4[Integer, Integer, Integer, String] ]
	}
	override def field1 : Field[Integer] = TDirectory.T_DIRECTORY.ID
	override def field2 : Field[Integer] = TDirectory.T_DIRECTORY.PARENT_ID
	override def field3 : Field[Integer] = TDirectory.T_DIRECTORY.IS_DIRECTORY
	override def field4 : Field[String] = TDirectory.T_DIRECTORY.NAME
	override def value1 : Integer = getId
	override def value2 : Integer = getParentId
	override def value3 : Integer = getIsDirectory
	override def value4 : String = getName

	override def value1(value : Integer) : TDirectoryRecord = {
		setId(value)
		this
	}

	override def value2(value : Integer) : TDirectoryRecord = {
		setParentId(value)
		this
	}

	override def value3(value : Integer) : TDirectoryRecord = {
		setIsDirectory(value)
		this
	}

	override def value4(value : String) : TDirectoryRecord = {
		setName(value)
		this
	}

	override def values(value1 : Integer, value2 : Integer, value3 : Integer, value4 : String) : TDirectoryRecord = {
		this
	}

	/**
	 * Create a detached, initialised TDirectoryRecord
	 */
	def this(id : Integer, parentId : Integer, isDirectory : Integer, name : String) = {
		this()

		setValue(0, id)
		setValue(1, parentId)
		setValue(2, isDirectory)
		setValue(3, name)
	}
}
