/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.math.BigDecimal
import java.sql.Timestamp

import org.jooq.Field
import org.jooq.Table
import org.jooq.TableField
import org.jooq.impl.TableImpl
import org.jooq.test.oraclescala.generatedclasses.test.Test
import org.jooq.test.oraclescala.generatedclasses.test.tables.VBook
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.VBookRecord

import scala.Array


object VBook {

	/**
	 * The reference instance of <code>TEST.V_BOOK</code>
	 */
	val V_BOOK = new VBook
}

/**
 * This class is generated by jOOQ.
 */
class VBook(alias : String, aliased : Table[VBookRecord], parameters : Array[ Field[_] ]) extends TableImpl[VBookRecord](alias, Test.TEST, aliased, parameters, "") {

	/**
	 * The class holding records for this type
	 */
	override def getRecordType : Class[VBookRecord] = {
		classOf[VBookRecord]
	}

	/**
	 * The column <code>TEST.V_BOOK.ID</code>.
	 */
	val ID : TableField[VBookRecord, Integer] = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

	/**
	 * The column <code>TEST.V_BOOK.AUTHOR_ID</code>.
	 */
	val AUTHOR_ID : TableField[VBookRecord, Integer] = createField("AUTHOR_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

	/**
	 * The column <code>TEST.V_BOOK.CO_AUTHOR_ID</code>.
	 */
	val CO_AUTHOR_ID : TableField[VBookRecord, Integer] = createField("CO_AUTHOR_ID", org.jooq.impl.SQLDataType.INTEGER, "")

	/**
	 * The column <code>TEST.V_BOOK.DETAILS_ID</code>.
	 */
	val DETAILS_ID : TableField[VBookRecord, Integer] = createField("DETAILS_ID", org.jooq.impl.SQLDataType.INTEGER, "")

	/**
	 * The column <code>TEST.V_BOOK.TITLE</code>.
	 */
	val TITLE : TableField[VBookRecord, String] = createField("TITLE", org.jooq.impl.SQLDataType.VARCHAR.length(400).nullable(false), "")

	/**
	 * The column <code>TEST.V_BOOK.PUBLISHED_IN</code>.
	 */
	val PUBLISHED_IN : TableField[VBookRecord, Integer] = createField("PUBLISHED_IN", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

	/**
	 * The column <code>TEST.V_BOOK.LANGUAGE_ID</code>.
	 */
	val LANGUAGE_ID : TableField[VBookRecord, Integer] = createField("LANGUAGE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

	/**
	 * The column <code>TEST.V_BOOK.CONTENT_TEXT</code>.
	 */
	val CONTENT_TEXT : TableField[VBookRecord, String] = createField("CONTENT_TEXT", org.jooq.impl.SQLDataType.CLOB, "")

	/**
	 * The column <code>TEST.V_BOOK.CONTENT_PDF</code>.
	 */
	val CONTENT_PDF : TableField[VBookRecord, Array[scala.Byte]] = createField("CONTENT_PDF", org.jooq.impl.SQLDataType.BLOB, "")

	/**
	 * The column <code>TEST.V_BOOK.REC_VERSION</code>.
	 */
	val REC_VERSION : TableField[VBookRecord, BigDecimal] = createField("REC_VERSION", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.V_BOOK.REC_TIMESTAMP</code>.
	 */
	val REC_TIMESTAMP : TableField[VBookRecord, Timestamp] = createField("REC_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP, "")

	/**
	 * Create a <code>TEST.V_BOOK</code> table reference
	 */
	def this() = {
		this("V_BOOK", null, null)
	}

	/**
	 * Create an aliased <code>TEST.V_BOOK</code> table reference
	 */
	def this(alias : String) = {
		this(alias, VBook.V_BOOK, null)
	}

	private def this(alias : String, aliased : Table[VBookRecord]) = {
		this(alias, aliased, null)
	}

	override def as(alias : String) : VBook = {
		new VBook(alias, this)
	}

	/**
	 * Rename this table
	 */
	def rename(name : String) : VBook = {
		new VBook(name, null)
	}
}
