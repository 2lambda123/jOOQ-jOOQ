/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.util.Arrays
import java.util.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl
import org.jooq.test.oraclescala.generatedclasses.test.Keys
import org.jooq.test.oraclescala.generatedclasses.test.Test
import org.jooq.test.oraclescala.generatedclasses.test.tables.XTestCase_64_69
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.XTestCase_64_69Record


object XTestCase_64_69 {

	/**
	 * The reference instance of <code>TEST.X_TEST_CASE_64_69</code>
	 */
	val X_TEST_CASE_64_69 = new XTestCase_64_69
}

/**
 * This class is generated by jOOQ.
 */
class XTestCase_64_69(alias : String, aliased : Table[XTestCase_64_69Record], parameters : Array[ Field[_] ]) extends TableImpl[XTestCase_64_69Record](alias, Test.TEST, aliased, parameters, "") {

	/**
	 * The class holding records for this type
	 */
	override def getRecordType : Class[XTestCase_64_69Record] = {
		classOf[XTestCase_64_69Record]
	}

	/**
	 * The column <code>TEST.X_TEST_CASE_64_69.ID</code>.
	 */
	val ID : TableField[XTestCase_64_69Record, Integer] = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

	/**
	 * The column <code>TEST.X_TEST_CASE_64_69.UNUSED_ID</code>.
	 */
	val UNUSED_ID : TableField[XTestCase_64_69Record, Integer] = createField("UNUSED_ID", org.jooq.impl.SQLDataType.INTEGER, "")

	/**
	 * Create a <code>TEST.X_TEST_CASE_64_69</code> table reference
	 */
	def this() = {
		this("X_TEST_CASE_64_69", null, null)
	}

	/**
	 * Create an aliased <code>TEST.X_TEST_CASE_64_69</code> table reference
	 */
	def this(alias : String) = {
		this(alias, XTestCase_64_69.X_TEST_CASE_64_69, null)
	}

	private def this(alias : String, aliased : Table[XTestCase_64_69Record]) = {
		this(alias, aliased, null)
	}

	override def getPrimaryKey : UniqueKey[XTestCase_64_69Record] = {
		Keys.PK_X_TEST_CASE_64_69
	}

	override def getKeys : List[ UniqueKey[XTestCase_64_69Record] ] = {
		return Arrays.asList[ UniqueKey[XTestCase_64_69Record] ](Keys.PK_X_TEST_CASE_64_69)
	}

	override def getReferences : List[ ForeignKey[XTestCase_64_69Record, _] ] = {
		return Arrays.asList[ ForeignKey[XTestCase_64_69Record, _] ](Keys.FK_X_TEST_CASE_64_69A, Keys.FK_X_TEST_CASE_64_69B)
	}

	override def as(alias : String) : XTestCase_64_69 = {
		new XTestCase_64_69(alias, this)
	}

	/**
	 * Rename this table
	 */
	def rename(name : String) : XTestCase_64_69 = {
		new XTestCase_64_69(name, null)
	}
}
