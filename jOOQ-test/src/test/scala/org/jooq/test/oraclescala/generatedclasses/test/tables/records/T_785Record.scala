/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.records


import java.lang.Integer
import java.lang.String

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Table
import javax.validation.constraints.Size

import org.jooq.Field
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.TableRecordImpl
import org.jooq.test.oraclescala.generatedclasses.test.tables.T_785


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_785", schema = "TEST")
class T_785Record extends TableRecordImpl[T_785Record](T_785.T_785) with Record3[Integer, String, String] {

	/**
	 * Setter for <code>TEST.T_785.ID</code>.
	 */
	def setId(value : Integer) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>TEST.T_785.ID</code>.
	 */
	@Column(name = "ID", precision = 7)
	def getId : Integer = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>TEST.T_785.NAME</code>.
	 */
	def setName(value : String) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>TEST.T_785.NAME</code>.
	 */
	@Column(name = "NAME", length = 50)
	@Size(max = 50)
	def getName : String = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>TEST.T_785.VALUE</code>.
	 */
	def setValue(value : String) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>TEST.T_785.VALUE</code>.
	 */
	@Column(name = "VALUE", length = 50)
	@Size(max = 50)
	def getValue : String = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[String]
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row3[Integer, String, String] = {
		super.fieldsRow.asInstanceOf[ Row3[Integer, String, String] ]
	}

	override def valuesRow : Row3[Integer, String, String] = {
		super.valuesRow.asInstanceOf[ Row3[Integer, String, String] ]
	}
	override def field1 : Field[Integer] = T_785.T_785.ID
	override def field2 : Field[String] = T_785.T_785.NAME
	override def field3 : Field[String] = T_785.T_785.VALUE
	override def value1 : Integer = getId
	override def value2 : String = getName
	override def value3 : String = getValue

	override def value1(value : Integer) : T_785Record = {
		setId(value)
		this
	}

	override def value2(value : String) : T_785Record = {
		setName(value)
		this
	}

	override def value3(value : String) : T_785Record = {
		setValue(value)
		this
	}

	override def values(value1 : Integer, value2 : String, value3 : String) : T_785Record = {
		this.value1(value1)
		this.value2(value2)
		this.value3(value3)
		this
	}

	/**
	 * Create a detached, initialised T_785Record
	 */
	def this(id : Integer, name : String, value : String) = {
		this()

		setValue(0, id)
		setValue(1, name)
		setValue(2, value)
	}
}
