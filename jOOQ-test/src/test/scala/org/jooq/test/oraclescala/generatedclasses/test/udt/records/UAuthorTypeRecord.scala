/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.udt.records


import java.lang.Integer
import java.lang.Number
import java.lang.String
import java.math.BigDecimal

import javax.validation.constraints.Size

import org.jooq.Configuration
import org.jooq.Field
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UDTRecordImpl
import org.jooq.test.oraclescala.generatedclasses.test.udt.UAuthorType
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.UAuthorTypeRecord
import org.jooq.test.oraclescala.generatedclasses.test.udt.u_author_type.CountBooks
import org.jooq.test.oraclescala.generatedclasses.test.udt.u_author_type.GetAuthor
import org.jooq.test.oraclescala.generatedclasses.test.udt.u_author_type.GetBooks
import org.jooq.test.oraclescala.generatedclasses.test.udt.u_author_type.Load
import org.jooq.test.oraclescala.generatedclasses.test.udt.u_author_type.NewAuthor


/**
 * This class is generated by jOOQ.
 */
class UAuthorTypeRecord extends UDTRecordImpl[UAuthorTypeRecord](UAuthorType.U_AUTHOR_TYPE) with Record3[Integer, String, String] {

	/**
	 * Setter for <code>TEST.U_AUTHOR_TYPE.ID</code>.
	 */
	def setId(value : Integer) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>TEST.U_AUTHOR_TYPE.ID</code>.
	 */
	def getId : Integer = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>TEST.U_AUTHOR_TYPE.FIRST_NAME</code>.
	 */
	def setFirstName(value : String) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>TEST.U_AUTHOR_TYPE.FIRST_NAME</code>.
	 */
	@Size(max = 50)
	def getFirstName : String = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>TEST.U_AUTHOR_TYPE.LAST_NAME</code>.
	 */
	def setLastName(value : String) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>TEST.U_AUTHOR_TYPE.LAST_NAME</code>.
	 */
	@Size(max = 50)
	def getLastName : String = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Call <code>TEST.U_AUTHOR_TYPE.COUNT_BOOKS</code>
	 */
	def countBooks() : BigDecimal = {
		val f = new CountBooks()
		f.setSelf(this)

		f.execute(configuration())
		f.getReturnValue
	}

	/**
	 * Call <code>TEST.U_AUTHOR_TYPE.GET_AUTHOR</code>
	 */
	def getAuthor(configuration : Configuration, pId : Number) : UAuthorTypeRecord = {
		val f = new GetAuthor()
		f.setPId(pId)

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Call <code>TEST.U_AUTHOR_TYPE.GET_BOOKS</code>
	 */
	def getBooks() : GetBooks = {
		val p = new GetBooks
		p.setSelf(this)

		p.execute(configuration())
		from(p.getSelf)
		return p
	}

	/**
	 * Call <code>TEST.U_AUTHOR_TYPE.LOAD</code>
	 */
	def load() : UAuthorTypeRecord = {
		val p = new Load
		p.setSelf(this)

		p.execute(configuration())
		from(p.getSelf)
		return p.getSelf
	}

	/**
	 * Call <code>TEST.U_AUTHOR_TYPE.NEW_AUTHOR</code>
	 */
	def newAuthor(configuration : Configuration, pId : Number, pFirstName : String, pLastName : String) : UAuthorTypeRecord = {
		val p = new NewAuthor
		p.setPId(pId)
		p.setPFirstName(pFirstName)
		p.setPLastName(pLastName)

		p.execute(configuration)
		return p.getPAuthor
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row3[Integer, String, String] = {
		super.fieldsRow.asInstanceOf[ Row3[Integer, String, String] ]
	}

	override def valuesRow : Row3[Integer, String, String] = {
		super.valuesRow.asInstanceOf[ Row3[Integer, String, String] ]
	}
	override def field1 : Field[Integer] = UAuthorType.ID
	override def field2 : Field[String] = UAuthorType.FIRST_NAME
	override def field3 : Field[String] = UAuthorType.LAST_NAME
	override def value1 : Integer = getId
	override def value2 : String = getFirstName
	override def value3 : String = getLastName

	override def value1(value : Integer) : UAuthorTypeRecord = {
		setId(value)
		this
	}

	override def value2(value : String) : UAuthorTypeRecord = {
		setFirstName(value)
		this
	}

	override def value3(value : String) : UAuthorTypeRecord = {
		setLastName(value)
		this
	}

	override def values(value1 : Integer, value2 : String, value3 : String) : UAuthorTypeRecord = {
		this.value1(value1)
		this.value2(value2)
		this.value3(value3)
		this
	}

	/**
	 * Create a detached, initialised UAuthorTypeRecord
	 */
	def this(id : Integer, firstName : String, lastName : String) = {
		this()

		setValue(0, id)
		setValue(1, firstName)
		setValue(2, lastName)
	}
}
