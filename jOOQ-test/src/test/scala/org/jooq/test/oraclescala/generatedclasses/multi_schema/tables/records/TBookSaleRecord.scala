/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.multi_schema.tables.records


import java.lang.Integer
import java.lang.String
import java.math.BigDecimal
import java.sql.Date

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Id
import javax.persistence.Table
import javax.validation.constraints.NotNull
import javax.validation.constraints.Size

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.test.all.scala.Test
import org.jooq.test.oraclescala.generatedclasses.multi_schema.tables.TBookSale


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_BOOK_SALE", schema = "MULTI_SCHEMA")
class TBookSaleRecord extends UpdatableRecordImpl[TBookSaleRecord](TBookSale.T_BOOK_SALE) with Test with Record5[Integer, Integer, String, Date, BigDecimal] {

	/**
	 * Setter for <code>MULTI_SCHEMA.T_BOOK_SALE.ID</code>.
	 */
	def setId(value : Integer) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>MULTI_SCHEMA.T_BOOK_SALE.ID</code>.
	 */
	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 7)
	@NotNull
	def getId : Integer = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>MULTI_SCHEMA.T_BOOK_SALE.BOOK_ID</code>.
	 */
	def setBookId(value : Integer) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>MULTI_SCHEMA.T_BOOK_SALE.BOOK_ID</code>.
	 */
	@Column(name = "BOOK_ID", nullable = false, precision = 7)
	@NotNull
	def getBookId : Integer = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>MULTI_SCHEMA.T_BOOK_SALE.BOOK_STORE_NAME</code>.
	 */
	def setBookStoreName(value : String) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>MULTI_SCHEMA.T_BOOK_SALE.BOOK_STORE_NAME</code>.
	 */
	@Column(name = "BOOK_STORE_NAME", nullable = false, length = 400)
	@NotNull
	@Size(max = 400)
	def getBookStoreName : String = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>MULTI_SCHEMA.T_BOOK_SALE.SOLD_AT</code>.
	 */
	def setSoldAt(value : Date) : Unit = {
		setValue(3, value)
	}

	/**
	 * Getter for <code>MULTI_SCHEMA.T_BOOK_SALE.SOLD_AT</code>.
	 */
	@Column(name = "SOLD_AT", nullable = false)
	@NotNull
	def getSoldAt : Date = {
		val r = getValue(3)
		if (r == null) null else r.asInstanceOf[Date]
	}

	/**
	 * Setter for <code>MULTI_SCHEMA.T_BOOK_SALE.SOLD_FOR</code>.
	 */
	def setSoldFor(value : BigDecimal) : Unit = {
		setValue(4, value)
	}

	/**
	 * Getter for <code>MULTI_SCHEMA.T_BOOK_SALE.SOLD_FOR</code>.
	 */
	@Column(name = "SOLD_FOR", nullable = false, precision = 10, scale = 2)
	@NotNull
	def getSoldFor : BigDecimal = {
		val r = getValue(4)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------
	override def key() : Record1[Integer] = {
		return super.key.asInstanceOf[ Record1[Integer] ]
	}

	// -------------------------------------------------------------------------
	// Record5 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row5[Integer, Integer, String, Date, BigDecimal] = {
		super.fieldsRow.asInstanceOf[ Row5[Integer, Integer, String, Date, BigDecimal] ]
	}

	override def valuesRow : Row5[Integer, Integer, String, Date, BigDecimal] = {
		super.valuesRow.asInstanceOf[ Row5[Integer, Integer, String, Date, BigDecimal] ]
	}
	override def field1 : Field[Integer] = TBookSale.T_BOOK_SALE.ID
	override def field2 : Field[Integer] = TBookSale.T_BOOK_SALE.BOOK_ID
	override def field3 : Field[String] = TBookSale.T_BOOK_SALE.BOOK_STORE_NAME
	override def field4 : Field[Date] = TBookSale.T_BOOK_SALE.SOLD_AT
	override def field5 : Field[BigDecimal] = TBookSale.T_BOOK_SALE.SOLD_FOR
	override def value1 : Integer = getId
	override def value2 : Integer = getBookId
	override def value3 : String = getBookStoreName
	override def value4 : Date = getSoldAt
	override def value5 : BigDecimal = getSoldFor

	override def value1(value : Integer) : TBookSaleRecord = {
		setId(value)
		this
	}

	override def value2(value : Integer) : TBookSaleRecord = {
		setBookId(value)
		this
	}

	override def value3(value : String) : TBookSaleRecord = {
		setBookStoreName(value)
		this
	}

	override def value4(value : Date) : TBookSaleRecord = {
		setSoldAt(value)
		this
	}

	override def value5(value : BigDecimal) : TBookSaleRecord = {
		setSoldFor(value)
		this
	}

	override def values(value1 : Integer, value2 : Integer, value3 : String, value4 : Date, value5 : BigDecimal) : TBookSaleRecord = {
		this.value1(value1)
		this.value2(value2)
		this.value3(value3)
		this.value4(value4)
		this.value5(value5)
		this
	}

	/**
	 * Create a detached, initialised TBookSaleRecord
	 */
	def this(id : Integer, bookId : Integer, bookStoreName : String, soldAt : Date, soldFor : BigDecimal) = {
		this()

		setValue(0, id)
		setValue(1, bookId)
		setValue(2, bookStoreName)
		setValue(3, soldAt)
		setValue(4, soldFor)
	}
}
