/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.pojos


import java.io.Serializable
import java.lang.Integer
import java.lang.String
import java.lang.StringBuilder

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Id
import javax.persistence.Table
import javax.validation.constraints.NotNull
import javax.validation.constraints.Size


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "X_TEST_CASE_85", schema = "TEST")
class XTestCase_85(
	  private var id : Integer
	, private var xUnusedId : Integer
	, private var xUnusedName : String 
) extends Serializable {

	def this() = {
		this(null, null, null)
	}

	def this (value : XTestCase_85) = {
		this(
			  value.id
			, value.xUnusedId
			, value.xUnusedName
		)
	}

	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 7)
	@NotNull
	def getId : Integer = {
		this.id
	}

	def setId(id : Integer) : Unit = {
		this.id = id
	}

	@Column(name = "X_UNUSED_ID", precision = 7)
	def getXUnusedId : Integer = {
		this.xUnusedId
	}

	def setXUnusedId(xUnusedId : Integer) : Unit = {
		this.xUnusedId = xUnusedId
	}

	@Column(name = "X_UNUSED_NAME", length = 10)
	@Size(max = 10)
	def getXUnusedName : String = {
		this.xUnusedName
	}

	def setXUnusedName(xUnusedName : String) : Unit = {
		this.xUnusedName = xUnusedName
	}

	override def equals(obj : Any) : scala.Boolean = {
		if (this == obj)
			return true
		if (obj == null)
			return false
		if (getClass() != obj.getClass())
			return false
		val other = obj.asInstanceOf[XTestCase_85]
		if (id == null) {
			if (other.id != null)
				return false
		}
		else if (!id.equals(other.id))
			return false
		if (xUnusedId == null) {
			if (other.xUnusedId != null)
				return false
		}
		else if (!xUnusedId.equals(other.xUnusedId))
			return false
		if (xUnusedName == null) {
			if (other.xUnusedName != null)
				return false
		}
		else if (!xUnusedName.equals(other.xUnusedName))
			return false
		return true
	}

	override def hashCode : Int = {
		val prime = 31
		var result = 1
		result = prime * result + (if (id == null) 0 else id.hashCode())
		result = prime * result + (if (xUnusedId == null) 0 else xUnusedId.hashCode())
		result = prime * result + (if (xUnusedName == null) 0 else xUnusedName.hashCode())
		return result
	}

	override def toString : String = {
		val sb = new StringBuilder("XTestCase_85 (")

		sb.append(id)
		sb.append(", ").append(xUnusedId)
		sb.append(", ").append(xUnusedName)

		sb.append(")");
		return sb.toString
	}
}
