/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.records


import java.lang.Integer
import java.lang.Long
import java.sql.Date
import java.sql.Timestamp

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Id
import javax.persistence.Table
import javax.validation.constraints.NotNull

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.test.oraclescala.generatedclasses.test.tables.TDates
import org.jooq.types.DayToSecond
import org.jooq.types.YearToMonth


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_DATES", schema = "TEST")
class TDatesRecord extends UpdatableRecordImpl[TDatesRecord](TDates.T_DATES) with Record8[Integer, Date, Timestamp, Timestamp, Integer, Long, YearToMonth, DayToSecond] {

	/**
	 * Setter for <code>TEST.T_DATES.ID</code>.
	 */
	def setId(value : Integer) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>TEST.T_DATES.ID</code>.
	 */
	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 7)
	@NotNull
	def getId : Integer = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>TEST.T_DATES.D</code>.
	 */
	def setD(value : Date) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>TEST.T_DATES.D</code>.
	 */
	@Column(name = "D")
	def getD : Date = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[Date]
	}

	/**
	 * Setter for <code>TEST.T_DATES.T</code>.
	 */
	def setT(value : Timestamp) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>TEST.T_DATES.T</code>.
	 */
	@Column(name = "T")
	def getT : Timestamp = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[Timestamp]
	}

	/**
	 * Setter for <code>TEST.T_DATES.TS</code>.
	 */
	def setTs(value : Timestamp) : Unit = {
		setValue(3, value)
	}

	/**
	 * Getter for <code>TEST.T_DATES.TS</code>.
	 */
	@Column(name = "TS")
	def getTs : Timestamp = {
		val r = getValue(3)
		if (r == null) null else r.asInstanceOf[Timestamp]
	}

	/**
	 * Setter for <code>TEST.T_DATES.D_INT</code>.
	 */
	def setDInt(value : Integer) : Unit = {
		setValue(4, value)
	}

	/**
	 * Getter for <code>TEST.T_DATES.D_INT</code>.
	 */
	@Column(name = "D_INT", precision = 7)
	def getDInt : Integer = {
		val r = getValue(4)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>TEST.T_DATES.TS_BIGINT</code>.
	 */
	def setTsBigint(value : Long) : Unit = {
		setValue(5, value)
	}

	/**
	 * Getter for <code>TEST.T_DATES.TS_BIGINT</code>.
	 */
	@Column(name = "TS_BIGINT", precision = 18)
	def getTsBigint : Long = {
		val r = getValue(5)
		if (r == null) null else r.asInstanceOf[Long]
	}

	/**
	 * Setter for <code>TEST.T_DATES.I_Y</code>.
	 */
	def setIY(value : YearToMonth) : Unit = {
		setValue(6, value)
	}

	/**
	 * Getter for <code>TEST.T_DATES.I_Y</code>.
	 */
	@Column(name = "I_Y", precision = 2)
	def getIY : YearToMonth = {
		val r = getValue(6)
		if (r == null) null else r.asInstanceOf[YearToMonth]
	}

	/**
	 * Setter for <code>TEST.T_DATES.I_D</code>.
	 */
	def setID(value : DayToSecond) : Unit = {
		setValue(7, value)
	}

	/**
	 * Getter for <code>TEST.T_DATES.I_D</code>.
	 */
	@Column(name = "I_D", precision = 2, scale = 6)
	def getID : DayToSecond = {
		val r = getValue(7)
		if (r == null) null else r.asInstanceOf[DayToSecond]
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------
	override def key() : Record1[Integer] = {
		return super.key.asInstanceOf[ Record1[Integer] ]
	}

	// -------------------------------------------------------------------------
	// Record8 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row8[Integer, Date, Timestamp, Timestamp, Integer, Long, YearToMonth, DayToSecond] = {
		super.fieldsRow.asInstanceOf[ Row8[Integer, Date, Timestamp, Timestamp, Integer, Long, YearToMonth, DayToSecond] ]
	}

	override def valuesRow : Row8[Integer, Date, Timestamp, Timestamp, Integer, Long, YearToMonth, DayToSecond] = {
		super.valuesRow.asInstanceOf[ Row8[Integer, Date, Timestamp, Timestamp, Integer, Long, YearToMonth, DayToSecond] ]
	}
	override def field1 : Field[Integer] = TDates.T_DATES.ID
	override def field2 : Field[Date] = TDates.T_DATES.D
	override def field3 : Field[Timestamp] = TDates.T_DATES.T
	override def field4 : Field[Timestamp] = TDates.T_DATES.TS
	override def field5 : Field[Integer] = TDates.T_DATES.D_INT
	override def field6 : Field[Long] = TDates.T_DATES.TS_BIGINT
	override def field7 : Field[YearToMonth] = TDates.T_DATES.I_Y
	override def field8 : Field[DayToSecond] = TDates.T_DATES.I_D
	override def value1 : Integer = getId
	override def value2 : Date = getD
	override def value3 : Timestamp = getT
	override def value4 : Timestamp = getTs
	override def value5 : Integer = getDInt
	override def value6 : Long = getTsBigint
	override def value7 : YearToMonth = getIY
	override def value8 : DayToSecond = getID

	override def value1(value : Integer) : TDatesRecord = {
		setId(value)
		this
	}

	override def value2(value : Date) : TDatesRecord = {
		setD(value)
		this
	}

	override def value3(value : Timestamp) : TDatesRecord = {
		setT(value)
		this
	}

	override def value4(value : Timestamp) : TDatesRecord = {
		setTs(value)
		this
	}

	override def value5(value : Integer) : TDatesRecord = {
		setDInt(value)
		this
	}

	override def value6(value : Long) : TDatesRecord = {
		setTsBigint(value)
		this
	}

	override def value7(value : YearToMonth) : TDatesRecord = {
		setIY(value)
		this
	}

	override def value8(value : DayToSecond) : TDatesRecord = {
		setID(value)
		this
	}

	override def values(value1 : Integer, value2 : Date, value3 : Timestamp, value4 : Timestamp, value5 : Integer, value6 : Long, value7 : YearToMonth, value8 : DayToSecond) : TDatesRecord = {
		this
	}

	/**
	 * Create a detached, initialised TDatesRecord
	 */
	def this(id : Integer, d : Date, t : Timestamp, ts : Timestamp, dInt : Integer, tsBigint : Long, iY : YearToMonth, iD : DayToSecond) = {
		this()

		setValue(0, id)
		setValue(1, d)
		setValue(2, t)
		setValue(3, ts)
		setValue(4, dInt)
		setValue(5, tsBigint)
		setValue(6, iY)
		setValue(7, iD)
	}
}
