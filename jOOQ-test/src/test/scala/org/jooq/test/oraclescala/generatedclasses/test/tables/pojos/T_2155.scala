/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.pojos


import java.io.Serializable
import java.lang.Integer
import java.time.LocalDateTime

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Id
import javax.persistence.Table
import javax.validation.constraints.NotNull

import org.jooq.test.oraclescala.generatedclasses.test.udt.pojos.U_2155Object
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.U_2155ArrayRecord


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_2155", schema = "TEST")
class T_2155(
	  private var id : Integer          
	, private var d1 : LocalDateTime    
	, private var d2 : U_2155Object     
	, private var d3 : U_2155ArrayRecord
) extends Serializable {

	def this() = {
		this(null, null, null, null)
	}

	def this (value : T_2155) = {
		this(
			  value.id
			, value.d1
			, value.d2
			, value.d3
		)
	}

	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 7)
	@NotNull
	def getId : Integer = {
		this.id
	}

	def setId(id : Integer) : Unit = {
		this.id = id
	}

	@Column(name = "D1")
	def getD1 : LocalDateTime = {
		this.d1
	}

	def setD1(d1 : LocalDateTime) : Unit = {
		this.d1 = d1
	}

	@Column(name = "D2")
	def getD2 : U_2155Object = {
		this.d2
	}

	def setD2(d2 : U_2155Object) : Unit = {
		this.d2 = d2
	}

	@Column(name = "D3")
	def getD3 : U_2155ArrayRecord = {
		this.d3
	}

	def setD3(d3 : U_2155ArrayRecord) : Unit = {
		this.d3 = d3
	}

	override def equals(obj : Any) : scala.Boolean = {
		if (this == obj)
			return true
		if (obj == null)
			return false
		if (getClass() != obj.getClass())
			return false
		val other = obj.asInstanceOf[T_2155]
		if (id == null) {
			if (other.id != null)
				return false
		}
		else if (!id.equals(other.id))
			return false
		if (d1 == null) {
			if (other.d1 != null)
				return false
		}
		else if (!d1.equals(other.d1))
			return false
		if (d2 == null) {
			if (other.d2 != null)
				return false
		}
		else if (!d2.equals(other.d2))
			return false
		if (d3 == null) {
			if (other.d3 != null)
				return false
		}
		else if (!d3.equals(other.d3))
			return false
		return true
	}

	override def hashCode : Int = {
		val prime = 31
		var result = 1
		result = prime * result + (if (id == null) 0 else id.hashCode())
		result = prime * result + (if (d1 == null) 0 else d1.hashCode())
		result = prime * result + (if (d2 == null) 0 else d2.hashCode())
		result = prime * result + (if (d3 == null) 0 else d3.hashCode())
		return result
	}
}
