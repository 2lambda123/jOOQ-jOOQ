/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.util.Arrays
import java.util.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl
import org.jooq.test.oraclescala.generatedclasses.test.Keys
import org.jooq.test.oraclescala.generatedclasses.test.Test
import org.jooq.test.oraclescala.generatedclasses.test.tables.XTestCase_85
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.XTestCase_85Record


object XTestCase_85 {

	/**
	 * The reference instance of <code>TEST.X_TEST_CASE_85</code>
	 */
	val X_TEST_CASE_85 = new XTestCase_85
}

/**
 * This class is generated by jOOQ.
 */
class XTestCase_85(alias : String, aliased : Table[XTestCase_85Record], parameters : Array[ Field[_] ]) extends TableImpl[XTestCase_85Record](alias, Test.TEST, aliased, parameters, "") {

	/**
	 * The class holding records for this type
	 */
	override def getRecordType : Class[XTestCase_85Record] = {
		classOf[XTestCase_85Record]
	}

	/**
	 * The column <code>TEST.X_TEST_CASE_85.ID</code>.
	 */
	val ID : TableField[XTestCase_85Record, Integer] = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

	/**
	 * The column <code>TEST.X_TEST_CASE_85.X_UNUSED_ID</code>.
	 */
	val X_UNUSED_ID : TableField[XTestCase_85Record, Integer] = createField("X_UNUSED_ID", org.jooq.impl.SQLDataType.INTEGER, "")

	/**
	 * The column <code>TEST.X_TEST_CASE_85.X_UNUSED_NAME</code>.
	 */
	val X_UNUSED_NAME : TableField[XTestCase_85Record, String] = createField("X_UNUSED_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(10), "")

	/**
	 * Create a <code>TEST.X_TEST_CASE_85</code> table reference
	 */
	def this() = {
		this("X_TEST_CASE_85", null, null)
	}

	/**
	 * Create an aliased <code>TEST.X_TEST_CASE_85</code> table reference
	 */
	def this(alias : String) = {
		this(alias, XTestCase_85.X_TEST_CASE_85, null)
	}

	private def this(alias : String, aliased : Table[XTestCase_85Record]) = {
		this(alias, aliased, null)
	}

	override def getPrimaryKey : UniqueKey[XTestCase_85Record] = {
		Keys.PK_X_TEST_CASE_85
	}

	override def getKeys : List[ UniqueKey[XTestCase_85Record] ] = {
		return Arrays.asList[ UniqueKey[XTestCase_85Record] ](Keys.PK_X_TEST_CASE_85)
	}

	override def getReferences : List[ ForeignKey[XTestCase_85Record, _] ] = {
		return Arrays.asList[ ForeignKey[XTestCase_85Record, _] ](Keys.FK_X_TEST_CASE_85)
	}

	override def as(alias : String) : XTestCase_85 = {
		new XTestCase_85(alias, this)
	}

	/**
	 * Rename this table
	 */
	def rename(name : String) : XTestCase_85 = {
		new XTestCase_85(name, null)
	}
}
