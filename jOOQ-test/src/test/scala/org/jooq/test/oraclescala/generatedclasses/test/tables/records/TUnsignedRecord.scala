/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.records


import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Table

import org.jooq.Field
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.TableRecordImpl
import org.jooq.test.oraclescala.generatedclasses.test.tables.TUnsigned
import org.jooq.types.UByte
import org.jooq.types.UInteger
import org.jooq.types.ULong
import org.jooq.types.UShort


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_UNSIGNED", schema = "TEST")
class TUnsignedRecord extends TableRecordImpl[TUnsignedRecord](TUnsigned.T_UNSIGNED) with Record4[UByte, UShort, UInteger, ULong] {

	/**
	 * Setter for <code>TEST.T_UNSIGNED.U_BYTE</code>.
	 */
	def setUByte(value : UByte) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>TEST.T_UNSIGNED.U_BYTE</code>.
	 */
	@Column(name = "U_BYTE")
	def getUByte : UByte = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[UByte]
	}

	/**
	 * Setter for <code>TEST.T_UNSIGNED.U_SHORT</code>.
	 */
	def setUShort(value : UShort) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>TEST.T_UNSIGNED.U_SHORT</code>.
	 */
	@Column(name = "U_SHORT")
	def getUShort : UShort = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[UShort]
	}

	/**
	 * Setter for <code>TEST.T_UNSIGNED.U_INT</code>.
	 */
	def setUInt(value : UInteger) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>TEST.T_UNSIGNED.U_INT</code>.
	 */
	@Column(name = "U_INT")
	def getUInt : UInteger = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[UInteger]
	}

	/**
	 * Setter for <code>TEST.T_UNSIGNED.U_LONG</code>.
	 */
	def setULong(value : ULong) : Unit = {
		setValue(3, value)
	}

	/**
	 * Getter for <code>TEST.T_UNSIGNED.U_LONG</code>.
	 */
	@Column(name = "U_LONG")
	def getULong : ULong = {
		val r = getValue(3)
		if (r == null) null else r.asInstanceOf[ULong]
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row4[UByte, UShort, UInteger, ULong] = {
		super.fieldsRow.asInstanceOf[ Row4[UByte, UShort, UInteger, ULong] ]
	}

	override def valuesRow : Row4[UByte, UShort, UInteger, ULong] = {
		super.valuesRow.asInstanceOf[ Row4[UByte, UShort, UInteger, ULong] ]
	}
	override def field1 : Field[UByte] = TUnsigned.T_UNSIGNED.U_BYTE
	override def field2 : Field[UShort] = TUnsigned.T_UNSIGNED.U_SHORT
	override def field3 : Field[UInteger] = TUnsigned.T_UNSIGNED.U_INT
	override def field4 : Field[ULong] = TUnsigned.T_UNSIGNED.U_LONG
	override def value1 : UByte = getUByte
	override def value2 : UShort = getUShort
	override def value3 : UInteger = getUInt
	override def value4 : ULong = getULong

	override def value1(value : UByte) : TUnsignedRecord = {
		setUByte(value)
		this
	}

	override def value2(value : UShort) : TUnsignedRecord = {
		setUShort(value)
		this
	}

	override def value3(value : UInteger) : TUnsignedRecord = {
		setUInt(value)
		this
	}

	override def value4(value : ULong) : TUnsignedRecord = {
		setULong(value)
		this
	}

	override def values(value1 : UByte, value2 : UShort, value3 : UInteger, value4 : ULong) : TUnsignedRecord = {
		this
	}

	/**
	 * Create a detached, initialised TUnsignedRecord
	 */
	def this(uByte : UByte, uShort : UShort, uInt : UInteger, uLong : ULong) = {
		this()

		setValue(0, uByte)
		setValue(1, uShort)
		setValue(2, uInt)
		setValue(3, uLong)
	}
}
