/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.udt.records


import java.lang.Integer

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UDTRecordImpl
import org.jooq.test.oraclescala.generatedclasses.test.udt.UNested_3
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.UNested_2Record


/**
 * This class is generated by jOOQ.
 */
class UNested_3Record extends UDTRecordImpl[UNested_3Record](UNested_3.U_NESTED_3) with Record2[Integer, UNested_2Record] {

	/**
	 * Setter for <code>TEST.U_NESTED_3.ID</code>.
	 */
	def setId(value : Integer) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>TEST.U_NESTED_3.ID</code>.
	 */
	def getId : Integer = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>TEST.U_NESTED_3.NESTED</code>.
	 */
	def setNested(value : UNested_2Record) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>TEST.U_NESTED_3.NESTED</code>.
	 */
	def getNested : UNested_2Record = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[UNested_2Record]
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row2[Integer, UNested_2Record] = {
		super.fieldsRow.asInstanceOf[ Row2[Integer, UNested_2Record] ]
	}

	override def valuesRow : Row2[Integer, UNested_2Record] = {
		super.valuesRow.asInstanceOf[ Row2[Integer, UNested_2Record] ]
	}
	override def field1 : Field[Integer] = UNested_3.ID
	override def field2 : Field[UNested_2Record] = UNested_3.NESTED
	override def value1 : Integer = getId
	override def value2 : UNested_2Record = getNested

	override def value1(value : Integer) : UNested_3Record = {
		setId(value)
		this
	}

	override def value2(value : UNested_2Record) : UNested_3Record = {
		setNested(value)
		this
	}

	override def values(value1 : Integer, value2 : UNested_2Record) : UNested_3Record = {
		this
	}

	/**
	 * Create a detached, initialised UNested_3Record
	 */
	def this(id : Integer, nested : UNested_2Record) = {
		this()

		setValue(0, id)
		setValue(1, nested)
	}
}
