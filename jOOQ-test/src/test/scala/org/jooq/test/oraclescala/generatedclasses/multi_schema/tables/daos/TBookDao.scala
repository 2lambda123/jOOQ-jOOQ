/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.multi_schema.tables.daos


import java.lang.Integer
import java.lang.String
import java.util.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.jooq.test.oraclescala.generatedclasses.multi_schema.tables.TBook
import org.jooq.test.oraclescala.generatedclasses.multi_schema.tables.records.TBookRecord

import scala.Array


/**
 * This class is generated by jOOQ.
 */
class TBookDao(configuration : Configuration) extends DAOImpl[TBookRecord, org.jooq.test.oraclescala.generatedclasses.multi_schema.tables.pojos.TBook, Integer](TBook.T_BOOK, classOf[org.jooq.test.oraclescala.generatedclasses.multi_schema.tables.pojos.TBook], configuration) {

	/**
	 * Create a new TBookDao without any configuration
	 */
	def this() = {
		this(null)
	}

	override protected def getId(o : org.jooq.test.oraclescala.generatedclasses.multi_schema.tables.pojos.TBook) : Integer = {
		o.getId
	}

	/**
	 * Fetch records that have <code>ID IN (values)</code>
	 */
	def fetchById(values : Integer*) : List[org.jooq.test.oraclescala.generatedclasses.multi_schema.tables.pojos.TBook] = {
		fetch(TBook.T_BOOK.ID, values:_*)
	}

	/**
	 * Fetch a unique record that has <code>ID = value</code>
	 */
	def fetchOneById(value : Integer) : org.jooq.test.oraclescala.generatedclasses.multi_schema.tables.pojos.TBook = {
		fetchOne(TBook.T_BOOK.ID, value)
	}

	/**
	 * Fetch records that have <code>AUTHOR_ID IN (values)</code>
	 */
	def fetchByAuthorId(values : Integer*) : List[org.jooq.test.oraclescala.generatedclasses.multi_schema.tables.pojos.TBook] = {
		fetch(TBook.T_BOOK.AUTHOR_ID, values:_*)
	}

	/**
	 * Fetch records that have <code>CO_AUTHOR_ID IN (values)</code>
	 */
	def fetchByCoAuthorId(values : Integer*) : List[org.jooq.test.oraclescala.generatedclasses.multi_schema.tables.pojos.TBook] = {
		fetch(TBook.T_BOOK.CO_AUTHOR_ID, values:_*)
	}

	/**
	 * Fetch records that have <code>DETAILS_ID IN (values)</code>
	 */
	def fetchByDetailsId(values : Integer*) : List[org.jooq.test.oraclescala.generatedclasses.multi_schema.tables.pojos.TBook] = {
		fetch(TBook.T_BOOK.DETAILS_ID, values:_*)
	}

	/**
	 * Fetch records that have <code>TITLE IN (values)</code>
	 */
	def fetchByTitle(values : String*) : List[org.jooq.test.oraclescala.generatedclasses.multi_schema.tables.pojos.TBook] = {
		fetch(TBook.T_BOOK.TITLE, values:_*)
	}

	/**
	 * Fetch records that have <code>PUBLISHED_IN IN (values)</code>
	 */
	def fetchByPublishedIn(values : Integer*) : List[org.jooq.test.oraclescala.generatedclasses.multi_schema.tables.pojos.TBook] = {
		fetch(TBook.T_BOOK.PUBLISHED_IN, values:_*)
	}

	/**
	 * Fetch records that have <code>LANGUAGE_ID IN (values)</code>
	 */
	def fetchByLanguageId(values : Integer*) : List[org.jooq.test.oraclescala.generatedclasses.multi_schema.tables.pojos.TBook] = {
		fetch(TBook.T_BOOK.LANGUAGE_ID, values:_*)
	}

	/**
	 * Fetch records that have <code>CONTENT_TEXT IN (values)</code>
	 */
	def fetchByContentText(values : String*) : List[org.jooq.test.oraclescala.generatedclasses.multi_schema.tables.pojos.TBook] = {
		fetch(TBook.T_BOOK.CONTENT_TEXT, values:_*)
	}

	/**
	 * Fetch records that have <code>CONTENT_PDF IN (values)</code>
	 */
	def fetchByContentPdf(values : Array[scala.Byte]*) : List[org.jooq.test.oraclescala.generatedclasses.multi_schema.tables.pojos.TBook] = {
		fetch(TBook.T_BOOK.CONTENT_PDF, values:_*)
	}
}
