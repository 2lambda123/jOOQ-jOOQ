/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.pojos


import java.io.Serializable
import java.lang.Integer
import java.lang.String

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Table
import javax.persistence.UniqueConstraint
import javax.validation.constraints.NotNull
import javax.validation.constraints.Size

import org.jooq.test.all.scala.Test


/**
 * An m:n relation between books and book stores
 */
@Entity
@Table(name = "T_BOOK_TO_BOOK_STORE", schema = "TEST", uniqueConstraints = Array(
	new UniqueConstraint(columnNames = Array("BOOK_STORE_NAME", "BOOK_ID"))
))
class TBookToBookStore(
	  private var bookStoreName : String 
	, private var bookId : Integer
	, private var stock : Integer
) extends Test with Serializable {

	def this() = {
		this(null, null, null)
	}

	def this (value : TBookToBookStore) = {
		this(
			  value.bookStoreName
			, value.bookId
			, value.stock
		)
	}

	@Column(name = "BOOK_STORE_NAME", nullable = false, length = 400)
	@NotNull
	@Size(max = 400)
	def getBookStoreName : String = {
		this.bookStoreName
	}

	def setBookStoreName(bookStoreName : String) : Unit = {
		this.bookStoreName = bookStoreName
	}

	@Column(name = "BOOK_ID", nullable = false, precision = 7)
	@NotNull
	def getBookId : Integer = {
		this.bookId
	}

	def setBookId(bookId : Integer) : Unit = {
		this.bookId = bookId
	}

	@Column(name = "STOCK", precision = 7)
	def getStock : Integer = {
		this.stock
	}

	def setStock(stock : Integer) : Unit = {
		this.stock = stock
	}

	override def equals(obj : Any) : scala.Boolean = {
		if (this == obj)
			return true
		if (obj == null)
			return false
		if (getClass() != obj.getClass())
			return false
		val other = obj.asInstanceOf[TBookToBookStore]
		if (bookStoreName == null) {
			if (other.bookStoreName != null)
				return false
		}
		else if (!bookStoreName.equals(other.bookStoreName))
			return false
		if (bookId == null) {
			if (other.bookId != null)
				return false
		}
		else if (!bookId.equals(other.bookId))
			return false
		if (stock == null) {
			if (other.stock != null)
				return false
		}
		else if (!stock.equals(other.stock))
			return false
		return true
	}

	override def hashCode : Int = {
		val prime = 31
		var result = 1
		result = prime * result + (if (bookStoreName == null) 0 else bookStoreName.hashCode())
		result = prime * result + (if (bookId == null) 0 else bookId.hashCode())
		result = prime * result + (if (stock == null) 0 else stock.hashCode())
		return result
	}
}
