/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables


import java.lang.Class
import java.lang.Object
import java.lang.String

import org.jooq.Field
import org.jooq.Table
import org.jooq.TableField
import org.jooq.impl.TableImpl
import org.jooq.test.oraclescala.generatedclasses.test.Test
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.VIncompleteRecord


object VIncomplete {

	/**
	 * The reference instance of <code>TEST.V_INCOMPLETE</code>
	 */
	val V_INCOMPLETE = new VIncomplete
}

/**
 * This class is generated by jOOQ.
 */
class VIncomplete(alias : String, aliased : Table[VIncompleteRecord], parameters : Array[ Field[_] ]) extends TableImpl[VIncompleteRecord](alias, Test.TEST, aliased, parameters, "") {

	/**
	 * The class holding records for this type
	 */
	override def getRecordType : Class[VIncompleteRecord] = {
		classOf[VIncompleteRecord]
	}

	/**
	 * The column <code>TEST.V_INCOMPLETE.ID</code>.
	 */
	val ID : TableField[VIncompleteRecord, Object] = createField("ID", org.jooq.impl.DefaultDataType.getDefaultDataType("UNDEFINED"), "")

	/**
	 * The column <code>TEST.V_INCOMPLETE.AUTHOR_ID</code>.
	 */
	val AUTHOR_ID : TableField[VIncompleteRecord, Object] = createField("AUTHOR_ID", org.jooq.impl.DefaultDataType.getDefaultDataType("UNDEFINED"), "")

	/**
	 * The column <code>TEST.V_INCOMPLETE.CO_AUTHOR_ID</code>.
	 */
	val CO_AUTHOR_ID : TableField[VIncompleteRecord, Object] = createField("CO_AUTHOR_ID", org.jooq.impl.DefaultDataType.getDefaultDataType("UNDEFINED"), "")

	/**
	 * The column <code>TEST.V_INCOMPLETE.DETAILS_ID</code>.
	 */
	val DETAILS_ID : TableField[VIncompleteRecord, Object] = createField("DETAILS_ID", org.jooq.impl.DefaultDataType.getDefaultDataType("UNDEFINED"), "")

	/**
	 * The column <code>TEST.V_INCOMPLETE.TITLE</code>.
	 */
	val TITLE : TableField[VIncompleteRecord, Object] = createField("TITLE", org.jooq.impl.DefaultDataType.getDefaultDataType("UNDEFINED"), "")

	/**
	 * The column <code>TEST.V_INCOMPLETE.PUBLISHED_IN</code>.
	 */
	val PUBLISHED_IN : TableField[VIncompleteRecord, Object] = createField("PUBLISHED_IN", org.jooq.impl.DefaultDataType.getDefaultDataType("UNDEFINED"), "")

	/**
	 * The column <code>TEST.V_INCOMPLETE.LANGUAGE_ID</code>.
	 */
	val LANGUAGE_ID : TableField[VIncompleteRecord, Object] = createField("LANGUAGE_ID", org.jooq.impl.DefaultDataType.getDefaultDataType("UNDEFINED"), "")

	/**
	 * The column <code>TEST.V_INCOMPLETE.CONTENT_TEXT</code>.
	 */
	val CONTENT_TEXT : TableField[VIncompleteRecord, Object] = createField("CONTENT_TEXT", org.jooq.impl.DefaultDataType.getDefaultDataType("UNDEFINED"), "")

	/**
	 * The column <code>TEST.V_INCOMPLETE.CONTENT_PDF</code>.
	 */
	val CONTENT_PDF : TableField[VIncompleteRecord, Object] = createField("CONTENT_PDF", org.jooq.impl.DefaultDataType.getDefaultDataType("UNDEFINED"), "")

	/**
	 * The column <code>TEST.V_INCOMPLETE.REC_VERSION</code>.
	 */
	val REC_VERSION : TableField[VIncompleteRecord, Object] = createField("REC_VERSION", org.jooq.impl.DefaultDataType.getDefaultDataType("UNDEFINED"), "")

	/**
	 * The column <code>TEST.V_INCOMPLETE.REC_TIMESTAMP</code>.
	 */
	val REC_TIMESTAMP : TableField[VIncompleteRecord, Object] = createField("REC_TIMESTAMP", org.jooq.impl.DefaultDataType.getDefaultDataType("UNDEFINED"), "")

	/**
	 * Create a <code>TEST.V_INCOMPLETE</code> table reference
	 */
	def this() = {
		this("V_INCOMPLETE", null, null)
	}

	/**
	 * Create an aliased <code>TEST.V_INCOMPLETE</code> table reference
	 */
	def this(alias : String) = {
		this(alias, org.jooq.test.oraclescala.generatedclasses.test.tables.VIncomplete.V_INCOMPLETE, null)
	}

	private def this(alias : String, aliased : Table[VIncompleteRecord]) = {
		this(alias, aliased, null)
	}

	override def as(alias : String) : VIncomplete = {
		new VIncomplete(alias, this)
	}

	/**
	 * Rename this table
	 */
	def rename(name : String) : VIncomplete = {
		new VIncomplete(name, null)
	}
}
