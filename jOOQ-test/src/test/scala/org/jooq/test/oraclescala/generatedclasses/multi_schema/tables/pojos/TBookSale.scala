/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.multi_schema.tables.pojos


import java.io.Serializable
import java.lang.Integer
import java.lang.String
import java.lang.StringBuilder
import java.math.BigDecimal
import java.sql.Date

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Id
import javax.persistence.Table
import javax.validation.constraints.NotNull
import javax.validation.constraints.Size

import org.jooq.test.all.scala.Test


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_BOOK_SALE", schema = "MULTI_SCHEMA")
class TBookSale(
	  private var id : Integer   
	, private var bookId : Integer   
	, private var bookStoreName : String    
	, private var soldAt : Date      
	, private var soldFor : BigDecimal
) extends Test with Serializable {

	def this() = {
		this(null, null, null, null, null)
	}

	def this (value : TBookSale) = {
		this(
			  value.id
			, value.bookId
			, value.bookStoreName
			, value.soldAt
			, value.soldFor
		)
	}

	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 7)
	@NotNull
	def getId : Integer = {
		this.id
	}

	def setId(id : Integer) : Unit = {
		this.id = id
	}

	@Column(name = "BOOK_ID", nullable = false, precision = 7)
	@NotNull
	def getBookId : Integer = {
		this.bookId
	}

	def setBookId(bookId : Integer) : Unit = {
		this.bookId = bookId
	}

	@Column(name = "BOOK_STORE_NAME", nullable = false, length = 400)
	@NotNull
	@Size(max = 400)
	def getBookStoreName : String = {
		this.bookStoreName
	}

	def setBookStoreName(bookStoreName : String) : Unit = {
		this.bookStoreName = bookStoreName
	}

	@Column(name = "SOLD_AT", nullable = false)
	@NotNull
	def getSoldAt : Date = {
		this.soldAt
	}

	def setSoldAt(soldAt : Date) : Unit = {
		this.soldAt = soldAt
	}

	@Column(name = "SOLD_FOR", nullable = false, precision = 10, scale = 2)
	@NotNull
	def getSoldFor : BigDecimal = {
		this.soldFor
	}

	def setSoldFor(soldFor : BigDecimal) : Unit = {
		this.soldFor = soldFor
	}

	override def equals(obj : Any) : scala.Boolean = {
		if (this == obj)
			return true
		if (obj == null)
			return false
		if (getClass() != obj.getClass())
			return false
		val other = obj.asInstanceOf[TBookSale]
		if (id == null) {
			if (other.id != null)
				return false
		}
		else if (!id.equals(other.id))
			return false
		if (bookId == null) {
			if (other.bookId != null)
				return false
		}
		else if (!bookId.equals(other.bookId))
			return false
		if (bookStoreName == null) {
			if (other.bookStoreName != null)
				return false
		}
		else if (!bookStoreName.equals(other.bookStoreName))
			return false
		if (soldAt == null) {
			if (other.soldAt != null)
				return false
		}
		else if (!soldAt.equals(other.soldAt))
			return false
		if (soldFor == null) {
			if (other.soldFor != null)
				return false
		}
		else if (!soldFor.equals(other.soldFor))
			return false
		return true
	}

	override def hashCode : Int = {
		val prime = 31
		var result = 1
		result = prime * result + (if (id == null) 0 else id.hashCode())
		result = prime * result + (if (bookId == null) 0 else bookId.hashCode())
		result = prime * result + (if (bookStoreName == null) 0 else bookStoreName.hashCode())
		result = prime * result + (if (soldAt == null) 0 else soldAt.hashCode())
		result = prime * result + (if (soldFor == null) 0 else soldFor.hashCode())
		return result
	}

	override def toString : String = {
		val sb = new StringBuilder("TBookSale (")

		sb.append(id)
		sb.append(", ").append(bookId)
		sb.append(", ").append(bookStoreName)
		sb.append(", ").append(soldAt)
		sb.append(", ").append(soldFor)

		sb.append(")");
		return sb.toString
	}
}
