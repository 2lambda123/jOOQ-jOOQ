/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.util.Arrays
import java.util.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl
import org.jooq.test.oraclescala.generatedclasses.test.Keys
import org.jooq.test.oraclescala.generatedclasses.test.Test
import org.jooq.test.oraclescala.generatedclasses.test.tables.TDirectory
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.TDirectoryRecord


object TDirectory {

	/**
	 * The reference instance of <code>TEST.T_DIRECTORY</code>
	 */
	val T_DIRECTORY = new TDirectory
}

/**
 * This class is generated by jOOQ.
 */
class TDirectory(alias : String, aliased : Table[TDirectoryRecord], parameters : Array[ Field[_] ]) extends TableImpl[TDirectoryRecord](alias, Test.TEST, aliased, parameters, "") {

	/**
	 * The class holding records for this type
	 */
	override def getRecordType : Class[TDirectoryRecord] = {
		classOf[TDirectoryRecord]
	}

	/**
	 * The column <code>TEST.T_DIRECTORY.ID</code>.
	 */
	val ID : TableField[TDirectoryRecord, Integer] = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

	/**
	 * The column <code>TEST.T_DIRECTORY.PARENT_ID</code>.
	 */
	val PARENT_ID : TableField[TDirectoryRecord, Integer] = createField("PARENT_ID", org.jooq.impl.SQLDataType.INTEGER, "")

	/**
	 * The column <code>TEST.T_DIRECTORY.IS_DIRECTORY</code>.
	 */
	val IS_DIRECTORY : TableField[TDirectoryRecord, Integer] = createField("IS_DIRECTORY", org.jooq.impl.SQLDataType.INTEGER, "")

	/**
	 * The column <code>TEST.T_DIRECTORY.name</code>.
	 */
	val NAME : TableField[TDirectoryRecord, String] = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(50), "")

	/**
	 * Create a <code>TEST.T_DIRECTORY</code> table reference
	 */
	def this() = {
		this("T_DIRECTORY", null, null)
	}

	/**
	 * Create an aliased <code>TEST.T_DIRECTORY</code> table reference
	 */
	def this(alias : String) = {
		this(alias, TDirectory.T_DIRECTORY, null)
	}

	private def this(alias : String, aliased : Table[TDirectoryRecord]) = {
		this(alias, aliased, null)
	}

	override def getPrimaryKey : UniqueKey[TDirectoryRecord] = {
		Keys.PK_T_DIRECTORY
	}

	override def getKeys : List[ UniqueKey[TDirectoryRecord] ] = {
		return Arrays.asList[ UniqueKey[TDirectoryRecord] ](Keys.PK_T_DIRECTORY)
	}

	override def getReferences : List[ ForeignKey[TDirectoryRecord, _] ] = {
		return Arrays.asList[ ForeignKey[TDirectoryRecord, _] ](Keys.PK_T_DIRECTORY_SELF)
	}

	override def as(alias : String) : TDirectory = {
		new TDirectory(alias, this)
	}

	/**
	 * Rename this table
	 */
	def rename(name : String) : TDirectory = {
		new TDirectory(name, null)
	}
}
