/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.pojos


import java.io.Serializable
import java.lang.Integer
import java.lang.String
import java.lang.StringBuilder

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Id
import javax.persistence.Table
import javax.validation.constraints.NotNull

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_725_LOB_TEST", schema = "TEST")
class T_725LobTest(
	  private var id : Integer          
	, private var lob : Array[scala.Byte]
	, private var userJavaSqlClob : String           
	, private var userJavaSqlBlob : Array[scala.Byte]
	, private var jooqJavaSqlClob : String           
	, private var jooqJavaSqlBlob : Array[scala.Byte]
) extends Serializable {

	def this() = {
		this(null, null, null, null, null, null)
	}

	def this (value : T_725LobTest) = {
		this(
			  value.id
			, value.lob
			, value.userJavaSqlClob
			, value.userJavaSqlBlob
			, value.jooqJavaSqlClob
			, value.jooqJavaSqlBlob
		)
	}

	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 7)
	@NotNull
	def getId : Integer = {
		this.id
	}

	def setId(id : Integer) : Unit = {
		this.id = id
	}

	@Column(name = "LOB")
	def getLob : Array[scala.Byte] = {
		this.lob
	}

	def setLob(lob : Array[scala.Byte]) : Unit = {
		this.lob = lob
	}

	@Column(name = "USER_JAVA_SQL_CLOB")
	def getUserJavaSqlClob : String = {
		this.userJavaSqlClob
	}

	def setUserJavaSqlClob(userJavaSqlClob : String) : Unit = {
		this.userJavaSqlClob = userJavaSqlClob
	}

	@Column(name = "USER_JAVA_SQL_BLOB")
	def getUserJavaSqlBlob : Array[scala.Byte] = {
		this.userJavaSqlBlob
	}

	def setUserJavaSqlBlob(userJavaSqlBlob : Array[scala.Byte]) : Unit = {
		this.userJavaSqlBlob = userJavaSqlBlob
	}

	@Column(name = "JOOQ_JAVA_SQL_CLOB")
	def getJooqJavaSqlClob : String = {
		this.jooqJavaSqlClob
	}

	def setJooqJavaSqlClob(jooqJavaSqlClob : String) : Unit = {
		this.jooqJavaSqlClob = jooqJavaSqlClob
	}

	@Column(name = "JOOQ_JAVA_SQL_BLOB")
	def getJooqJavaSqlBlob : Array[scala.Byte] = {
		this.jooqJavaSqlBlob
	}

	def setJooqJavaSqlBlob(jooqJavaSqlBlob : Array[scala.Byte]) : Unit = {
		this.jooqJavaSqlBlob = jooqJavaSqlBlob
	}

	override def equals(obj : Any) : scala.Boolean = {
		if (this == obj)
			return true
		if (obj == null)
			return false
		if (getClass() != obj.getClass())
			return false
		val other = obj.asInstanceOf[T_725LobTest]
		if (id == null) {
			if (other.id != null)
				return false
		}
		else if (!id.equals(other.id))
			return false
		if (lob == null) {
			if (other.lob != null)
				return false
		}
		else if (!lob.equals(other.lob))
			return false
		if (userJavaSqlClob == null) {
			if (other.userJavaSqlClob != null)
				return false
		}
		else if (!userJavaSqlClob.equals(other.userJavaSqlClob))
			return false
		if (userJavaSqlBlob == null) {
			if (other.userJavaSqlBlob != null)
				return false
		}
		else if (!userJavaSqlBlob.equals(other.userJavaSqlBlob))
			return false
		if (jooqJavaSqlClob == null) {
			if (other.jooqJavaSqlClob != null)
				return false
		}
		else if (!jooqJavaSqlClob.equals(other.jooqJavaSqlClob))
			return false
		if (jooqJavaSqlBlob == null) {
			if (other.jooqJavaSqlBlob != null)
				return false
		}
		else if (!jooqJavaSqlBlob.equals(other.jooqJavaSqlBlob))
			return false
		return true
	}

	override def hashCode : Int = {
		val prime = 31
		var result = 1
		result = prime * result + (if (id == null) 0 else id.hashCode())
		result = prime * result + (if (lob == null) 0 else lob.hashCode())
		result = prime * result + (if (userJavaSqlClob == null) 0 else userJavaSqlClob.hashCode())
		result = prime * result + (if (userJavaSqlBlob == null) 0 else userJavaSqlBlob.hashCode())
		result = prime * result + (if (jooqJavaSqlClob == null) 0 else jooqJavaSqlClob.hashCode())
		result = prime * result + (if (jooqJavaSqlBlob == null) 0 else jooqJavaSqlBlob.hashCode())
		return result
	}

	override def toString : String = {
		val sb = new StringBuilder("T_725LobTest (")

		sb.append(id)
		sb.append(", ").append(lob)
		sb.append(", ").append(userJavaSqlClob)
		sb.append(", ").append(userJavaSqlBlob)
		sb.append(", ").append(jooqJavaSqlClob)
		sb.append(", ").append(jooqJavaSqlBlob)

		sb.append(")");
		return sb.toString
	}
}
