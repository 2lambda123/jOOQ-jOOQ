/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.pojos


import java.io.Serializable
import java.math.BigDecimal

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Table


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_RESERVED", schema = "TEST")
class TReserved(
	  private var `abstract` : BigDecimal
	, private var `case` : BigDecimal
	, private var `catch` : BigDecimal
	, private var `class` : BigDecimal
	, private var `def` : BigDecimal
	, private var `do` : BigDecimal
	, private var `else` : BigDecimal
	, private var `extends` : BigDecimal
	, private var `false` : BigDecimal
	, private var `final` : BigDecimal
	, private var `finally` : BigDecimal
	, private var `for` : BigDecimal
	, private var forsome : BigDecimal
	, private var `if` : BigDecimal
	, private var `implicit` : BigDecimal
	, private var `import` : BigDecimal
	, private var `lazy` : BigDecimal
	, private var `match` : BigDecimal
	, private var `new` : BigDecimal
	, private var `null` : BigDecimal
	, private var `object` : BigDecimal
	, private var `override` : BigDecimal
	, private var `package` : BigDecimal
	, private var `private` : BigDecimal
	, private var `protected` : BigDecimal
	, private var `return` : BigDecimal
	, private var `sealed` : BigDecimal
	, private var `super` : BigDecimal
	, private var `this` : BigDecimal
	, private var `throw` : BigDecimal
	, private var `trait` : BigDecimal
	, private var `try` : BigDecimal
	, private var `true` : BigDecimal
	, private var `type` : BigDecimal
	, private var `val` : BigDecimal
	, private var `var` : BigDecimal
	, private var `while` : BigDecimal
	, private var `with` : BigDecimal
	, private var `yield` : BigDecimal
) extends Serializable {

	def this() = {
		this(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)
	}

	def this (value : TReserved) = {
		this(
			  value.`abstract`
			, value.`case`
			, value.`catch`
			, value.`class`
			, value.`def`
			, value.`do`
			, value.`else`
			, value.`extends`
			, value.`false`
			, value.`final`
			, value.`finally`
			, value.`for`
			, value.forsome
			, value.`if`
			, value.`implicit`
			, value.`import`
			, value.`lazy`
			, value.`match`
			, value.`new`
			, value.`null`
			, value.`object`
			, value.`override`
			, value.`package`
			, value.`private`
			, value.`protected`
			, value.`return`
			, value.`sealed`
			, value.`super`
			, value.`this`
			, value.`throw`
			, value.`trait`
			, value.`try`
			, value.`true`
			, value.`type`
			, value.`val`
			, value.`var`
			, value.`while`
			, value.`with`
			, value.`yield`
		)
	}

	@Column(name = "abstract")
	def getAbstract : BigDecimal = {
		this.`abstract`
	}

	def setAbstract(`abstract` : BigDecimal) : Unit = {
		this.`abstract` = `abstract`
	}

	@Column(name = "case")
	def getCase : BigDecimal = {
		this.`case`
	}

	def setCase(`case` : BigDecimal) : Unit = {
		this.`case` = `case`
	}

	@Column(name = "catch")
	def getCatch : BigDecimal = {
		this.`catch`
	}

	def setCatch(`catch` : BigDecimal) : Unit = {
		this.`catch` = `catch`
	}

	@Column(name = "class")
	def getClass_ : BigDecimal = {
		this.`class`
	}

	def setClass_(`class` : BigDecimal) : Unit = {
		this.`class` = `class`
	}

	@Column(name = "def")
	def getDef : BigDecimal = {
		this.`def`
	}

	def setDef(`def` : BigDecimal) : Unit = {
		this.`def` = `def`
	}

	@Column(name = "do")
	def getDo : BigDecimal = {
		this.`do`
	}

	def setDo(`do` : BigDecimal) : Unit = {
		this.`do` = `do`
	}

	@Column(name = "else")
	def getElse : BigDecimal = {
		this.`else`
	}

	def setElse(`else` : BigDecimal) : Unit = {
		this.`else` = `else`
	}

	@Column(name = "extends")
	def getExtends : BigDecimal = {
		this.`extends`
	}

	def setExtends(`extends` : BigDecimal) : Unit = {
		this.`extends` = `extends`
	}

	@Column(name = "false")
	def getFalse : BigDecimal = {
		this.`false`
	}

	def setFalse(`false` : BigDecimal) : Unit = {
		this.`false` = `false`
	}

	@Column(name = "final")
	def getFinal : BigDecimal = {
		this.`final`
	}

	def setFinal(`final` : BigDecimal) : Unit = {
		this.`final` = `final`
	}

	@Column(name = "finally")
	def getFinally : BigDecimal = {
		this.`finally`
	}

	def setFinally(`finally` : BigDecimal) : Unit = {
		this.`finally` = `finally`
	}

	@Column(name = "for")
	def getFor : BigDecimal = {
		this.`for`
	}

	def setFor(`for` : BigDecimal) : Unit = {
		this.`for` = `for`
	}

	@Column(name = "forSome")
	def getForsome : BigDecimal = {
		this.forsome
	}

	def setForsome(forsome : BigDecimal) : Unit = {
		this.forsome = forsome
	}

	@Column(name = "if")
	def getIf : BigDecimal = {
		this.`if`
	}

	def setIf(`if` : BigDecimal) : Unit = {
		this.`if` = `if`
	}

	@Column(name = "implicit")
	def getImplicit : BigDecimal = {
		this.`implicit`
	}

	def setImplicit(`implicit` : BigDecimal) : Unit = {
		this.`implicit` = `implicit`
	}

	@Column(name = "import")
	def getImport : BigDecimal = {
		this.`import`
	}

	def setImport(`import` : BigDecimal) : Unit = {
		this.`import` = `import`
	}

	@Column(name = "lazy")
	def getLazy : BigDecimal = {
		this.`lazy`
	}

	def setLazy(`lazy` : BigDecimal) : Unit = {
		this.`lazy` = `lazy`
	}

	@Column(name = "match")
	def getMatch : BigDecimal = {
		this.`match`
	}

	def setMatch(`match` : BigDecimal) : Unit = {
		this.`match` = `match`
	}

	@Column(name = "new")
	def getNew : BigDecimal = {
		this.`new`
	}

	def setNew(`new` : BigDecimal) : Unit = {
		this.`new` = `new`
	}

	@Column(name = "null")
	def getNull : BigDecimal = {
		this.`null`
	}

	def setNull(`null` : BigDecimal) : Unit = {
		this.`null` = `null`
	}

	@Column(name = "object")
	def getObject : BigDecimal = {
		this.`object`
	}

	def setObject(`object` : BigDecimal) : Unit = {
		this.`object` = `object`
	}

	@Column(name = "override")
	def getOverride : BigDecimal = {
		this.`override`
	}

	def setOverride(`override` : BigDecimal) : Unit = {
		this.`override` = `override`
	}

	@Column(name = "package")
	def getPackage : BigDecimal = {
		this.`package`
	}

	def setPackage(`package` : BigDecimal) : Unit = {
		this.`package` = `package`
	}

	@Column(name = "private")
	def getPrivate : BigDecimal = {
		this.`private`
	}

	def setPrivate(`private` : BigDecimal) : Unit = {
		this.`private` = `private`
	}

	@Column(name = "protected")
	def getProtected : BigDecimal = {
		this.`protected`
	}

	def setProtected(`protected` : BigDecimal) : Unit = {
		this.`protected` = `protected`
	}

	@Column(name = "return")
	def getReturn : BigDecimal = {
		this.`return`
	}

	def setReturn(`return` : BigDecimal) : Unit = {
		this.`return` = `return`
	}

	@Column(name = "sealed")
	def getSealed : BigDecimal = {
		this.`sealed`
	}

	def setSealed(`sealed` : BigDecimal) : Unit = {
		this.`sealed` = `sealed`
	}

	@Column(name = "super")
	def getSuper : BigDecimal = {
		this.`super`
	}

	def setSuper(`super` : BigDecimal) : Unit = {
		this.`super` = `super`
	}

	@Column(name = "this")
	def getThis : BigDecimal = {
		this.`this`
	}

	def setThis(`this` : BigDecimal) : Unit = {
		this.`this` = `this`
	}

	@Column(name = "throw")
	def getThrow : BigDecimal = {
		this.`throw`
	}

	def setThrow(`throw` : BigDecimal) : Unit = {
		this.`throw` = `throw`
	}

	@Column(name = "trait")
	def getTrait : BigDecimal = {
		this.`trait`
	}

	def setTrait(`trait` : BigDecimal) : Unit = {
		this.`trait` = `trait`
	}

	@Column(name = "try")
	def getTry : BigDecimal = {
		this.`try`
	}

	def setTry(`try` : BigDecimal) : Unit = {
		this.`try` = `try`
	}

	@Column(name = "true")
	def getTrue : BigDecimal = {
		this.`true`
	}

	def setTrue(`true` : BigDecimal) : Unit = {
		this.`true` = `true`
	}

	@Column(name = "type")
	def getType : BigDecimal = {
		this.`type`
	}

	def setType(`type` : BigDecimal) : Unit = {
		this.`type` = `type`
	}

	@Column(name = "val")
	def getVal : BigDecimal = {
		this.`val`
	}

	def setVal(`val` : BigDecimal) : Unit = {
		this.`val` = `val`
	}

	@Column(name = "var")
	def getVar : BigDecimal = {
		this.`var`
	}

	def setVar(`var` : BigDecimal) : Unit = {
		this.`var` = `var`
	}

	@Column(name = "while")
	def getWhile : BigDecimal = {
		this.`while`
	}

	def setWhile(`while` : BigDecimal) : Unit = {
		this.`while` = `while`
	}

	@Column(name = "with")
	def getWith : BigDecimal = {
		this.`with`
	}

	def setWith(`with` : BigDecimal) : Unit = {
		this.`with` = `with`
	}

	@Column(name = "yield")
	def getYield : BigDecimal = {
		this.`yield`
	}

	def setYield(`yield` : BigDecimal) : Unit = {
		this.`yield` = `yield`
	}

	override def equals(obj : Any) : scala.Boolean = {
		if (this == obj)
			return true
		if (obj == null)
			return false
		if (getClass() != obj.getClass())
			return false
		val other = obj.asInstanceOf[TReserved]
		if (`abstract` == null) {
			if (other.`abstract` != null)
				return false
		}
		else if (!`abstract`.equals(other.`abstract`))
			return false
		if (`case` == null) {
			if (other.`case` != null)
				return false
		}
		else if (!`case`.equals(other.`case`))
			return false
		if (`catch` == null) {
			if (other.`catch` != null)
				return false
		}
		else if (!`catch`.equals(other.`catch`))
			return false
		if (`class` == null) {
			if (other.`class` != null)
				return false
		}
		else if (!`class`.equals(other.`class`))
			return false
		if (`def` == null) {
			if (other.`def` != null)
				return false
		}
		else if (!`def`.equals(other.`def`))
			return false
		if (`do` == null) {
			if (other.`do` != null)
				return false
		}
		else if (!`do`.equals(other.`do`))
			return false
		if (`else` == null) {
			if (other.`else` != null)
				return false
		}
		else if (!`else`.equals(other.`else`))
			return false
		if (`extends` == null) {
			if (other.`extends` != null)
				return false
		}
		else if (!`extends`.equals(other.`extends`))
			return false
		if (`false` == null) {
			if (other.`false` != null)
				return false
		}
		else if (!`false`.equals(other.`false`))
			return false
		if (`final` == null) {
			if (other.`final` != null)
				return false
		}
		else if (!`final`.equals(other.`final`))
			return false
		if (`finally` == null) {
			if (other.`finally` != null)
				return false
		}
		else if (!`finally`.equals(other.`finally`))
			return false
		if (`for` == null) {
			if (other.`for` != null)
				return false
		}
		else if (!`for`.equals(other.`for`))
			return false
		if (forsome == null) {
			if (other.forsome != null)
				return false
		}
		else if (!forsome.equals(other.forsome))
			return false
		if (`if` == null) {
			if (other.`if` != null)
				return false
		}
		else if (!`if`.equals(other.`if`))
			return false
		if (`implicit` == null) {
			if (other.`implicit` != null)
				return false
		}
		else if (!`implicit`.equals(other.`implicit`))
			return false
		if (`import` == null) {
			if (other.`import` != null)
				return false
		}
		else if (!`import`.equals(other.`import`))
			return false
		if (`lazy` == null) {
			if (other.`lazy` != null)
				return false
		}
		else if (!`lazy`.equals(other.`lazy`))
			return false
		if (`match` == null) {
			if (other.`match` != null)
				return false
		}
		else if (!`match`.equals(other.`match`))
			return false
		if (`new` == null) {
			if (other.`new` != null)
				return false
		}
		else if (!`new`.equals(other.`new`))
			return false
		if (`null` == null) {
			if (other.`null` != null)
				return false
		}
		else if (!`null`.equals(other.`null`))
			return false
		if (`object` == null) {
			if (other.`object` != null)
				return false
		}
		else if (!`object`.equals(other.`object`))
			return false
		if (`override` == null) {
			if (other.`override` != null)
				return false
		}
		else if (!`override`.equals(other.`override`))
			return false
		if (`package` == null) {
			if (other.`package` != null)
				return false
		}
		else if (!`package`.equals(other.`package`))
			return false
		if (`private` == null) {
			if (other.`private` != null)
				return false
		}
		else if (!`private`.equals(other.`private`))
			return false
		if (`protected` == null) {
			if (other.`protected` != null)
				return false
		}
		else if (!`protected`.equals(other.`protected`))
			return false
		if (`return` == null) {
			if (other.`return` != null)
				return false
		}
		else if (!`return`.equals(other.`return`))
			return false
		if (`sealed` == null) {
			if (other.`sealed` != null)
				return false
		}
		else if (!`sealed`.equals(other.`sealed`))
			return false
		if (`super` == null) {
			if (other.`super` != null)
				return false
		}
		else if (!`super`.equals(other.`super`))
			return false
		if (`this` == null) {
			if (other.`this` != null)
				return false
		}
		else if (!`this`.equals(other.`this`))
			return false
		if (`throw` == null) {
			if (other.`throw` != null)
				return false
		}
		else if (!`throw`.equals(other.`throw`))
			return false
		if (`trait` == null) {
			if (other.`trait` != null)
				return false
		}
		else if (!`trait`.equals(other.`trait`))
			return false
		if (`try` == null) {
			if (other.`try` != null)
				return false
		}
		else if (!`try`.equals(other.`try`))
			return false
		if (`true` == null) {
			if (other.`true` != null)
				return false
		}
		else if (!`true`.equals(other.`true`))
			return false
		if (`type` == null) {
			if (other.`type` != null)
				return false
		}
		else if (!`type`.equals(other.`type`))
			return false
		if (`val` == null) {
			if (other.`val` != null)
				return false
		}
		else if (!`val`.equals(other.`val`))
			return false
		if (`var` == null) {
			if (other.`var` != null)
				return false
		}
		else if (!`var`.equals(other.`var`))
			return false
		if (`while` == null) {
			if (other.`while` != null)
				return false
		}
		else if (!`while`.equals(other.`while`))
			return false
		if (`with` == null) {
			if (other.`with` != null)
				return false
		}
		else if (!`with`.equals(other.`with`))
			return false
		if (`yield` == null) {
			if (other.`yield` != null)
				return false
		}
		else if (!`yield`.equals(other.`yield`))
			return false
		return true
	}

	override def hashCode : Int = {
		val prime = 31
		var result = 1
		result = prime * result + (if (`abstract` == null) 0 else `abstract`.hashCode())
		result = prime * result + (if (`case` == null) 0 else `case`.hashCode())
		result = prime * result + (if (`catch` == null) 0 else `catch`.hashCode())
		result = prime * result + (if (`class` == null) 0 else `class`.hashCode())
		result = prime * result + (if (`def` == null) 0 else `def`.hashCode())
		result = prime * result + (if (`do` == null) 0 else `do`.hashCode())
		result = prime * result + (if (`else` == null) 0 else `else`.hashCode())
		result = prime * result + (if (`extends` == null) 0 else `extends`.hashCode())
		result = prime * result + (if (`false` == null) 0 else `false`.hashCode())
		result = prime * result + (if (`final` == null) 0 else `final`.hashCode())
		result = prime * result + (if (`finally` == null) 0 else `finally`.hashCode())
		result = prime * result + (if (`for` == null) 0 else `for`.hashCode())
		result = prime * result + (if (forsome == null) 0 else forsome.hashCode())
		result = prime * result + (if (`if` == null) 0 else `if`.hashCode())
		result = prime * result + (if (`implicit` == null) 0 else `implicit`.hashCode())
		result = prime * result + (if (`import` == null) 0 else `import`.hashCode())
		result = prime * result + (if (`lazy` == null) 0 else `lazy`.hashCode())
		result = prime * result + (if (`match` == null) 0 else `match`.hashCode())
		result = prime * result + (if (`new` == null) 0 else `new`.hashCode())
		result = prime * result + (if (`null` == null) 0 else `null`.hashCode())
		result = prime * result + (if (`object` == null) 0 else `object`.hashCode())
		result = prime * result + (if (`override` == null) 0 else `override`.hashCode())
		result = prime * result + (if (`package` == null) 0 else `package`.hashCode())
		result = prime * result + (if (`private` == null) 0 else `private`.hashCode())
		result = prime * result + (if (`protected` == null) 0 else `protected`.hashCode())
		result = prime * result + (if (`return` == null) 0 else `return`.hashCode())
		result = prime * result + (if (`sealed` == null) 0 else `sealed`.hashCode())
		result = prime * result + (if (`super` == null) 0 else `super`.hashCode())
		result = prime * result + (if (`this` == null) 0 else `this`.hashCode())
		result = prime * result + (if (`throw` == null) 0 else `throw`.hashCode())
		result = prime * result + (if (`trait` == null) 0 else `trait`.hashCode())
		result = prime * result + (if (`try` == null) 0 else `try`.hashCode())
		result = prime * result + (if (`true` == null) 0 else `true`.hashCode())
		result = prime * result + (if (`type` == null) 0 else `type`.hashCode())
		result = prime * result + (if (`val` == null) 0 else `val`.hashCode())
		result = prime * result + (if (`var` == null) 0 else `var`.hashCode())
		result = prime * result + (if (`while` == null) 0 else `while`.hashCode())
		result = prime * result + (if (`with` == null) 0 else `with`.hashCode())
		result = prime * result + (if (`yield` == null) 0 else `yield`.hashCode())
		return result
	}
}
