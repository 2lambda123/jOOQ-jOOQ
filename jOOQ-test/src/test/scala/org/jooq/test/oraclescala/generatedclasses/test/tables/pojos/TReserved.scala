/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.pojos


import java.io.Serializable
import java.math.BigDecimal

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Table


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_RESERVED", schema = "TEST")
class TReserved(
	  private var abstract_ : BigDecimal
	, private var case_ : BigDecimal
	, private var catch_ : BigDecimal
	, private var class_ : BigDecimal
	, private var def_ : BigDecimal
	, private var do_ : BigDecimal
	, private var else_ : BigDecimal
	, private var extends_ : BigDecimal
	, private var false_ : BigDecimal
	, private var final_ : BigDecimal
	, private var finally_ : BigDecimal
	, private var for_ : BigDecimal
	, private var forsome : BigDecimal
	, private var if_ : BigDecimal
	, private var implicit_ : BigDecimal
	, private var import_ : BigDecimal
	, private var lazy_ : BigDecimal
	, private var match_ : BigDecimal
	, private var new_ : BigDecimal
	, private var null_ : BigDecimal
	, private var object_ : BigDecimal
	, private var override_ : BigDecimal
	, private var package_ : BigDecimal
	, private var private_ : BigDecimal
	, private var protected_ : BigDecimal
	, private var return_ : BigDecimal
	, private var sealed_ : BigDecimal
	, private var super_ : BigDecimal
	, private var this_ : BigDecimal
	, private var throw_ : BigDecimal
	, private var trait_ : BigDecimal
	, private var try_ : BigDecimal
	, private var true_ : BigDecimal
	, private var type_ : BigDecimal
	, private var val_ : BigDecimal
	, private var var_ : BigDecimal
	, private var while_ : BigDecimal
	, private var with_ : BigDecimal
	, private var yield_ : BigDecimal
) extends Serializable {

	def this() = {
		this(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)
	}

	def this (value : TReserved) = {
		this(
			  value.abstract_
			, value.case_
			, value.catch_
			, value.class_
			, value.def_
			, value.do_
			, value.else_
			, value.extends_
			, value.false_
			, value.final_
			, value.finally_
			, value.for_
			, value.forsome
			, value.if_
			, value.implicit_
			, value.import_
			, value.lazy_
			, value.match_
			, value.new_
			, value.null_
			, value.object_
			, value.override_
			, value.package_
			, value.private_
			, value.protected_
			, value.return_
			, value.sealed_
			, value.super_
			, value.this_
			, value.throw_
			, value.trait_
			, value.try_
			, value.true_
			, value.type_
			, value.val_
			, value.var_
			, value.while_
			, value.with_
			, value.yield_
		)
	}

	@Column(name = "abstract")
	def getAbstract : BigDecimal = {
		this.abstract_
	}

	def setAbstract(abstract_ : BigDecimal) : Unit = {
		this.abstract_ = abstract_
	}

	@Column(name = "case")
	def getCase : BigDecimal = {
		this.case_
	}

	def setCase(case_ : BigDecimal) : Unit = {
		this.case_ = case_
	}

	@Column(name = "catch")
	def getCatch : BigDecimal = {
		this.catch_
	}

	def setCatch(catch_ : BigDecimal) : Unit = {
		this.catch_ = catch_
	}

	@Column(name = "class")
	def getClass_ : BigDecimal = {
		this.class_
	}

	def setClass_(class_ : BigDecimal) : Unit = {
		this.class_ = class_
	}

	@Column(name = "def")
	def getDef : BigDecimal = {
		this.def_
	}

	def setDef(def_ : BigDecimal) : Unit = {
		this.def_ = def_
	}

	@Column(name = "do")
	def getDo : BigDecimal = {
		this.do_
	}

	def setDo(do_ : BigDecimal) : Unit = {
		this.do_ = do_
	}

	@Column(name = "else")
	def getElse : BigDecimal = {
		this.else_
	}

	def setElse(else_ : BigDecimal) : Unit = {
		this.else_ = else_
	}

	@Column(name = "extends")
	def getExtends : BigDecimal = {
		this.extends_
	}

	def setExtends(extends_ : BigDecimal) : Unit = {
		this.extends_ = extends_
	}

	@Column(name = "false")
	def getFalse : BigDecimal = {
		this.false_
	}

	def setFalse(false_ : BigDecimal) : Unit = {
		this.false_ = false_
	}

	@Column(name = "final")
	def getFinal : BigDecimal = {
		this.final_
	}

	def setFinal(final_ : BigDecimal) : Unit = {
		this.final_ = final_
	}

	@Column(name = "finally")
	def getFinally : BigDecimal = {
		this.finally_
	}

	def setFinally(finally_ : BigDecimal) : Unit = {
		this.finally_ = finally_
	}

	@Column(name = "for")
	def getFor : BigDecimal = {
		this.for_
	}

	def setFor(for_ : BigDecimal) : Unit = {
		this.for_ = for_
	}

	@Column(name = "forSome")
	def getForsome : BigDecimal = {
		this.forsome
	}

	def setForsome(forsome : BigDecimal) : Unit = {
		this.forsome = forsome
	}

	@Column(name = "if")
	def getIf : BigDecimal = {
		this.if_
	}

	def setIf(if_ : BigDecimal) : Unit = {
		this.if_ = if_
	}

	@Column(name = "implicit")
	def getImplicit : BigDecimal = {
		this.implicit_
	}

	def setImplicit(implicit_ : BigDecimal) : Unit = {
		this.implicit_ = implicit_
	}

	@Column(name = "import")
	def getImport : BigDecimal = {
		this.import_
	}

	def setImport(import_ : BigDecimal) : Unit = {
		this.import_ = import_
	}

	@Column(name = "lazy")
	def getLazy : BigDecimal = {
		this.lazy_
	}

	def setLazy(lazy_ : BigDecimal) : Unit = {
		this.lazy_ = lazy_
	}

	@Column(name = "match")
	def getMatch : BigDecimal = {
		this.match_
	}

	def setMatch(match_ : BigDecimal) : Unit = {
		this.match_ = match_
	}

	@Column(name = "new")
	def getNew : BigDecimal = {
		this.new_
	}

	def setNew(new_ : BigDecimal) : Unit = {
		this.new_ = new_
	}

	@Column(name = "null")
	def getNull : BigDecimal = {
		this.null_
	}

	def setNull(null_ : BigDecimal) : Unit = {
		this.null_ = null_
	}

	@Column(name = "object")
	def getObject : BigDecimal = {
		this.object_
	}

	def setObject(object_ : BigDecimal) : Unit = {
		this.object_ = object_
	}

	@Column(name = "override")
	def getOverride : BigDecimal = {
		this.override_
	}

	def setOverride(override_ : BigDecimal) : Unit = {
		this.override_ = override_
	}

	@Column(name = "package")
	def getPackage : BigDecimal = {
		this.package_
	}

	def setPackage(package_ : BigDecimal) : Unit = {
		this.package_ = package_
	}

	@Column(name = "private")
	def getPrivate : BigDecimal = {
		this.private_
	}

	def setPrivate(private_ : BigDecimal) : Unit = {
		this.private_ = private_
	}

	@Column(name = "protected")
	def getProtected : BigDecimal = {
		this.protected_
	}

	def setProtected(protected_ : BigDecimal) : Unit = {
		this.protected_ = protected_
	}

	@Column(name = "return")
	def getReturn : BigDecimal = {
		this.return_
	}

	def setReturn(return_ : BigDecimal) : Unit = {
		this.return_ = return_
	}

	@Column(name = "sealed")
	def getSealed : BigDecimal = {
		this.sealed_
	}

	def setSealed(sealed_ : BigDecimal) : Unit = {
		this.sealed_ = sealed_
	}

	@Column(name = "super")
	def getSuper : BigDecimal = {
		this.super_
	}

	def setSuper(super_ : BigDecimal) : Unit = {
		this.super_ = super_
	}

	@Column(name = "this")
	def getThis : BigDecimal = {
		this.this_
	}

	def setThis(this_ : BigDecimal) : Unit = {
		this.this_ = this_
	}

	@Column(name = "throw")
	def getThrow : BigDecimal = {
		this.throw_
	}

	def setThrow(throw_ : BigDecimal) : Unit = {
		this.throw_ = throw_
	}

	@Column(name = "trait")
	def getTrait : BigDecimal = {
		this.trait_
	}

	def setTrait(trait_ : BigDecimal) : Unit = {
		this.trait_ = trait_
	}

	@Column(name = "try")
	def getTry : BigDecimal = {
		this.try_
	}

	def setTry(try_ : BigDecimal) : Unit = {
		this.try_ = try_
	}

	@Column(name = "true")
	def getTrue : BigDecimal = {
		this.true_
	}

	def setTrue(true_ : BigDecimal) : Unit = {
		this.true_ = true_
	}

	@Column(name = "type")
	def getType : BigDecimal = {
		this.type_
	}

	def setType(type_ : BigDecimal) : Unit = {
		this.type_ = type_
	}

	@Column(name = "val")
	def getVal : BigDecimal = {
		this.val_
	}

	def setVal(val_ : BigDecimal) : Unit = {
		this.val_ = val_
	}

	@Column(name = "var")
	def getVar : BigDecimal = {
		this.var_
	}

	def setVar(var_ : BigDecimal) : Unit = {
		this.var_ = var_
	}

	@Column(name = "while")
	def getWhile : BigDecimal = {
		this.while_
	}

	def setWhile(while_ : BigDecimal) : Unit = {
		this.while_ = while_
	}

	@Column(name = "with")
	def getWith : BigDecimal = {
		this.with_
	}

	def setWith(with_ : BigDecimal) : Unit = {
		this.with_ = with_
	}

	@Column(name = "yield")
	def getYield : BigDecimal = {
		this.yield_
	}

	def setYield(yield_ : BigDecimal) : Unit = {
		this.yield_ = yield_
	}

	override def equals(obj : Any) : scala.Boolean = {
		if (this == obj)
			return true
		if (obj == null)
			return false
		if (getClass() != obj.getClass())
			return false
		val other = obj.asInstanceOf[TReserved]
		if (abstract_ == null) {
			if (other.abstract_ != null)
				return false
		}
		else if (!abstract_.equals(other.abstract_))
			return false
		if (case_ == null) {
			if (other.case_ != null)
				return false
		}
		else if (!case_.equals(other.case_))
			return false
		if (catch_ == null) {
			if (other.catch_ != null)
				return false
		}
		else if (!catch_.equals(other.catch_))
			return false
		if (class_ == null) {
			if (other.class_ != null)
				return false
		}
		else if (!class_.equals(other.class_))
			return false
		if (def_ == null) {
			if (other.def_ != null)
				return false
		}
		else if (!def_.equals(other.def_))
			return false
		if (do_ == null) {
			if (other.do_ != null)
				return false
		}
		else if (!do_.equals(other.do_))
			return false
		if (else_ == null) {
			if (other.else_ != null)
				return false
		}
		else if (!else_.equals(other.else_))
			return false
		if (extends_ == null) {
			if (other.extends_ != null)
				return false
		}
		else if (!extends_.equals(other.extends_))
			return false
		if (false_ == null) {
			if (other.false_ != null)
				return false
		}
		else if (!false_.equals(other.false_))
			return false
		if (final_ == null) {
			if (other.final_ != null)
				return false
		}
		else if (!final_.equals(other.final_))
			return false
		if (finally_ == null) {
			if (other.finally_ != null)
				return false
		}
		else if (!finally_.equals(other.finally_))
			return false
		if (for_ == null) {
			if (other.for_ != null)
				return false
		}
		else if (!for_.equals(other.for_))
			return false
		if (forsome == null) {
			if (other.forsome != null)
				return false
		}
		else if (!forsome.equals(other.forsome))
			return false
		if (if_ == null) {
			if (other.if_ != null)
				return false
		}
		else if (!if_.equals(other.if_))
			return false
		if (implicit_ == null) {
			if (other.implicit_ != null)
				return false
		}
		else if (!implicit_.equals(other.implicit_))
			return false
		if (import_ == null) {
			if (other.import_ != null)
				return false
		}
		else if (!import_.equals(other.import_))
			return false
		if (lazy_ == null) {
			if (other.lazy_ != null)
				return false
		}
		else if (!lazy_.equals(other.lazy_))
			return false
		if (match_ == null) {
			if (other.match_ != null)
				return false
		}
		else if (!match_.equals(other.match_))
			return false
		if (new_ == null) {
			if (other.new_ != null)
				return false
		}
		else if (!new_.equals(other.new_))
			return false
		if (null_ == null) {
			if (other.null_ != null)
				return false
		}
		else if (!null_.equals(other.null_))
			return false
		if (object_ == null) {
			if (other.object_ != null)
				return false
		}
		else if (!object_.equals(other.object_))
			return false
		if (override_ == null) {
			if (other.override_ != null)
				return false
		}
		else if (!override_.equals(other.override_))
			return false
		if (package_ == null) {
			if (other.package_ != null)
				return false
		}
		else if (!package_.equals(other.package_))
			return false
		if (private_ == null) {
			if (other.private_ != null)
				return false
		}
		else if (!private_.equals(other.private_))
			return false
		if (protected_ == null) {
			if (other.protected_ != null)
				return false
		}
		else if (!protected_.equals(other.protected_))
			return false
		if (return_ == null) {
			if (other.return_ != null)
				return false
		}
		else if (!return_.equals(other.return_))
			return false
		if (sealed_ == null) {
			if (other.sealed_ != null)
				return false
		}
		else if (!sealed_.equals(other.sealed_))
			return false
		if (super_ == null) {
			if (other.super_ != null)
				return false
		}
		else if (!super_.equals(other.super_))
			return false
		if (this_ == null) {
			if (other.this_ != null)
				return false
		}
		else if (!this_.equals(other.this_))
			return false
		if (throw_ == null) {
			if (other.throw_ != null)
				return false
		}
		else if (!throw_.equals(other.throw_))
			return false
		if (trait_ == null) {
			if (other.trait_ != null)
				return false
		}
		else if (!trait_.equals(other.trait_))
			return false
		if (try_ == null) {
			if (other.try_ != null)
				return false
		}
		else if (!try_.equals(other.try_))
			return false
		if (true_ == null) {
			if (other.true_ != null)
				return false
		}
		else if (!true_.equals(other.true_))
			return false
		if (type_ == null) {
			if (other.type_ != null)
				return false
		}
		else if (!type_.equals(other.type_))
			return false
		if (val_ == null) {
			if (other.val_ != null)
				return false
		}
		else if (!val_.equals(other.val_))
			return false
		if (var_ == null) {
			if (other.var_ != null)
				return false
		}
		else if (!var_.equals(other.var_))
			return false
		if (while_ == null) {
			if (other.while_ != null)
				return false
		}
		else if (!while_.equals(other.while_))
			return false
		if (with_ == null) {
			if (other.with_ != null)
				return false
		}
		else if (!with_.equals(other.with_))
			return false
		if (yield_ == null) {
			if (other.yield_ != null)
				return false
		}
		else if (!yield_.equals(other.yield_))
			return false
		return true
	}

	override def hashCode : Int = {
		val prime = 31
		var result = 1
		result = prime * result + (if (abstract_ == null) 0 else abstract_.hashCode())
		result = prime * result + (if (case_ == null) 0 else case_.hashCode())
		result = prime * result + (if (catch_ == null) 0 else catch_.hashCode())
		result = prime * result + (if (class_ == null) 0 else class_.hashCode())
		result = prime * result + (if (def_ == null) 0 else def_.hashCode())
		result = prime * result + (if (do_ == null) 0 else do_.hashCode())
		result = prime * result + (if (else_ == null) 0 else else_.hashCode())
		result = prime * result + (if (extends_ == null) 0 else extends_.hashCode())
		result = prime * result + (if (false_ == null) 0 else false_.hashCode())
		result = prime * result + (if (final_ == null) 0 else final_.hashCode())
		result = prime * result + (if (finally_ == null) 0 else finally_.hashCode())
		result = prime * result + (if (for_ == null) 0 else for_.hashCode())
		result = prime * result + (if (forsome == null) 0 else forsome.hashCode())
		result = prime * result + (if (if_ == null) 0 else if_.hashCode())
		result = prime * result + (if (implicit_ == null) 0 else implicit_.hashCode())
		result = prime * result + (if (import_ == null) 0 else import_.hashCode())
		result = prime * result + (if (lazy_ == null) 0 else lazy_.hashCode())
		result = prime * result + (if (match_ == null) 0 else match_.hashCode())
		result = prime * result + (if (new_ == null) 0 else new_.hashCode())
		result = prime * result + (if (null_ == null) 0 else null_.hashCode())
		result = prime * result + (if (object_ == null) 0 else object_.hashCode())
		result = prime * result + (if (override_ == null) 0 else override_.hashCode())
		result = prime * result + (if (package_ == null) 0 else package_.hashCode())
		result = prime * result + (if (private_ == null) 0 else private_.hashCode())
		result = prime * result + (if (protected_ == null) 0 else protected_.hashCode())
		result = prime * result + (if (return_ == null) 0 else return_.hashCode())
		result = prime * result + (if (sealed_ == null) 0 else sealed_.hashCode())
		result = prime * result + (if (super_ == null) 0 else super_.hashCode())
		result = prime * result + (if (this_ == null) 0 else this_.hashCode())
		result = prime * result + (if (throw_ == null) 0 else throw_.hashCode())
		result = prime * result + (if (trait_ == null) 0 else trait_.hashCode())
		result = prime * result + (if (try_ == null) 0 else try_.hashCode())
		result = prime * result + (if (true_ == null) 0 else true_.hashCode())
		result = prime * result + (if (type_ == null) 0 else type_.hashCode())
		result = prime * result + (if (val_ == null) 0 else val_.hashCode())
		result = prime * result + (if (var_ == null) 0 else var_.hashCode())
		result = prime * result + (if (while_ == null) 0 else while_.hashCode())
		result = prime * result + (if (with_ == null) 0 else with_.hashCode())
		result = prime * result + (if (yield_ == null) 0 else yield_.hashCode())
		return result
	}
}
