/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.pojos


import java.io.Serializable
import java.lang.Integer
import java.lang.String
import java.lang.StringBuilder

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Table
import javax.validation.constraints.Size


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_785", schema = "TEST")
class T_785(
	  private var id : Integer
	, private var name : String 
	, private var value : String 
) extends Serializable {

	def this() = {
		this(null, null, null)
	}

	def this (value : T_785) = {
		this(
			  value.id
			, value.name
			, value.value
		)
	}

	@Column(name = "ID", precision = 7)
	def getId : Integer = {
		this.id
	}

	def setId(id : Integer) : Unit = {
		this.id = id
	}

	@Column(name = "NAME", length = 50)
	@Size(max = 50)
	def getName : String = {
		this.name
	}

	def setName(name : String) : Unit = {
		this.name = name
	}

	@Column(name = "VALUE", length = 50)
	@Size(max = 50)
	def getValue : String = {
		this.value
	}

	def setValue(value : String) : Unit = {
		this.value = value
	}

	override def equals(obj : Any) : scala.Boolean = {
		if (this == obj)
			return true
		if (obj == null)
			return false
		if (getClass() != obj.getClass())
			return false
		val other = obj.asInstanceOf[T_785]
		if (id == null) {
			if (other.id != null)
				return false
		}
		else if (!id.equals(other.id))
			return false
		if (name == null) {
			if (other.name != null)
				return false
		}
		else if (!name.equals(other.name))
			return false
		if (value == null) {
			if (other.value != null)
				return false
		}
		else if (!value.equals(other.value))
			return false
		return true
	}

	override def hashCode : Int = {
		val prime = 31
		var result = 1
		result = prime * result + (if (id == null) 0 else id.hashCode())
		result = prime * result + (if (name == null) 0 else name.hashCode())
		result = prime * result + (if (value == null) 0 else value.hashCode())
		return result
	}

	override def toString : String = {
		val sb = new StringBuilder("T_785 (")

		sb.append(id)
		sb.append(", ").append(name)
		sb.append(", ").append(value)

		sb.append(")");
		return sb.toString
	}
}
