/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.multi_schema.udt


import java.lang.Class
import java.lang.Integer

import org.jooq.UDTField
import org.jooq.impl.UDTImpl
import org.jooq.test.oraclescala.generatedclasses.multi_schema.MultiSchema
import org.jooq.test.oraclescala.generatedclasses.multi_schema.udt.records.U_4347Record
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.UAddressTableRecord
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.UAddressTypeRecord


object U_4347 {

	/**
	 * The reference instance of <code>MULTI_SCHEMA.U_4347</code>
	 */
	val U_4347 = new U_4347

	/**
	 * The attribute <code>MULTI_SCHEMA.U_4347.ID</code>.
	 */
	val ID = U_4347.ID

	/**
	 * The attribute <code>MULTI_SCHEMA.U_4347.T</code>.
	 */
	val T = U_4347.T

	/**
	 * The attribute <code>MULTI_SCHEMA.U_4347.O</code>.
	 */
	val O = U_4347.O
}

/**
 * This class is generated by jOOQ.
 */
class U_4347 extends UDTImpl[U_4347Record]("U_4347", MultiSchema.MULTI_SCHEMA) {

	/**
	 * The class holding records for this type
	 */
	override def getRecordType : Class[U_4347Record] = {
		classOf[U_4347Record]
	}
	private val ID : UDTField[U_4347Record, Integer] = UDTImpl.createField("ID", org.jooq.impl.SQLDataType.INTEGER, this, "")
	private val T : UDTField[U_4347Record, UAddressTableRecord] = UDTImpl.createField("T", org.jooq.test.oraclescala.generatedclasses.test.udt.UAddressType.U_ADDRESS_TYPE.getDataType().asArrayDataType(classOf[org.jooq.test.oraclescala.generatedclasses.test.udt.records.UAddressTableRecord]), this, "")
	private val O : UDTField[U_4347Record, UAddressTypeRecord] = UDTImpl.createField("O", org.jooq.test.oraclescala.generatedclasses.test.udt.UAddressType.U_ADDRESS_TYPE.getDataType(), this, "")

	{
		// Initialise data type
		getDataType
	}
}
