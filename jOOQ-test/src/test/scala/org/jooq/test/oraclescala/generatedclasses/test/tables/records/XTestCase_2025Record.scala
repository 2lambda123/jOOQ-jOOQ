/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.records


import java.lang.Integer
import java.lang.String

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Table
import javax.validation.constraints.NotNull
import javax.validation.constraints.Size

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.TableRecordImpl
import org.jooq.test.oraclescala.generatedclasses.test.tables.XTestCase_2025


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "X_TEST_CASE_2025", schema = "TEST")
class XTestCase_2025Record extends TableRecordImpl[XTestCase_2025Record](XTestCase_2025.X_TEST_CASE_2025) with Record2[Integer, String] {

	/**
	 * Setter for <code>TEST.X_TEST_CASE_2025.REF_ID</code>.
	 */
	def setRefId(value : Integer) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>TEST.X_TEST_CASE_2025.REF_ID</code>.
	 */
	@Column(name = "REF_ID", nullable = false, precision = 7)
	@NotNull
	def getRefId : Integer = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>TEST.X_TEST_CASE_2025.REF_NAME</code>.
	 */
	def setRefName(value : String) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>TEST.X_TEST_CASE_2025.REF_NAME</code>.
	 */
	@Column(name = "REF_NAME", nullable = false, length = 10)
	@NotNull
	@Size(max = 10)
	def getRefName : String = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[String]
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row2[Integer, String] = {
		super.fieldsRow.asInstanceOf[ Row2[Integer, String] ]
	}

	override def valuesRow : Row2[Integer, String] = {
		super.valuesRow.asInstanceOf[ Row2[Integer, String] ]
	}
	override def field1 : Field[Integer] = XTestCase_2025.X_TEST_CASE_2025.REF_ID
	override def field2 : Field[String] = XTestCase_2025.X_TEST_CASE_2025.REF_NAME
	override def value1 : Integer = getRefId
	override def value2 : String = getRefName

	override def value1(value : Integer) : XTestCase_2025Record = {
		setRefId(value)
		this
	}

	override def value2(value : String) : XTestCase_2025Record = {
		setRefName(value)
		this
	}

	override def values(value1 : Integer, value2 : String) : XTestCase_2025Record = {
		this
	}

	/**
	 * Create a detached, initialised XTestCase_2025Record
	 */
	def this(refId : Integer, refName : String) = {
		this()

		setValue(0, refId)
		setValue(1, refName)
	}
}
