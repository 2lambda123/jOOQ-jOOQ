/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.pojos


import java.io.Serializable
import java.math.BigDecimal

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Id
import javax.persistence.Table
import javax.validation.constraints.NotNull


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_2845_CASE_sensitivity", schema = "TEST")
class T_2845CaseSensitivity(
	  private var id : BigDecimal
	, private var insensitive : BigDecimal
	, private var upper : BigDecimal
	, private var lower : BigDecimal
	, private var mixed : BigDecimal
) extends Serializable {

	def this() = {
		this(null, null, null, null, null)
	}

	def this (value : T_2845CaseSensitivity) = {
		this(
			  value.id
			, value.insensitive
			, value.upper
			, value.lower
			, value.mixed
		)
	}

	@Id
	@Column(name = "ID", unique = true, nullable = false)
	@NotNull
	def getId : BigDecimal = {
		this.id
	}

	def setId(id : BigDecimal) : Unit = {
		this.id = id
	}

	@Column(name = "INSENSITIVE")
	def getInsensitive : BigDecimal = {
		this.insensitive
	}

	def setInsensitive(insensitive : BigDecimal) : Unit = {
		this.insensitive = insensitive
	}

	@Column(name = "UPPER")
	def getUpper : BigDecimal = {
		this.upper
	}

	def setUpper(upper : BigDecimal) : Unit = {
		this.upper = upper
	}

	@Column(name = "lower")
	def getLower : BigDecimal = {
		this.lower
	}

	def setLower(lower : BigDecimal) : Unit = {
		this.lower = lower
	}

	@Column(name = "Mixed")
	def getMixed : BigDecimal = {
		this.mixed
	}

	def setMixed(mixed : BigDecimal) : Unit = {
		this.mixed = mixed
	}

	override def equals(obj : Any) : scala.Boolean = {
		if (this == obj)
			return true
		if (obj == null)
			return false
		if (getClass() != obj.getClass())
			return false
		val other = obj.asInstanceOf[T_2845CaseSensitivity]
		if (id == null) {
			if (other.id != null)
				return false
		}
		else if (!id.equals(other.id))
			return false
		if (insensitive == null) {
			if (other.insensitive != null)
				return false
		}
		else if (!insensitive.equals(other.insensitive))
			return false
		if (upper == null) {
			if (other.upper != null)
				return false
		}
		else if (!upper.equals(other.upper))
			return false
		if (lower == null) {
			if (other.lower != null)
				return false
		}
		else if (!lower.equals(other.lower))
			return false
		if (mixed == null) {
			if (other.mixed != null)
				return false
		}
		else if (!mixed.equals(other.mixed))
			return false
		return true
	}

	override def hashCode : Int = {
		val prime = 31
		var result = 1
		result = prime * result + (if (id == null) 0 else id.hashCode())
		result = prime * result + (if (insensitive == null) 0 else insensitive.hashCode())
		result = prime * result + (if (upper == null) 0 else upper.hashCode())
		result = prime * result + (if (lower == null) 0 else lower.hashCode())
		result = prime * result + (if (mixed == null) 0 else mixed.hashCode())
		return result
	}
}
