/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.records


import java.lang.Integer
import java.lang.String

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Table
import javax.persistence.UniqueConstraint
import javax.validation.constraints.NotNull
import javax.validation.constraints.Size

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.test.oraclescala.generatedclasses.test.tables.TBookToBookStore


/**
 * An m:n relation between books and book stores
 */
@Entity
@Table(name = "T_BOOK_TO_BOOK_STORE", schema = "TEST", uniqueConstraints = Array(
	new UniqueConstraint(columnNames = Array("BOOK_STORE_NAME", "BOOK_ID"))
))
class TBookToBookStoreRecord extends UpdatableRecordImpl[TBookToBookStoreRecord](TBookToBookStore.T_BOOK_TO_BOOK_STORE) with Record3[String, Integer, Integer] {

	/**
	 * Setter for <code>TEST.T_BOOK_TO_BOOK_STORE.BOOK_STORE_NAME</code>. The book store name
	 */
	def setBookStoreName(value : String) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>TEST.T_BOOK_TO_BOOK_STORE.BOOK_STORE_NAME</code>. The book store name
	 */
	@Column(name = "BOOK_STORE_NAME", nullable = false, length = 400)
	@NotNull
	@Size(max = 400)
	def getBookStoreName : String = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>TEST.T_BOOK_TO_BOOK_STORE.BOOK_ID</code>. The book ID
	 */
	def setBookId(value : Integer) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>TEST.T_BOOK_TO_BOOK_STORE.BOOK_ID</code>. The book ID
	 */
	@Column(name = "BOOK_ID", nullable = false, precision = 7)
	@NotNull
	def getBookId : Integer = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>TEST.T_BOOK_TO_BOOK_STORE.STOCK</code>. The number of books on stock
	 */
	def setStock(value : Integer) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>TEST.T_BOOK_TO_BOOK_STORE.STOCK</code>. The number of books on stock
	 */
	@Column(name = "STOCK", precision = 7)
	def getStock : Integer = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------
	override def key() : Record2[String, Integer] = {
		return super.key.asInstanceOf[ Record2[String, Integer] ]
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row3[String, Integer, Integer] = {
		super.fieldsRow.asInstanceOf[ Row3[String, Integer, Integer] ]
	}

	override def valuesRow : Row3[String, Integer, Integer] = {
		super.valuesRow.asInstanceOf[ Row3[String, Integer, Integer] ]
	}
	override def field1 : Field[String] = TBookToBookStore.T_BOOK_TO_BOOK_STORE.BOOK_STORE_NAME
	override def field2 : Field[Integer] = TBookToBookStore.T_BOOK_TO_BOOK_STORE.BOOK_ID
	override def field3 : Field[Integer] = TBookToBookStore.T_BOOK_TO_BOOK_STORE.STOCK
	override def value1 : String = getBookStoreName
	override def value2 : Integer = getBookId
	override def value3 : Integer = getStock

	override def value1(value : String) : TBookToBookStoreRecord = {
		setBookStoreName(value)
		this
	}

	override def value2(value : Integer) : TBookToBookStoreRecord = {
		setBookId(value)
		this
	}

	override def value3(value : Integer) : TBookToBookStoreRecord = {
		setStock(value)
		this
	}

	override def values(value1 : String, value2 : Integer, value3 : Integer) : TBookToBookStoreRecord = {
		this.value1(value1)
		this.value2(value2)
		this.value3(value3)
		this
	}

	/**
	 * Create a detached, initialised TBookToBookStoreRecord
	 */
	def this(bookStoreName : String, bookId : Integer, stock : Integer) = {
		this()

		setValue(0, bookStoreName)
		setValue(1, bookId)
		setValue(2, stock)
	}
}
