/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.records


import java.lang.Integer
import java.time.LocalDate

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Id
import javax.persistence.Table
import javax.validation.constraints.NotNull

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.test.oraclescala.generatedclasses.test.tables.T_2155
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.U_2155ArrayRecord
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.U_2155ObjectRecord


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_2155", schema = "TEST")
class T_2155Record extends UpdatableRecordImpl[T_2155Record](T_2155.T_2155) with Record4[Integer, LocalDate, U_2155ObjectRecord, U_2155ArrayRecord] {

	/**
	 * Setter for <code>TEST.T_2155.ID</code>.
	 */
	def setId(value : Integer) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>TEST.T_2155.ID</code>.
	 */
	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 7)
	@NotNull
	def getId : Integer = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>TEST.T_2155.D1</code>.
	 */
	def setD1(value : LocalDate) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>TEST.T_2155.D1</code>.
	 */
	@Column(name = "D1")
	def getD1 : LocalDate = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[LocalDate]
	}

	/**
	 * Setter for <code>TEST.T_2155.D2</code>.
	 */
	def setD2(value : U_2155ObjectRecord) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>TEST.T_2155.D2</code>.
	 */
	@Column(name = "D2")
	def getD2 : U_2155ObjectRecord = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[U_2155ObjectRecord]
	}

	/**
	 * Setter for <code>TEST.T_2155.D3</code>.
	 */
	def setD3(value : U_2155ArrayRecord) : Unit = {
		setValue(3, value)
	}

	/**
	 * Getter for <code>TEST.T_2155.D3</code>.
	 */
	@Column(name = "D3")
	def getD3 : U_2155ArrayRecord = {
		val r = getValue(3)
		if (r == null) null else r.asInstanceOf[U_2155ArrayRecord]
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------
	override def key() : Record1[Integer] = {
		return super.key.asInstanceOf[ Record1[Integer] ]
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row4[Integer, LocalDate, U_2155ObjectRecord, U_2155ArrayRecord] = {
		super.fieldsRow.asInstanceOf[ Row4[Integer, LocalDate, U_2155ObjectRecord, U_2155ArrayRecord] ]
	}

	override def valuesRow : Row4[Integer, LocalDate, U_2155ObjectRecord, U_2155ArrayRecord] = {
		super.valuesRow.asInstanceOf[ Row4[Integer, LocalDate, U_2155ObjectRecord, U_2155ArrayRecord] ]
	}
	override def field1 : Field[Integer] = T_2155.T_2155.ID
	override def field2 : Field[LocalDate] = T_2155.T_2155.D1
	override def field3 : Field[U_2155ObjectRecord] = T_2155.T_2155.D2
	override def field4 : Field[U_2155ArrayRecord] = T_2155.T_2155.D3
	override def value1 : Integer = getId
	override def value2 : LocalDate = getD1
	override def value3 : U_2155ObjectRecord = getD2
	override def value4 : U_2155ArrayRecord = getD3

	override def value1(value : Integer) : T_2155Record = {
		setId(value)
		this
	}

	override def value2(value : LocalDate) : T_2155Record = {
		setD1(value)
		this
	}

	override def value3(value : U_2155ObjectRecord) : T_2155Record = {
		setD2(value)
		this
	}

	override def value4(value : U_2155ArrayRecord) : T_2155Record = {
		setD3(value)
		this
	}

	override def values(value1 : Integer, value2 : LocalDate, value3 : U_2155ObjectRecord, value4 : U_2155ArrayRecord) : T_2155Record = {
		this.value1(value1)
		this.value2(value2)
		this.value3(value3)
		this.value4(value4)
		this
	}

	/**
	 * Create a detached, initialised T_2155Record
	 */
	def this(id : Integer, d1 : LocalDate, d2 : U_2155ObjectRecord, d3 : U_2155ArrayRecord) = {
		this()

		setValue(0, id)
		setValue(1, d1)
		setValue(2, d2)
		setValue(3, d3)
	}
}
