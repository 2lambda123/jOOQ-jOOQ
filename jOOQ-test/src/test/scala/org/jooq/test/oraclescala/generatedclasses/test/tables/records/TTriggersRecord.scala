/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.records


import java.lang.Integer

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Id
import javax.persistence.Table
import javax.validation.constraints.NotNull

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.test.oraclescala.generatedclasses.test.tables.TTriggers


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_TRIGGERS", schema = "TEST")
class TTriggersRecord extends UpdatableRecordImpl[TTriggersRecord](TTriggers.T_TRIGGERS) with Record3[Integer, Integer, Integer] {

	/**
	 * Setter for <code>TEST.T_TRIGGERS.ID_GENERATED</code>.
	 */
	def setIdGenerated(value : Integer) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>TEST.T_TRIGGERS.ID_GENERATED</code>.
	 */
	@Id
	@Column(name = "ID_GENERATED", unique = true, nullable = false, precision = 7)
	@NotNull
	def getIdGenerated : Integer = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>TEST.T_TRIGGERS.ID</code>.
	 */
	def setId(value : Integer) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>TEST.T_TRIGGERS.ID</code>.
	 */
	@Column(name = "ID", nullable = false, precision = 7)
	@NotNull
	def getId : Integer = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>TEST.T_TRIGGERS.COUNTER</code>.
	 */
	def setCounter(value : Integer) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>TEST.T_TRIGGERS.COUNTER</code>.
	 */
	@Column(name = "COUNTER", nullable = false, precision = 7)
	@NotNull
	def getCounter : Integer = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------
	override def key() : Record1[Integer] = {
		return super.key.asInstanceOf[ Record1[Integer] ]
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row3[Integer, Integer, Integer] = {
		super.fieldsRow.asInstanceOf[ Row3[Integer, Integer, Integer] ]
	}

	override def valuesRow : Row3[Integer, Integer, Integer] = {
		super.valuesRow.asInstanceOf[ Row3[Integer, Integer, Integer] ]
	}
	override def field1 : Field[Integer] = TTriggers.T_TRIGGERS.ID_GENERATED
	override def field2 : Field[Integer] = TTriggers.T_TRIGGERS.ID
	override def field3 : Field[Integer] = TTriggers.T_TRIGGERS.COUNTER
	override def value1 : Integer = getIdGenerated
	override def value2 : Integer = getId
	override def value3 : Integer = getCounter

	override def value1(value : Integer) : TTriggersRecord = {
		setIdGenerated(value)
		this
	}

	override def value2(value : Integer) : TTriggersRecord = {
		setId(value)
		this
	}

	override def value3(value : Integer) : TTriggersRecord = {
		setCounter(value)
		this
	}

	override def values(value1 : Integer, value2 : Integer, value3 : Integer) : TTriggersRecord = {
		this.value1(value1)
		this.value2(value2)
		this.value3(value3)
		this
	}

	/**
	 * Create a detached, initialised TTriggersRecord
	 */
	def this(idGenerated : Integer, id : Integer, counter : Integer) = {
		this()

		setValue(0, idGenerated)
		setValue(1, id)
		setValue(2, counter)
	}
}
