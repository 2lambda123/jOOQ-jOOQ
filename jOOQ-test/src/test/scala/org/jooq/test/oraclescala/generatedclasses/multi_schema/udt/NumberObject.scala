/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.multi_schema.udt


import java.lang.Class
import java.lang.Integer

import org.jooq.UDTField
import org.jooq.impl.UDTImpl
import org.jooq.test.oraclescala.generatedclasses.multi_schema.MultiSchema
import org.jooq.test.oraclescala.generatedclasses.multi_schema.udt.records.NumberObjectRecord


object NumberObject {

	/**
	 * The reference instance of <code>MULTI_SCHEMA.NUMBER_OBJECT</code>
	 */
	val NUMBER_OBJECT = new NumberObject

	/**
	 * The attribute <code>MULTI_SCHEMA.NUMBER_OBJECT.A</code>.
	 */
	val A = NUMBER_OBJECT.A

	/**
	 * The attribute <code>MULTI_SCHEMA.NUMBER_OBJECT.B</code>.
	 */
	val B = NUMBER_OBJECT.B

	/**
	 * The attribute <code>MULTI_SCHEMA.NUMBER_OBJECT.C</code>.
	 */
	val C = NUMBER_OBJECT.C
}

/**
 * This class is generated by jOOQ.
 */
class NumberObject extends UDTImpl[NumberObjectRecord]("NUMBER_OBJECT", MultiSchema.MULTI_SCHEMA) {

	/**
	 * The class holding records for this type
	 */
	override def getRecordType : Class[NumberObjectRecord] = {
		classOf[NumberObjectRecord]
	}
	private val A : UDTField[NumberObjectRecord, Integer] = UDTImpl.createField("A", org.jooq.impl.SQLDataType.INTEGER, this, "")
	private val B : UDTField[NumberObjectRecord, Integer] = UDTImpl.createField("B", org.jooq.impl.SQLDataType.INTEGER, this, "")
	private val C : UDTField[NumberObjectRecord, Integer] = UDTImpl.createField("C", org.jooq.impl.SQLDataType.INTEGER, this, "")

	{
		// Initialise data type
		getDataType
	}
}
