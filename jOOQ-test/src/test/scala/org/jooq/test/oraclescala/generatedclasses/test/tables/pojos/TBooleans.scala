/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.pojos


import java.io.Serializable
import java.lang.Boolean
import java.lang.Integer

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Id
import javax.persistence.Table
import javax.validation.constraints.NotNull

import org.jooq.test.all.converters.Boolean_10
import org.jooq.test.all.converters.Boolean_TF_LC
import org.jooq.test.all.converters.Boolean_TF_UC
import org.jooq.test.all.converters.Boolean_YES_NO_LC
import org.jooq.test.all.converters.Boolean_YES_NO_UC
import org.jooq.test.all.converters.Boolean_YN_LC
import org.jooq.test.all.converters.Boolean_YN_UC


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_BOOLEANS", schema = "TEST")
class TBooleans(
	  private var id : Integer          
	, private var oneZero : Boolean_10       
	, private var trueFalseLc : Boolean_TF_LC    
	, private var trueFalseUc : Boolean_TF_UC    
	, private var yesNoLc : Boolean_YES_NO_LC
	, private var yesNoUc : Boolean_YES_NO_UC
	, private var yNLc : Boolean_YN_LC    
	, private var yNUc : Boolean_YN_UC    
	, private var vcBoolean : Boolean          
	, private var cBoolean : Boolean          
	, private var nBoolean : Boolean          
) extends Serializable {

	def this() = {
		this(null, null, null, null, null, null, null, null, null, null, null)
	}

	def this (value : TBooleans) = {
		this(
			  value.id
			, value.oneZero
			, value.trueFalseLc
			, value.trueFalseUc
			, value.yesNoLc
			, value.yesNoUc
			, value.yNLc
			, value.yNUc
			, value.vcBoolean
			, value.cBoolean
			, value.nBoolean
		)
	}

	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 7)
	@NotNull
	def getId : Integer = {
		this.id
	}

	def setId(id : Integer) : Unit = {
		this.id = id
	}

	@Column(name = "ONE_ZERO", precision = 7)
	def getOneZero : Boolean_10 = {
		this.oneZero
	}

	def setOneZero(oneZero : Boolean_10) : Unit = {
		this.oneZero = oneZero
	}

	@Column(name = "TRUE_FALSE_LC", length = 5)
	def getTrueFalseLc : Boolean_TF_LC = {
		this.trueFalseLc
	}

	def setTrueFalseLc(trueFalseLc : Boolean_TF_LC) : Unit = {
		this.trueFalseLc = trueFalseLc
	}

	@Column(name = "TRUE_FALSE_UC", length = 5)
	def getTrueFalseUc : Boolean_TF_UC = {
		this.trueFalseUc
	}

	def setTrueFalseUc(trueFalseUc : Boolean_TF_UC) : Unit = {
		this.trueFalseUc = trueFalseUc
	}

	@Column(name = "YES_NO_LC", length = 3)
	def getYesNoLc : Boolean_YES_NO_LC = {
		this.yesNoLc
	}

	def setYesNoLc(yesNoLc : Boolean_YES_NO_LC) : Unit = {
		this.yesNoLc = yesNoLc
	}

	@Column(name = "YES_NO_UC", length = 3)
	def getYesNoUc : Boolean_YES_NO_UC = {
		this.yesNoUc
	}

	def setYesNoUc(yesNoUc : Boolean_YES_NO_UC) : Unit = {
		this.yesNoUc = yesNoUc
	}

	@Column(name = "Y_N_LC", length = 1)
	def getYNLc : Boolean_YN_LC = {
		this.yNLc
	}

	def setYNLc(yNLc : Boolean_YN_LC) : Unit = {
		this.yNLc = yNLc
	}

	@Column(name = "Y_N_UC", length = 1)
	def getYNUc : Boolean_YN_UC = {
		this.yNUc
	}

	def setYNUc(yNUc : Boolean_YN_UC) : Unit = {
		this.yNUc = yNUc
	}

	@Column(name = "VC_BOOLEAN")
	def getVcBoolean : Boolean = {
		this.vcBoolean
	}

	def setVcBoolean(vcBoolean : Boolean) : Unit = {
		this.vcBoolean = vcBoolean
	}

	@Column(name = "C_BOOLEAN")
	def getCBoolean : Boolean = {
		this.cBoolean
	}

	def setCBoolean(cBoolean : Boolean) : Unit = {
		this.cBoolean = cBoolean
	}

	@Column(name = "N_BOOLEAN")
	def getNBoolean : Boolean = {
		this.nBoolean
	}

	def setNBoolean(nBoolean : Boolean) : Unit = {
		this.nBoolean = nBoolean
	}

	override def equals(obj : Any) : scala.Boolean = {
		if (this == obj)
			return true
		if (obj == null)
			return false
		if (getClass() != obj.getClass())
			return false
		val other = obj.asInstanceOf[TBooleans]
		if (id == null) {
			if (other.id != null)
				return false
		}
		else if (!id.equals(other.id))
			return false
		if (oneZero == null) {
			if (other.oneZero != null)
				return false
		}
		else if (!oneZero.equals(other.oneZero))
			return false
		if (trueFalseLc == null) {
			if (other.trueFalseLc != null)
				return false
		}
		else if (!trueFalseLc.equals(other.trueFalseLc))
			return false
		if (trueFalseUc == null) {
			if (other.trueFalseUc != null)
				return false
		}
		else if (!trueFalseUc.equals(other.trueFalseUc))
			return false
		if (yesNoLc == null) {
			if (other.yesNoLc != null)
				return false
		}
		else if (!yesNoLc.equals(other.yesNoLc))
			return false
		if (yesNoUc == null) {
			if (other.yesNoUc != null)
				return false
		}
		else if (!yesNoUc.equals(other.yesNoUc))
			return false
		if (yNLc == null) {
			if (other.yNLc != null)
				return false
		}
		else if (!yNLc.equals(other.yNLc))
			return false
		if (yNUc == null) {
			if (other.yNUc != null)
				return false
		}
		else if (!yNUc.equals(other.yNUc))
			return false
		if (vcBoolean == null) {
			if (other.vcBoolean != null)
				return false
		}
		else if (!vcBoolean.equals(other.vcBoolean))
			return false
		if (cBoolean == null) {
			if (other.cBoolean != null)
				return false
		}
		else if (!cBoolean.equals(other.cBoolean))
			return false
		if (nBoolean == null) {
			if (other.nBoolean != null)
				return false
		}
		else if (!nBoolean.equals(other.nBoolean))
			return false
		return true
	}

	override def hashCode : Int = {
		val prime = 31
		var result = 1
		result = prime * result + (if (id == null) 0 else id.hashCode())
		result = prime * result + (if (oneZero == null) 0 else oneZero.hashCode())
		result = prime * result + (if (trueFalseLc == null) 0 else trueFalseLc.hashCode())
		result = prime * result + (if (trueFalseUc == null) 0 else trueFalseUc.hashCode())
		result = prime * result + (if (yesNoLc == null) 0 else yesNoLc.hashCode())
		result = prime * result + (if (yesNoUc == null) 0 else yesNoUc.hashCode())
		result = prime * result + (if (yNLc == null) 0 else yNLc.hashCode())
		result = prime * result + (if (yNUc == null) 0 else yNUc.hashCode())
		result = prime * result + (if (vcBoolean == null) 0 else vcBoolean.hashCode())
		result = prime * result + (if (cBoolean == null) 0 else cBoolean.hashCode())
		result = prime * result + (if (nBoolean == null) 0 else nBoolean.hashCode())
		return result
	}
}
