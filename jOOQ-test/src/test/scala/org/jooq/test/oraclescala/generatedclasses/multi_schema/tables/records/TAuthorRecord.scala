/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.multi_schema.tables.records


import java.lang.Integer
import java.lang.String
import java.sql.Date

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Id
import javax.persistence.Table
import javax.validation.constraints.NotNull
import javax.validation.constraints.Size

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.test.oraclescala.generatedclasses.multi_schema.tables.TAuthor
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.UAddressTypeRecord


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_AUTHOR", schema = "MULTI_SCHEMA")
class TAuthorRecord extends UpdatableRecordImpl[TAuthorRecord](TAuthor.T_AUTHOR) with Record6[Integer, String, String, Date, Integer, UAddressTypeRecord] {

	/**
	 * Setter for <code>MULTI_SCHEMA.T_AUTHOR.ID</code>.
	 */
	def setId(value : Integer) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>MULTI_SCHEMA.T_AUTHOR.ID</code>.
	 */
	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 7)
	@NotNull
	def getId : Integer = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>MULTI_SCHEMA.T_AUTHOR.FIRST_NAME</code>.
	 */
	def setFirstName(value : String) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>MULTI_SCHEMA.T_AUTHOR.FIRST_NAME</code>.
	 */
	@Column(name = "FIRST_NAME", length = 50)
	@Size(max = 50)
	def getFirstName : String = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>MULTI_SCHEMA.T_AUTHOR.LAST_NAME</code>.
	 */
	def setLastName(value : String) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>MULTI_SCHEMA.T_AUTHOR.LAST_NAME</code>.
	 */
	@Column(name = "LAST_NAME", nullable = false, length = 50)
	@NotNull
	@Size(max = 50)
	def getLastName : String = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>MULTI_SCHEMA.T_AUTHOR.DATE_OF_BIRTH</code>.
	 */
	def setDateOfBirth(value : Date) : Unit = {
		setValue(3, value)
	}

	/**
	 * Getter for <code>MULTI_SCHEMA.T_AUTHOR.DATE_OF_BIRTH</code>.
	 */
	@Column(name = "DATE_OF_BIRTH")
	def getDateOfBirth : Date = {
		val r = getValue(3)
		if (r == null) null else r.asInstanceOf[Date]
	}

	/**
	 * Setter for <code>MULTI_SCHEMA.T_AUTHOR.YEAR_OF_BIRTH</code>.
	 */
	def setYearOfBirth(value : Integer) : Unit = {
		setValue(4, value)
	}

	/**
	 * Getter for <code>MULTI_SCHEMA.T_AUTHOR.YEAR_OF_BIRTH</code>.
	 */
	@Column(name = "YEAR_OF_BIRTH", precision = 7)
	def getYearOfBirth : Integer = {
		val r = getValue(4)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>MULTI_SCHEMA.T_AUTHOR.ADDRESS</code>.
	 */
	def setAddress(value : UAddressTypeRecord) : Unit = {
		setValue(5, value)
	}

	/**
	 * Getter for <code>MULTI_SCHEMA.T_AUTHOR.ADDRESS</code>.
	 */
	@Column(name = "ADDRESS")
	def getAddress : UAddressTypeRecord = {
		val r = getValue(5)
		if (r == null) null else r.asInstanceOf[UAddressTypeRecord]
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------
	override def key() : Record1[Integer] = {
		return super.key.asInstanceOf[ Record1[Integer] ]
	}

	// -------------------------------------------------------------------------
	// Record6 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row6[Integer, String, String, Date, Integer, UAddressTypeRecord] = {
		super.fieldsRow.asInstanceOf[ Row6[Integer, String, String, Date, Integer, UAddressTypeRecord] ]
	}

	override def valuesRow : Row6[Integer, String, String, Date, Integer, UAddressTypeRecord] = {
		super.valuesRow.asInstanceOf[ Row6[Integer, String, String, Date, Integer, UAddressTypeRecord] ]
	}
	override def field1 : Field[Integer] = TAuthor.T_AUTHOR.ID
	override def field2 : Field[String] = TAuthor.T_AUTHOR.FIRST_NAME
	override def field3 : Field[String] = TAuthor.T_AUTHOR.LAST_NAME
	override def field4 : Field[Date] = TAuthor.T_AUTHOR.DATE_OF_BIRTH
	override def field5 : Field[Integer] = TAuthor.T_AUTHOR.YEAR_OF_BIRTH
	override def field6 : Field[UAddressTypeRecord] = TAuthor.T_AUTHOR.ADDRESS
	override def value1 : Integer = getId
	override def value2 : String = getFirstName
	override def value3 : String = getLastName
	override def value4 : Date = getDateOfBirth
	override def value5 : Integer = getYearOfBirth
	override def value6 : UAddressTypeRecord = getAddress

	override def value1(value : Integer) : TAuthorRecord = {
		setId(value)
		this
	}

	override def value2(value : String) : TAuthorRecord = {
		setFirstName(value)
		this
	}

	override def value3(value : String) : TAuthorRecord = {
		setLastName(value)
		this
	}

	override def value4(value : Date) : TAuthorRecord = {
		setDateOfBirth(value)
		this
	}

	override def value5(value : Integer) : TAuthorRecord = {
		setYearOfBirth(value)
		this
	}

	override def value6(value : UAddressTypeRecord) : TAuthorRecord = {
		setAddress(value)
		this
	}

	override def values(value1 : Integer, value2 : String, value3 : String, value4 : Date, value5 : Integer, value6 : UAddressTypeRecord) : TAuthorRecord = {
		this
	}

	/**
	 * Create a detached, initialised TAuthorRecord
	 */
	def this(id : Integer, firstName : String, lastName : String, dateOfBirth : Date, yearOfBirth : Integer, address : UAddressTypeRecord) = {
		this()

		setValue(0, id)
		setValue(1, firstName)
		setValue(2, lastName)
		setValue(3, dateOfBirth)
		setValue(4, yearOfBirth)
		setValue(5, address)
	}
}
