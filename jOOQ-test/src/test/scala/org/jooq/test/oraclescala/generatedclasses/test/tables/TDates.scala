/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables


import java.lang.Class
import java.lang.Integer
import java.lang.Long
import java.lang.Object
import java.lang.String
import java.sql.Date
import java.sql.Timestamp
import java.util.Arrays
import java.util.List

import org.jooq.Field
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl
import org.jooq.test.oraclescala.generatedclasses.test.Keys
import org.jooq.test.oraclescala.generatedclasses.test.Test
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.TDatesRecord
import org.jooq.types.DayToSecond
import org.jooq.types.YearToMonth


object TDates {

	/**
	 * The reference instance of <code>TEST.T_DATES</code>
	 */
	val T_DATES = new TDates
}

/**
 * This class is generated by jOOQ.
 */
class TDates(alias : String, aliased : Table[TDatesRecord], parameters : Array[ Field[_] ]) extends TableImpl[TDatesRecord](alias, Test.TEST, aliased, parameters, "") {

	/**
	 * The class holding records for this type
	 */
	override def getRecordType : Class[TDatesRecord] = {
		classOf[TDatesRecord]
	}

	/**
	 * The column <code>TEST.T_DATES.ID</code>.
	 */
	val ID : TableField[TDatesRecord, Integer] = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

	/**
	 * The column <code>TEST.T_DATES.D</code>.
	 */
	val D : TableField[TDatesRecord, Date] = createField("D", org.jooq.impl.SQLDataType.DATE, "")

	/**
	 * The column <code>TEST.T_DATES.T</code>.
	 */
	val T : TableField[TDatesRecord, Timestamp] = createField("T", org.jooq.impl.SQLDataType.TIMESTAMP, "")

	/**
	 * The column <code>TEST.T_DATES.TS</code>.
	 */
	val TS : TableField[TDatesRecord, Timestamp] = createField("TS", org.jooq.impl.SQLDataType.TIMESTAMP, "")

	/**
	 * The column <code>TEST.T_DATES.T_TZ</code>.
	 */
	val T_TZ : TableField[TDatesRecord, Object] = createField("T_TZ", org.jooq.impl.DefaultDataType.getDefaultDataType("TIMESTAMP(6) WITH TIME ZONE"), "")

	/**
	 * The column <code>TEST.T_DATES.TS_TZ</code>.
	 */
	val TS_TZ : TableField[TDatesRecord, Object] = createField("TS_TZ", org.jooq.impl.DefaultDataType.getDefaultDataType("TIMESTAMP(6) WITH TIME ZONE"), "")

	/**
	 * The column <code>TEST.T_DATES.D_INT</code>.
	 */
	val D_INT : TableField[TDatesRecord, Integer] = createField("D_INT", org.jooq.impl.SQLDataType.INTEGER, "")

	/**
	 * The column <code>TEST.T_DATES.TS_BIGINT</code>.
	 */
	val TS_BIGINT : TableField[TDatesRecord, Long] = createField("TS_BIGINT", org.jooq.impl.SQLDataType.BIGINT, "")

	/**
	 * The column <code>TEST.T_DATES.I_Y</code>.
	 */
	val I_Y : TableField[TDatesRecord, YearToMonth] = createField("I_Y", org.jooq.impl.SQLDataType.INTERVALYEARTOMONTH, "")

	/**
	 * The column <code>TEST.T_DATES.I_D</code>.
	 */
	val I_D : TableField[TDatesRecord, DayToSecond] = createField("I_D", org.jooq.impl.SQLDataType.INTERVALDAYTOSECOND, "")

	/**
	 * Create a <code>TEST.T_DATES</code> table reference
	 */
	def this() = {
		this("T_DATES", null, null)
	}

	/**
	 * Create an aliased <code>TEST.T_DATES</code> table reference
	 */
	def this(alias : String) = {
		this(alias, org.jooq.test.oraclescala.generatedclasses.test.tables.TDates.T_DATES, null)
	}

	private def this(alias : String, aliased : Table[TDatesRecord]) = {
		this(alias, aliased, null)
	}

	override def getPrimaryKey : UniqueKey[TDatesRecord] = {
		Keys.PK_T_DATES
	}

	override def getKeys : List[ UniqueKey[TDatesRecord] ] = {
		return Arrays.asList[ UniqueKey[TDatesRecord] ](Keys.PK_T_DATES)
	}

	override def as(alias : String) : TDates = {
		new TDates(alias, this)
	}

	/**
	 * Rename this table
	 */
	def rename(name : String) : TDates = {
		new TDates(name, null)
	}
}
