/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables


import java.lang.Class
import java.lang.String
import java.math.BigDecimal

import org.jooq.Field
import org.jooq.Table
import org.jooq.TableField
import org.jooq.impl.TableImpl
import org.jooq.test.oraclescala.generatedclasses.test.Test
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.TReservedRecord


object TReserved {

	/**
	 * The reference instance of <code>TEST.T_RESERVED</code>
	 */
	val T_RESERVED = new TReserved
}

/**
 * This class is generated by jOOQ.
 */
class TReserved(alias : String, aliased : Table[TReservedRecord], parameters : Array[ Field[_] ]) extends TableImpl[TReservedRecord](alias, Test.TEST, aliased, parameters, "") {

	/**
	 * The class holding records for this type
	 */
	override def getRecordType : Class[TReservedRecord] = {
		classOf[TReservedRecord]
	}

	/**
	 * The column <code>TEST.T_RESERVED.abstract</code>.
	 */
	val ABSTRACT : TableField[TReservedRecord, BigDecimal] = createField("abstract", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.case</code>.
	 */
	val CASE : TableField[TReservedRecord, BigDecimal] = createField("case", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.catch</code>.
	 */
	val CATCH : TableField[TReservedRecord, BigDecimal] = createField("catch", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.class</code>.
	 */
	val CLASS : TableField[TReservedRecord, BigDecimal] = createField("class", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.def</code>.
	 */
	val DEF : TableField[TReservedRecord, BigDecimal] = createField("def", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.do</code>.
	 */
	val DO : TableField[TReservedRecord, BigDecimal] = createField("do", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.else</code>.
	 */
	val ELSE : TableField[TReservedRecord, BigDecimal] = createField("else", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.extends</code>.
	 */
	val EXTENDS : TableField[TReservedRecord, BigDecimal] = createField("extends", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.false</code>.
	 */
	val FALSE : TableField[TReservedRecord, BigDecimal] = createField("false", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.final</code>.
	 */
	val FINAL : TableField[TReservedRecord, BigDecimal] = createField("final", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.finally</code>.
	 */
	val FINALLY : TableField[TReservedRecord, BigDecimal] = createField("finally", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.for</code>.
	 */
	val FOR : TableField[TReservedRecord, BigDecimal] = createField("for", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.forSome</code>.
	 */
	val FORSOME : TableField[TReservedRecord, BigDecimal] = createField("forSome", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.if</code>.
	 */
	val IF : TableField[TReservedRecord, BigDecimal] = createField("if", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.implicit</code>.
	 */
	val IMPLICIT : TableField[TReservedRecord, BigDecimal] = createField("implicit", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.import</code>.
	 */
	val IMPORT : TableField[TReservedRecord, BigDecimal] = createField("import", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.lazy</code>.
	 */
	val LAZY : TableField[TReservedRecord, BigDecimal] = createField("lazy", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.match</code>.
	 */
	val MATCH : TableField[TReservedRecord, BigDecimal] = createField("match", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.new</code>.
	 */
	val NEW : TableField[TReservedRecord, BigDecimal] = createField("new", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.null</code>.
	 */
	val NULL : TableField[TReservedRecord, BigDecimal] = createField("null", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.object</code>.
	 */
	val OBJECT : TableField[TReservedRecord, BigDecimal] = createField("object", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.override</code>.
	 */
	val OVERRIDE : TableField[TReservedRecord, BigDecimal] = createField("override", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.package</code>.
	 */
	val PACKAGE : TableField[TReservedRecord, BigDecimal] = createField("package", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.private</code>.
	 */
	val PRIVATE : TableField[TReservedRecord, BigDecimal] = createField("private", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.protected</code>.
	 */
	val PROTECTED : TableField[TReservedRecord, BigDecimal] = createField("protected", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.return</code>.
	 */
	val RETURN : TableField[TReservedRecord, BigDecimal] = createField("return", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.sealed</code>.
	 */
	val SEALED : TableField[TReservedRecord, BigDecimal] = createField("sealed", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.super</code>.
	 */
	val SUPER : TableField[TReservedRecord, BigDecimal] = createField("super", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.this</code>.
	 */
	val THIS : TableField[TReservedRecord, BigDecimal] = createField("this", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.throw</code>.
	 */
	val THROW : TableField[TReservedRecord, BigDecimal] = createField("throw", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.trait</code>.
	 */
	val TRAIT : TableField[TReservedRecord, BigDecimal] = createField("trait", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.try</code>.
	 */
	val TRY : TableField[TReservedRecord, BigDecimal] = createField("try", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.true</code>.
	 */
	val TRUE : TableField[TReservedRecord, BigDecimal] = createField("true", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.type</code>.
	 */
	val TYPE : TableField[TReservedRecord, BigDecimal] = createField("type", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.val</code>.
	 */
	val VAL : TableField[TReservedRecord, BigDecimal] = createField("val", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.var</code>.
	 */
	val VAR : TableField[TReservedRecord, BigDecimal] = createField("var", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.while</code>.
	 */
	val WHILE : TableField[TReservedRecord, BigDecimal] = createField("while", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.with</code>.
	 */
	val WITH : TableField[TReservedRecord, BigDecimal] = createField("with", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * The column <code>TEST.T_RESERVED.yield</code>.
	 */
	val YIELD : TableField[TReservedRecord, BigDecimal] = createField("yield", org.jooq.impl.SQLDataType.NUMERIC, "")

	/**
	 * Create a <code>TEST.T_RESERVED</code> table reference
	 */
	def this() = {
		this("T_RESERVED", null, null)
	}

	/**
	 * Create an aliased <code>TEST.T_RESERVED</code> table reference
	 */
	def this(alias : String) = {
		this(alias, org.jooq.test.oraclescala.generatedclasses.test.tables.TReserved.T_RESERVED, null)
	}

	private def this(alias : String, aliased : Table[TReservedRecord]) = {
		this(alias, aliased, null)
	}

	override def as(alias : String) : TReserved = {
		new TReserved(alias, this)
	}

	/**
	 * Rename this table
	 */
	def rename(name : String) : TReserved = {
		new TReserved(name, null)
	}
}
