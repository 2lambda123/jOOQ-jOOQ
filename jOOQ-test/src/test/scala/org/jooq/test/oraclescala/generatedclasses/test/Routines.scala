/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test


import java.lang.Number
import java.lang.String
import java.math.BigDecimal
import java.sql.Date
import java.time.LocalDateTime

import org.jooq.AggregateFunction
import org.jooq.Configuration
import org.jooq.Field
import org.jooq.Result
import org.jooq.test.oraclescala.generatedclasses.test.routines.F2155
import org.jooq.test.oraclescala.generatedclasses.test.routines.F317
import org.jooq.test.oraclescala.generatedclasses.test.routines.F377
import org.jooq.test.oraclescala.generatedclasses.test.routines.F378
import org.jooq.test.oraclescala.generatedclasses.test.routines.F691cursorIn
import org.jooq.test.oraclescala.generatedclasses.test.routines.F691cursorOut
import org.jooq.test.oraclescala.generatedclasses.test.routines.FArrays1
import org.jooq.test.oraclescala.generatedclasses.test.routines.FArrays2
import org.jooq.test.oraclescala.generatedclasses.test.routines.FArrays3
import org.jooq.test.oraclescala.generatedclasses.test.routines.FArrays4
import org.jooq.test.oraclescala.generatedclasses.test.routines.FAuthorExists
import org.jooq.test.oraclescala.generatedclasses.test.routines.FGetOneCursor
import org.jooq.test.oraclescala.generatedclasses.test.routines.FNumber
import org.jooq.test.oraclescala.generatedclasses.test.routines.FOne
import org.jooq.test.oraclescala.generatedclasses.test.routines.FPipelinedArray1
import org.jooq.test.oraclescala.generatedclasses.test.routines.FPipelinedArray4
import org.jooq.test.oraclescala.generatedclasses.test.routines.FPipelinedTable1
import org.jooq.test.oraclescala.generatedclasses.test.routines.FPipelinedTable4
import org.jooq.test.oraclescala.generatedclasses.test.routines.FTables1
import org.jooq.test.oraclescala.generatedclasses.test.routines.FTables2
import org.jooq.test.oraclescala.generatedclasses.test.routines.FTables3
import org.jooq.test.oraclescala.generatedclasses.test.routines.FTables4
import org.jooq.test.oraclescala.generatedclasses.test.routines.P1490
import org.jooq.test.oraclescala.generatedclasses.test.routines.P2155
import org.jooq.test.oraclescala.generatedclasses.test.routines.P3005
import org.jooq.test.oraclescala.generatedclasses.test.routines.P377
import org.jooq.test.oraclescala.generatedclasses.test.routines.P391
import org.jooq.test.oraclescala.generatedclasses.test.routines.PArrays1
import org.jooq.test.oraclescala.generatedclasses.test.routines.PArrays2
import org.jooq.test.oraclescala.generatedclasses.test.routines.PArrays3
import org.jooq.test.oraclescala.generatedclasses.test.routines.PArrays4
import org.jooq.test.oraclescala.generatedclasses.test.routines.PAuthorExists
import org.jooq.test.oraclescala.generatedclasses.test.routines.PCreateAuthor
import org.jooq.test.oraclescala.generatedclasses.test.routines.PCreateAuthorByName
import org.jooq.test.oraclescala.generatedclasses.test.routines.PDefault
import org.jooq.test.oraclescala.generatedclasses.test.routines.PEnhanceAddress1
import org.jooq.test.oraclescala.generatedclasses.test.routines.PEnhanceAddress2
import org.jooq.test.oraclescala.generatedclasses.test.routines.PEnhanceAddress3
import org.jooq.test.oraclescala.generatedclasses.test.routines.PGetOneCursor
import org.jooq.test.oraclescala.generatedclasses.test.routines.PGetTwoCursors
import org.jooq.test.oraclescala.generatedclasses.test.routines.PNested
import org.jooq.test.oraclescala.generatedclasses.test.routines.PTables1
import org.jooq.test.oraclescala.generatedclasses.test.routines.PTables2
import org.jooq.test.oraclescala.generatedclasses.test.routines.PTables3
import org.jooq.test.oraclescala.generatedclasses.test.routines.PTables4
import org.jooq.test.oraclescala.generatedclasses.test.routines.PUnused
import org.jooq.test.oraclescala.generatedclasses.test.routines.SecondMax
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.UAddressTypeRecord
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.UBookArrayRecord
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.UBookTableRecord
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.UNested_3Record
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.UNumberArrayRecord
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.UNumberLongArrayRecord
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.UNumberLongTableRecord
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.UNumberTableRecord
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.UStringArrayRecord
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.UStringTableRecord
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.U_3005Record


/**
 * Convenience access to all stored procedures and functions in TEST
 */
object Routines {

	/**
	 * Call <code>TEST.F_ARRAYS1</code>
	 */
	def fArrays1(configuration : Configuration, inArray : UNumberArrayRecord) : UNumberArrayRecord = {
		val f = new FArrays1()
		f.setInArray(inArray)

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>TEST.F_ARRAYS1</code> as a field
	 */
	def fArrays1(inArray : UNumberArrayRecord) : Field[UNumberArrayRecord] = {
		val f = new FArrays1
		f.setInArray(inArray)

		return f.asField
	}

	/**
	 * Get <code>TEST.F_ARRAYS1</code> as a field
	 */
	def fArrays1(inArray : Field[UNumberArrayRecord]) : Field[UNumberArrayRecord] = {
		val f = new FArrays1
		f.setInArray(inArray)

		return f.asField
	}

	/**
	 * Call <code>TEST.F_ARRAYS2</code>
	 */
	def fArrays2(configuration : Configuration, inArray : UNumberLongArrayRecord) : UNumberLongArrayRecord = {
		val f = new FArrays2()
		f.setInArray(inArray)

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>TEST.F_ARRAYS2</code> as a field
	 */
	def fArrays2(inArray : UNumberLongArrayRecord) : Field[UNumberLongArrayRecord] = {
		val f = new FArrays2
		f.setInArray(inArray)

		return f.asField
	}

	/**
	 * Get <code>TEST.F_ARRAYS2</code> as a field
	 */
	def fArrays2(inArray : Field[UNumberLongArrayRecord]) : Field[UNumberLongArrayRecord] = {
		val f = new FArrays2
		f.setInArray(inArray)

		return f.asField
	}

	/**
	 * Call <code>TEST.F_ARRAYS3</code>
	 */
	def fArrays3(configuration : Configuration, inArray : UStringArrayRecord) : UStringArrayRecord = {
		val f = new FArrays3()
		f.setInArray(inArray)

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>TEST.F_ARRAYS3</code> as a field
	 */
	def fArrays3(inArray : UStringArrayRecord) : Field[UStringArrayRecord] = {
		val f = new FArrays3
		f.setInArray(inArray)

		return f.asField
	}

	/**
	 * Get <code>TEST.F_ARRAYS3</code> as a field
	 */
	def fArrays3(inArray : Field[UStringArrayRecord]) : Field[UStringArrayRecord] = {
		val f = new FArrays3
		f.setInArray(inArray)

		return f.asField
	}

	/**
	 * Call <code>TEST.F_ARRAYS4</code>
	 */
	def fArrays4(configuration : Configuration, inArray : UBookArrayRecord) : UBookArrayRecord = {
		val f = new FArrays4()
		f.setInArray(inArray)

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>TEST.F_ARRAYS4</code> as a field
	 */
	def fArrays4(inArray : UBookArrayRecord) : Field[UBookArrayRecord] = {
		val f = new FArrays4
		f.setInArray(inArray)

		return f.asField
	}

	/**
	 * Get <code>TEST.F_ARRAYS4</code> as a field
	 */
	def fArrays4(inArray : Field[UBookArrayRecord]) : Field[UBookArrayRecord] = {
		val f = new FArrays4
		f.setInArray(inArray)

		return f.asField
	}

	/**
	 * Call <code>TEST.F_AUTHOR_EXISTS</code>
	 */
	def fAuthorExists(configuration : Configuration, authorName : String) : BigDecimal = {
		val f = new FAuthorExists()
		f.setAuthorName(authorName)

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>TEST.F_AUTHOR_EXISTS</code> as a field
	 */
	def fAuthorExists(authorName : String) : Field[BigDecimal] = {
		val f = new FAuthorExists
		f.setAuthorName(authorName)

		return f.asField
	}

	/**
	 * Get <code>TEST.F_AUTHOR_EXISTS</code> as a field
	 */
	def fAuthorExists(authorName : Field[String]) : Field[BigDecimal] = {
		val f = new FAuthorExists
		f.setAuthorName(authorName)

		return f.asField
	}

	/**
	 * Call <code>TEST.F_GET_ONE_CURSOR</code>
	 */
	def fGetOneCursor(configuration : Configuration, bookIds : UNumberArrayRecord) : Result[org.jooq.Record] = {
		val f = new FGetOneCursor()
		f.setBookIds(bookIds)

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>TEST.F_GET_ONE_CURSOR</code> as a field
	 */
	def fGetOneCursor(bookIds : UNumberArrayRecord) : Field[Result[org.jooq.Record]] = {
		val f = new FGetOneCursor
		f.setBookIds(bookIds)

		return f.asField
	}

	/**
	 * Get <code>TEST.F_GET_ONE_CURSOR</code> as a field
	 */
	def fGetOneCursor(bookIds : Field[UNumberArrayRecord]) : Field[Result[org.jooq.Record]] = {
		val f = new FGetOneCursor
		f.setBookIds(bookIds)

		return f.asField
	}

	/**
	 * Call <code>TEST.F_NUMBER</code>
	 */
	def fNumber(configuration : Configuration, n : Number) : BigDecimal = {
		val f = new FNumber()
		f.setN(n)

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>TEST.F_NUMBER</code> as a field
	 */
	def fNumber(n : Number) : Field[BigDecimal] = {
		val f = new FNumber
		f.setN(n)

		return f.asField
	}

	/**
	 * Get <code>TEST.F_NUMBER</code> as a field
	 */
	def fNumber(n : Field[_ <: Number]) : Field[BigDecimal] = {
		val f = new FNumber
		f.setN(n)

		return f.asField
	}

	/**
	 * Call <code>TEST.F_ONE</code>
	 */
	def fOne(configuration : Configuration) : BigDecimal = {
		val f = new FOne()

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>TEST.F_ONE</code> as a field
	 */
	def fOne() : Field[BigDecimal] = {
		val f = new FOne

		return f.asField
	}

	/**
	 * Call <code>TEST.F_PIPELINED_ARRAY1</code>
	 */
	def fPipelinedArray1(configuration : Configuration) : UNumberArrayRecord = {
		val f = new FPipelinedArray1()

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>TEST.F_PIPELINED_ARRAY1</code> as a field
	 */
	def fPipelinedArray1() : Field[UNumberArrayRecord] = {
		val f = new FPipelinedArray1

		return f.asField
	}

	/**
	 * Call <code>TEST.F_PIPELINED_ARRAY4</code>
	 */
	def fPipelinedArray4(configuration : Configuration) : UBookArrayRecord = {
		val f = new FPipelinedArray4()

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>TEST.F_PIPELINED_ARRAY4</code> as a field
	 */
	def fPipelinedArray4() : Field[UBookArrayRecord] = {
		val f = new FPipelinedArray4

		return f.asField
	}

	/**
	 * Call <code>TEST.F_PIPELINED_TABLE1</code>
	 */
	def fPipelinedTable1(configuration : Configuration) : UNumberTableRecord = {
		val f = new FPipelinedTable1()

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>TEST.F_PIPELINED_TABLE1</code> as a field
	 */
	def fPipelinedTable1() : Field[UNumberTableRecord] = {
		val f = new FPipelinedTable1

		return f.asField
	}

	/**
	 * Call <code>TEST.F_PIPELINED_TABLE4</code>
	 */
	def fPipelinedTable4(configuration : Configuration) : UBookTableRecord = {
		val f = new FPipelinedTable4()

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>TEST.F_PIPELINED_TABLE4</code> as a field
	 */
	def fPipelinedTable4() : Field[UBookTableRecord] = {
		val f = new FPipelinedTable4

		return f.asField
	}

	/**
	 * Call <code>TEST.F_TABLES1</code>
	 */
	def fTables1(configuration : Configuration, inTable : UNumberTableRecord) : UNumberTableRecord = {
		val f = new FTables1()
		f.setInTable(inTable)

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>TEST.F_TABLES1</code> as a field
	 */
	def fTables1(inTable : UNumberTableRecord) : Field[UNumberTableRecord] = {
		val f = new FTables1
		f.setInTable(inTable)

		return f.asField
	}

	/**
	 * Get <code>TEST.F_TABLES1</code> as a field
	 */
	def fTables1(inTable : Field[UNumberTableRecord]) : Field[UNumberTableRecord] = {
		val f = new FTables1
		f.setInTable(inTable)

		return f.asField
	}

	/**
	 * Call <code>TEST.F_TABLES2</code>
	 */
	def fTables2(configuration : Configuration, inTable : UNumberLongTableRecord) : UNumberLongTableRecord = {
		val f = new FTables2()
		f.setInTable(inTable)

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>TEST.F_TABLES2</code> as a field
	 */
	def fTables2(inTable : UNumberLongTableRecord) : Field[UNumberLongTableRecord] = {
		val f = new FTables2
		f.setInTable(inTable)

		return f.asField
	}

	/**
	 * Get <code>TEST.F_TABLES2</code> as a field
	 */
	def fTables2(inTable : Field[UNumberLongTableRecord]) : Field[UNumberLongTableRecord] = {
		val f = new FTables2
		f.setInTable(inTable)

		return f.asField
	}

	/**
	 * Call <code>TEST.F_TABLES3</code>
	 */
	def fTables3(configuration : Configuration, inTable : UStringTableRecord) : UStringTableRecord = {
		val f = new FTables3()
		f.setInTable(inTable)

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>TEST.F_TABLES3</code> as a field
	 */
	def fTables3(inTable : UStringTableRecord) : Field[UStringTableRecord] = {
		val f = new FTables3
		f.setInTable(inTable)

		return f.asField
	}

	/**
	 * Get <code>TEST.F_TABLES3</code> as a field
	 */
	def fTables3(inTable : Field[UStringTableRecord]) : Field[UStringTableRecord] = {
		val f = new FTables3
		f.setInTable(inTable)

		return f.asField
	}

	/**
	 * Call <code>TEST.F_TABLES4</code>
	 */
	def fTables4(configuration : Configuration, inTable : UBookTableRecord) : UBookTableRecord = {
		val f = new FTables4()
		f.setInTable(inTable)

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>TEST.F_TABLES4</code> as a field
	 */
	def fTables4(inTable : UBookTableRecord) : Field[UBookTableRecord] = {
		val f = new FTables4
		f.setInTable(inTable)

		return f.asField
	}

	/**
	 * Get <code>TEST.F_TABLES4</code> as a field
	 */
	def fTables4(inTable : Field[UBookTableRecord]) : Field[UBookTableRecord] = {
		val f = new FTables4
		f.setInTable(inTable)

		return f.asField
	}

	/**
	 * Call <code>TEST.F2155</code>
	 */
	def f2155(configuration : Configuration, p1 : Number, p2 : LocalDateTime, p3 : Number, p4 : LocalDateTime) : LocalDateTime = {
		val f = new F2155()
		f.setP1(p1)
		f.setP2(p2)
		f.setP3(p3)
		f.setP4(p4)

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>TEST.F2155</code> as a field
	 */
	def f2155(p1 : Number, p2 : LocalDateTime, p3 : Number, p4 : LocalDateTime) : Field[LocalDateTime] = {
		val f = new F2155
		f.setP1(p1)
		f.setP2(p2)
		f.setP3(p3)
		f.setP4(p4)

		return f.asField
	}

	/**
	 * Get <code>TEST.F2155</code> as a field
	 */
	def f2155(p1 : Field[_ <: Number], p2 : Field[LocalDateTime], p3 : Field[_ <: Number], p4 : Field[LocalDateTime]) : Field[LocalDateTime] = {
		val f = new F2155
		f.setP1(p1)
		f.setP2(p2)
		f.setP3(p3)
		f.setP4(p4)

		return f.asField
	}

	/**
	 * Call <code>TEST.F317</code>
	 */
	def f317(configuration : Configuration, p1 : Number, p2 : Number, p3 : Number, p4 : Number) : BigDecimal = {
		val f = new F317()
		f.setP1(p1)
		f.setP2(p2)
		f.setP3(p3)
		f.setP4(p4)

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>TEST.F317</code> as a field
	 */
	def f317(p1 : Number, p2 : Number, p3 : Number, p4 : Number) : Field[BigDecimal] = {
		val f = new F317
		f.setP1(p1)
		f.setP2(p2)
		f.setP3(p3)
		f.setP4(p4)

		return f.asField
	}

	/**
	 * Get <code>TEST.F317</code> as a field
	 */
	def f317(p1 : Field[_ <: Number], p2 : Field[_ <: Number], p3 : Field[_ <: Number], p4 : Field[_ <: Number]) : Field[BigDecimal] = {
		val f = new F317
		f.setP1(p1)
		f.setP2(p2)
		f.setP3(p3)
		f.setP4(p4)

		return f.asField
	}

	/**
	 * Call <code>TEST.F377</code>
	 */
	def f377(configuration : Configuration) : Unit = {
		val p = new F377

		p.execute(configuration)
	}

	/**
	 * Call <code>TEST.F378</code>
	 */
	def f378(configuration : Configuration, i : Number, io : Number) : F378 = {
		val p = new F378
		p.setI(i)
		p.setIo(io)

		p.execute(configuration)
		return p
	}

	/**
	 * Call <code>TEST.F691CURSOR_IN</code>
	 */
	def f691cursorIn(configuration : Configuration, c : Result[org.jooq.Record]) : BigDecimal = {
		val f = new F691cursorIn()
		f.setC(c)

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>TEST.F691CURSOR_IN</code> as a field
	 */
	def f691cursorIn(c : Result[org.jooq.Record]) : Field[BigDecimal] = {
		val f = new F691cursorIn
		f.setC(c)

		return f.asField
	}

	/**
	 * Get <code>TEST.F691CURSOR_IN</code> as a field
	 */
	def f691cursorIn(c : Field[Result[org.jooq.Record]]) : Field[BigDecimal] = {
		val f = new F691cursorIn
		f.setC(c)

		return f.asField
	}

	/**
	 * Call <code>TEST.F691CURSOR_OUT</code>
	 */
	def f691cursorOut(configuration : Configuration) : Result[org.jooq.Record] = {
		val f = new F691cursorOut()

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>TEST.F691CURSOR_OUT</code> as a field
	 */
	def f691cursorOut() : Field[Result[org.jooq.Record]] = {
		val f = new F691cursorOut

		return f.asField
	}

	/**
	 * Call <code>TEST.P_ARRAYS1</code>
	 */
	def pArrays1(configuration : Configuration, inArray : UNumberArrayRecord) : UNumberArrayRecord = {
		val p = new PArrays1
		p.setInArray(inArray)

		p.execute(configuration)
		return p.getOutArray
	}

	/**
	 * Call <code>TEST.P_ARRAYS2</code>
	 */
	def pArrays2(configuration : Configuration, inArray : UNumberLongArrayRecord) : UNumberLongArrayRecord = {
		val p = new PArrays2
		p.setInArray(inArray)

		p.execute(configuration)
		return p.getOutArray
	}

	/**
	 * Call <code>TEST.P_ARRAYS3</code>
	 */
	def pArrays3(configuration : Configuration, inArray : UStringArrayRecord) : UStringArrayRecord = {
		val p = new PArrays3
		p.setInArray(inArray)

		p.execute(configuration)
		return p.getOutArray
	}

	/**
	 * Call <code>TEST.P_ARRAYS4</code>
	 */
	def pArrays4(configuration : Configuration, inArray : UBookArrayRecord) : UBookArrayRecord = {
		val p = new PArrays4
		p.setInArray(inArray)

		p.execute(configuration)
		return p.getOutArray
	}

	/**
	 * Call <code>TEST.P_AUTHOR_EXISTS</code>
	 */
	def pAuthorExists(configuration : Configuration, authorName : String) : BigDecimal = {
		val p = new PAuthorExists
		p.setAuthorName(authorName)

		p.execute(configuration)
		return p.getResult
	}

	/**
	 * Call <code>TEST.P_CREATE_AUTHOR</code>
	 */
	def pCreateAuthor(configuration : Configuration) : Unit = {
		val p = new PCreateAuthor

		p.execute(configuration)
	}

	/**
	 * Call <code>TEST.P_CREATE_AUTHOR_BY_NAME</code>
	 */
	def pCreateAuthorByName(configuration : Configuration, firstName : String, lastName : String) : Unit = {
		val p = new PCreateAuthorByName
		p.setFirstName(firstName)
		p.setLastName(lastName)

		p.execute(configuration)
	}

	/**
	 * Call <code>TEST.P_DEFAULT</code>
	 */
	def pDefault(configuration : Configuration, pInNumber : Number, pInVarchar : String, pInDate : Date) : PDefault = {
		val p = new PDefault
		p.setPInNumber(pInNumber)
		p.setPInVarchar(pInVarchar)
		p.setPInDate(pInDate)

		p.execute(configuration)
		return p
	}

	/**
	 * Call <code>TEST.P_ENHANCE_ADDRESS1</code>
	 */
	def pEnhanceAddress1(configuration : Configuration, address : UAddressTypeRecord) : String = {
		val p = new PEnhanceAddress1
		p.setAddress(address)

		p.execute(configuration)
		return p.getNo
	}

	/**
	 * Call <code>TEST.P_ENHANCE_ADDRESS2</code>
	 */
	def pEnhanceAddress2(configuration : Configuration) : UAddressTypeRecord = {
		val p = new PEnhanceAddress2

		p.execute(configuration)
		return p.getAddress
	}

	/**
	 * Call <code>TEST.P_ENHANCE_ADDRESS3</code>
	 */
	def pEnhanceAddress3(configuration : Configuration, address : UAddressTypeRecord) : UAddressTypeRecord = {
		val p = new PEnhanceAddress3
		p.setAddress(address)

		p.execute(configuration)
		return p.getAddress
	}

	/**
	 * Call <code>TEST.P_GET_ONE_CURSOR</code>
	 */
	def pGetOneCursor(configuration : Configuration, bookIds : UNumberArrayRecord) : PGetOneCursor = {
		val p = new PGetOneCursor
		p.setBookIds(bookIds)

		p.execute(configuration)
		return p
	}

	/**
	 * Call <code>TEST.P_GET_TWO_CURSORS</code>
	 */
	def pGetTwoCursors(configuration : Configuration) : PGetTwoCursors = {
		val p = new PGetTwoCursors

		p.execute(configuration)
		return p
	}

	/**
	 * Call <code>TEST.P_NESTED</code>
	 */
	def pNested(configuration : Configuration, p1 : UNested_3Record, p2 : UNested_3Record) : PNested = {
		val p = new PNested
		p.setP1(p1)
		p.setP2(p2)

		p.execute(configuration)
		return p
	}

	/**
	 * Call <code>TEST.P_TABLES1</code>
	 */
	def pTables1(configuration : Configuration, inTable : UNumberTableRecord) : UNumberTableRecord = {
		val p = new PTables1
		p.setInTable(inTable)

		p.execute(configuration)
		return p.getOutTable
	}

	/**
	 * Call <code>TEST.P_TABLES2</code>
	 */
	def pTables2(configuration : Configuration, inTable : UNumberLongTableRecord) : UNumberLongTableRecord = {
		val p = new PTables2
		p.setInTable(inTable)

		p.execute(configuration)
		return p.getOutTable
	}

	/**
	 * Call <code>TEST.P_TABLES3</code>
	 */
	def pTables3(configuration : Configuration, inTable : UStringTableRecord) : UStringTableRecord = {
		val p = new PTables3
		p.setInTable(inTable)

		p.execute(configuration)
		return p.getOutTable
	}

	/**
	 * Call <code>TEST.P_TABLES4</code>
	 */
	def pTables4(configuration : Configuration, inTable : UBookTableRecord) : UBookTableRecord = {
		val p = new PTables4
		p.setInTable(inTable)

		p.execute(configuration)
		return p.getOutTable
	}

	/**
	 * Call <code>TEST.P_UNUSED</code>
	 */
	def pUnused(configuration : Configuration, in1 : String, out2 : Number) : PUnused = {
		val p = new PUnused
		p.setIn1(in1)
		p.setOut2(out2)

		p.execute(configuration)
		return p
	}

	/**
	 * Call <code>TEST.P1490</code>
	 */
	def p1490(configuration : Configuration, value : Number) : Unit = {
		val p = new P1490
		p.setValue(value)

		p.execute(configuration)
	}

	/**
	 * Call <code>TEST.P2155</code>
	 */
	def p2155(configuration : Configuration, p1 : Number, p2 : LocalDateTime) : P2155 = {
		val p = new P2155
		p.setP1(p1)
		p.setP2(p2)

		p.execute(configuration)
		return p
	}

	/**
	 * Call <code>TEST.P3005</code>
	 */
	def p3005(configuration : Configuration) : U_3005Record = {
		val p = new P3005

		p.execute(configuration)
		return p.getP1
	}

	/**
	 * Call <code>TEST.P377</code>
	 */
	def p377(configuration : Configuration) : Unit = {
		val p = new P377

		p.execute(configuration)
	}

	/**
	 * Call <code>TEST.P391</code>
	 */
	def p391(configuration : Configuration, i1 : Number, io1 : Number, io2 : Number, i2 : Number) : P391 = {
		val p = new P391
		p.setI1(i1)
		p.setIo1(io1)
		p.setIo2(io2)
		p.setI2(i2)

		p.execute(configuration)
		return p
	}

	/**
	 * Get <code>TEST.SECOND_MAX</code> as a field
	 */
	def secondMax(input : Number) : AggregateFunction[BigDecimal] = {
		val f = new SecondMax
		f.setInput(input)

		return f.asAggregateFunction
	}

	/**
	 * Get <code>TEST.SECOND_MAX</code> as a field
	 */
	def secondMax(input : Field[_ <: Number]) : AggregateFunction[BigDecimal] = {
		val f = new SecondMax
		f.setInput(input)

		return f.asAggregateFunction
	}
}
