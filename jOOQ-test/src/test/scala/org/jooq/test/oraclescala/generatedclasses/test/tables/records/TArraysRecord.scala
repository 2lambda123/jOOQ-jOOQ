/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.records


import java.lang.Integer

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Id
import javax.persistence.Table
import javax.validation.constraints.NotNull

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.test.oraclescala.generatedclasses.test.tables.TArrays
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.UDateArrayRecord
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.UNumberArrayRecord
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.UNumberLongArrayRecord
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.UStringArrayRecord


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_ARRAYS", schema = "TEST")
class TArraysRecord extends UpdatableRecordImpl[TArraysRecord](TArrays.T_ARRAYS) with Record5[Integer, UStringArrayRecord, UNumberArrayRecord, UNumberLongArrayRecord, UDateArrayRecord] {

	/**
	 * Setter for <code>TEST.T_ARRAYS.ID</code>.
	 */
	def setId(value : Integer) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>TEST.T_ARRAYS.ID</code>.
	 */
	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 7)
	@NotNull
	def getId : Integer = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>TEST.T_ARRAYS.STRING_ARRAY</code>.
	 */
	def setStringArray(value : UStringArrayRecord) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>TEST.T_ARRAYS.STRING_ARRAY</code>.
	 */
	@Column(name = "STRING_ARRAY")
	def getStringArray : UStringArrayRecord = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[UStringArrayRecord]
	}

	/**
	 * Setter for <code>TEST.T_ARRAYS.NUMBER_ARRAY</code>.
	 */
	def setNumberArray(value : UNumberArrayRecord) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>TEST.T_ARRAYS.NUMBER_ARRAY</code>.
	 */
	@Column(name = "NUMBER_ARRAY")
	def getNumberArray : UNumberArrayRecord = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[UNumberArrayRecord]
	}

	/**
	 * Setter for <code>TEST.T_ARRAYS.NUMBER_LONG_ARRAY</code>.
	 */
	def setNumberLongArray(value : UNumberLongArrayRecord) : Unit = {
		setValue(3, value)
	}

	/**
	 * Getter for <code>TEST.T_ARRAYS.NUMBER_LONG_ARRAY</code>.
	 */
	@Column(name = "NUMBER_LONG_ARRAY")
	def getNumberLongArray : UNumberLongArrayRecord = {
		val r = getValue(3)
		if (r == null) null else r.asInstanceOf[UNumberLongArrayRecord]
	}

	/**
	 * Setter for <code>TEST.T_ARRAYS.DATE_ARRAY</code>.
	 */
	def setDateArray(value : UDateArrayRecord) : Unit = {
		setValue(4, value)
	}

	/**
	 * Getter for <code>TEST.T_ARRAYS.DATE_ARRAY</code>.
	 */
	@Column(name = "DATE_ARRAY")
	def getDateArray : UDateArrayRecord = {
		val r = getValue(4)
		if (r == null) null else r.asInstanceOf[UDateArrayRecord]
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------
	override def key() : Record1[Integer] = {
		return super.key.asInstanceOf[ Record1[Integer] ]
	}

	// -------------------------------------------------------------------------
	// Record5 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row5[Integer, UStringArrayRecord, UNumberArrayRecord, UNumberLongArrayRecord, UDateArrayRecord] = {
		super.fieldsRow.asInstanceOf[ Row5[Integer, UStringArrayRecord, UNumberArrayRecord, UNumberLongArrayRecord, UDateArrayRecord] ]
	}

	override def valuesRow : Row5[Integer, UStringArrayRecord, UNumberArrayRecord, UNumberLongArrayRecord, UDateArrayRecord] = {
		super.valuesRow.asInstanceOf[ Row5[Integer, UStringArrayRecord, UNumberArrayRecord, UNumberLongArrayRecord, UDateArrayRecord] ]
	}
	override def field1 : Field[Integer] = TArrays.T_ARRAYS.ID
	override def field2 : Field[UStringArrayRecord] = TArrays.T_ARRAYS.STRING_ARRAY
	override def field3 : Field[UNumberArrayRecord] = TArrays.T_ARRAYS.NUMBER_ARRAY
	override def field4 : Field[UNumberLongArrayRecord] = TArrays.T_ARRAYS.NUMBER_LONG_ARRAY
	override def field5 : Field[UDateArrayRecord] = TArrays.T_ARRAYS.DATE_ARRAY
	override def value1 : Integer = getId
	override def value2 : UStringArrayRecord = getStringArray
	override def value3 : UNumberArrayRecord = getNumberArray
	override def value4 : UNumberLongArrayRecord = getNumberLongArray
	override def value5 : UDateArrayRecord = getDateArray

	override def value1(value : Integer) : TArraysRecord = {
		setId(value)
		this
	}

	override def value2(value : UStringArrayRecord) : TArraysRecord = {
		setStringArray(value)
		this
	}

	override def value3(value : UNumberArrayRecord) : TArraysRecord = {
		setNumberArray(value)
		this
	}

	override def value4(value : UNumberLongArrayRecord) : TArraysRecord = {
		setNumberLongArray(value)
		this
	}

	override def value5(value : UDateArrayRecord) : TArraysRecord = {
		setDateArray(value)
		this
	}

	override def values(value1 : Integer, value2 : UStringArrayRecord, value3 : UNumberArrayRecord, value4 : UNumberLongArrayRecord, value5 : UDateArrayRecord) : TArraysRecord = {
		this
	}

	/**
	 * Create a detached, initialised TArraysRecord
	 */
	def this(id : Integer, stringArray : UStringArrayRecord, numberArray : UNumberArrayRecord, numberLongArray : UNumberLongArrayRecord, dateArray : UDateArrayRecord) = {
		this()

		setValue(0, id)
		setValue(1, stringArray)
		setValue(2, numberArray)
		setValue(3, numberLongArray)
		setValue(4, dateArray)
	}
}
