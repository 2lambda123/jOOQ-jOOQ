/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.pojos


import java.io.Serializable
import java.lang.Byte
import java.lang.Double
import java.lang.Integer
import java.lang.Long
import java.lang.Short
import java.lang.StringBuilder
import java.math.BigDecimal
import java.math.BigInteger

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Id
import javax.persistence.Table
import javax.validation.constraints.NotNull


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_639_NUMBERS_TABLE", schema = "TEST")
class T_639NumbersTable(
	  private var id : Integer   
	, private var byte : Byte      
	, private var short : Short     
	, private var integer : Integer   
	, private var long : Long      
	, private var byteDecimal : Byte      
	, private var shortDecimal : Short     
	, private var integerDecimal : Integer   
	, private var longDecimal : Long      
	, private var bigInteger : BigInteger
	, private var bigDecimal : BigDecimal
	, private var float : Double    
	, private var real : Double    
) extends Serializable {

	def this() = {
		this(null, null, null, null, null, null, null, null, null, null, null, null, null)
	}

	def this (value : T_639NumbersTable) = {
		this(
			  value.id
			, value.byte
			, value.short
			, value.integer
			, value.long
			, value.byteDecimal
			, value.shortDecimal
			, value.integerDecimal
			, value.longDecimal
			, value.bigInteger
			, value.bigDecimal
			, value.float
			, value.real
		)
	}

	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 7)
	@NotNull
	def getId : Integer = {
		this.id
	}

	def setId(id : Integer) : Unit = {
		this.id = id
	}

	@Column(name = "BYTE", precision = 2)
	def getByte : Byte = {
		this.byte
	}

	def setByte(byte : Byte) : Unit = {
		this.byte = byte
	}

	@Column(name = "SHORT", precision = 4)
	def getShort : Short = {
		this.short
	}

	def setShort(short : Short) : Unit = {
		this.short = short
	}

	@Column(name = "INTEGER", precision = 7)
	def getInteger : Integer = {
		this.integer
	}

	def setInteger(integer : Integer) : Unit = {
		this.integer = integer
	}

	@Column(name = "LONG", precision = 18)
	def getLong : Long = {
		this.long
	}

	def setLong(long : Long) : Unit = {
		this.long = long
	}

	@Column(name = "BYTE_DECIMAL", precision = 2)
	def getByteDecimal : Byte = {
		this.byteDecimal
	}

	def setByteDecimal(byteDecimal : Byte) : Unit = {
		this.byteDecimal = byteDecimal
	}

	@Column(name = "SHORT_DECIMAL", precision = 4)
	def getShortDecimal : Short = {
		this.shortDecimal
	}

	def setShortDecimal(shortDecimal : Short) : Unit = {
		this.shortDecimal = shortDecimal
	}

	@Column(name = "INTEGER_DECIMAL", precision = 9)
	def getIntegerDecimal : Integer = {
		this.integerDecimal
	}

	def setIntegerDecimal(integerDecimal : Integer) : Unit = {
		this.integerDecimal = integerDecimal
	}

	@Column(name = "LONG_DECIMAL", precision = 18)
	def getLongDecimal : Long = {
		this.longDecimal
	}

	def setLongDecimal(longDecimal : Long) : Unit = {
		this.longDecimal = longDecimal
	}

	@Column(name = "BIG_INTEGER", precision = 22)
	def getBigInteger : BigInteger = {
		this.bigInteger
	}

	def setBigInteger(bigInteger : BigInteger) : Unit = {
		this.bigInteger = bigInteger
	}

	@Column(name = "BIG_DECIMAL", precision = 22, scale = 5)
	def getBigDecimal : BigDecimal = {
		this.bigDecimal
	}

	def setBigDecimal(bigDecimal : BigDecimal) : Unit = {
		this.bigDecimal = bigDecimal
	}

	@Column(name = "FLOAT", precision = 126)
	def getFloat : Double = {
		this.float
	}

	def setFloat(float : Double) : Unit = {
		this.float = float
	}

	@Column(name = "REAL", precision = 63)
	def getReal : Double = {
		this.real
	}

	def setReal(real : Double) : Unit = {
		this.real = real
	}

	override def equals(obj : Any) : scala.Boolean = {
		if (this == obj)
			return true
		if (obj == null)
			return false
		if (getClass() != obj.getClass())
			return false
		val other = obj.asInstanceOf[T_639NumbersTable]
		if (id == null) {
			if (other.id != null)
				return false
		}
		else if (!id.equals(other.id))
			return false
		if (byte == null) {
			if (other.byte != null)
				return false
		}
		else if (!byte.equals(other.byte))
			return false
		if (short == null) {
			if (other.short != null)
				return false
		}
		else if (!short.equals(other.short))
			return false
		if (integer == null) {
			if (other.integer != null)
				return false
		}
		else if (!integer.equals(other.integer))
			return false
		if (long == null) {
			if (other.long != null)
				return false
		}
		else if (!long.equals(other.long))
			return false
		if (byteDecimal == null) {
			if (other.byteDecimal != null)
				return false
		}
		else if (!byteDecimal.equals(other.byteDecimal))
			return false
		if (shortDecimal == null) {
			if (other.shortDecimal != null)
				return false
		}
		else if (!shortDecimal.equals(other.shortDecimal))
			return false
		if (integerDecimal == null) {
			if (other.integerDecimal != null)
				return false
		}
		else if (!integerDecimal.equals(other.integerDecimal))
			return false
		if (longDecimal == null) {
			if (other.longDecimal != null)
				return false
		}
		else if (!longDecimal.equals(other.longDecimal))
			return false
		if (bigInteger == null) {
			if (other.bigInteger != null)
				return false
		}
		else if (!bigInteger.equals(other.bigInteger))
			return false
		if (bigDecimal == null) {
			if (other.bigDecimal != null)
				return false
		}
		else if (!bigDecimal.equals(other.bigDecimal))
			return false
		if (float == null) {
			if (other.float != null)
				return false
		}
		else if (!float.equals(other.float))
			return false
		if (real == null) {
			if (other.real != null)
				return false
		}
		else if (!real.equals(other.real))
			return false
		return true
	}

	override def hashCode : Int = {
		val prime = 31
		var result = 1
		result = prime * result + (if (id == null) 0 else id.hashCode())
		result = prime * result + (if (byte == null) 0 else byte.hashCode())
		result = prime * result + (if (short == null) 0 else short.hashCode())
		result = prime * result + (if (integer == null) 0 else integer.hashCode())
		result = prime * result + (if (long == null) 0 else long.hashCode())
		result = prime * result + (if (byteDecimal == null) 0 else byteDecimal.hashCode())
		result = prime * result + (if (shortDecimal == null) 0 else shortDecimal.hashCode())
		result = prime * result + (if (integerDecimal == null) 0 else integerDecimal.hashCode())
		result = prime * result + (if (longDecimal == null) 0 else longDecimal.hashCode())
		result = prime * result + (if (bigInteger == null) 0 else bigInteger.hashCode())
		result = prime * result + (if (bigDecimal == null) 0 else bigDecimal.hashCode())
		result = prime * result + (if (float == null) 0 else float.hashCode())
		result = prime * result + (if (real == null) 0 else real.hashCode())
		return result
	}

	override def toString : String = {
		val sb = new StringBuilder("T_639NumbersTable (")

		sb.append(id)
		sb.append(", ").append(byte)
		sb.append(", ").append(short)
		sb.append(", ").append(integer)
		sb.append(", ").append(long)
		sb.append(", ").append(byteDecimal)
		sb.append(", ").append(shortDecimal)
		sb.append(", ").append(integerDecimal)
		sb.append(", ").append(longDecimal)
		sb.append(", ").append(bigInteger)
		sb.append(", ").append(bigDecimal)
		sb.append(", ").append(float)
		sb.append(", ").append(real)

		sb.append(")");
		return sb.toString
	}
}
