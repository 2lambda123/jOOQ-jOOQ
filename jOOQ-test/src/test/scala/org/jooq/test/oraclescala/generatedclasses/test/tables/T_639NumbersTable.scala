/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables


import java.lang.Byte
import java.lang.Class
import java.lang.Double
import java.lang.Integer
import java.lang.Long
import java.lang.Short
import java.lang.String
import java.math.BigDecimal
import java.math.BigInteger
import java.util.Arrays
import java.util.List

import org.jooq.Field
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl
import org.jooq.test.oraclescala.generatedclasses.test.Keys
import org.jooq.test.oraclescala.generatedclasses.test.Test
import org.jooq.test.oraclescala.generatedclasses.test.tables.T_639NumbersTable
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.T_639NumbersTableRecord


object T_639NumbersTable {

	/**
	 * The reference instance of <code>TEST.T_639_NUMBERS_TABLE</code>
	 */
	val T_639_NUMBERS_TABLE = new T_639NumbersTable
}

/**
 * This class is generated by jOOQ.
 */
class T_639NumbersTable(alias : String, aliased : Table[T_639NumbersTableRecord], parameters : Array[ Field[_] ]) extends TableImpl[T_639NumbersTableRecord](alias, Test.TEST, aliased, parameters, "") {

	/**
	 * The class holding records for this type
	 */
	override def getRecordType : Class[T_639NumbersTableRecord] = {
		classOf[T_639NumbersTableRecord]
	}

	/**
	 * The column <code>TEST.T_639_NUMBERS_TABLE.ID</code>.
	 */
	val ID : TableField[T_639NumbersTableRecord, Integer] = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

	/**
	 * The column <code>TEST.T_639_NUMBERS_TABLE.BYTE</code>.
	 */
	val BYTE : TableField[T_639NumbersTableRecord, Byte] = createField("BYTE", org.jooq.impl.SQLDataType.TINYINT, "")

	/**
	 * The column <code>TEST.T_639_NUMBERS_TABLE.SHORT</code>.
	 */
	val SHORT : TableField[T_639NumbersTableRecord, Short] = createField("SHORT", org.jooq.impl.SQLDataType.SMALLINT, "")

	/**
	 * The column <code>TEST.T_639_NUMBERS_TABLE.INTEGER</code>.
	 */
	val INTEGER : TableField[T_639NumbersTableRecord, Integer] = createField("INTEGER", org.jooq.impl.SQLDataType.INTEGER, "")

	/**
	 * The column <code>TEST.T_639_NUMBERS_TABLE.LONG</code>.
	 */
	val LONG : TableField[T_639NumbersTableRecord, Long] = createField("LONG", org.jooq.impl.SQLDataType.BIGINT, "")

	/**
	 * The column <code>TEST.T_639_NUMBERS_TABLE.BYTE_DECIMAL</code>.
	 */
	val BYTE_DECIMAL : TableField[T_639NumbersTableRecord, Byte] = createField("BYTE_DECIMAL", org.jooq.impl.SQLDataType.TINYINT, "")

	/**
	 * The column <code>TEST.T_639_NUMBERS_TABLE.SHORT_DECIMAL</code>.
	 */
	val SHORT_DECIMAL : TableField[T_639NumbersTableRecord, Short] = createField("SHORT_DECIMAL", org.jooq.impl.SQLDataType.SMALLINT, "")

	/**
	 * The column <code>TEST.T_639_NUMBERS_TABLE.INTEGER_DECIMAL</code>.
	 */
	val INTEGER_DECIMAL : TableField[T_639NumbersTableRecord, Integer] = createField("INTEGER_DECIMAL", org.jooq.impl.SQLDataType.INTEGER, "")

	/**
	 * The column <code>TEST.T_639_NUMBERS_TABLE.LONG_DECIMAL</code>.
	 */
	val LONG_DECIMAL : TableField[T_639NumbersTableRecord, Long] = createField("LONG_DECIMAL", org.jooq.impl.SQLDataType.BIGINT, "")

	/**
	 * The column <code>TEST.T_639_NUMBERS_TABLE.BIG_INTEGER</code>.
	 */
	val BIG_INTEGER : TableField[T_639NumbersTableRecord, BigInteger] = createField("BIG_INTEGER", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(22), "")

	/**
	 * The column <code>TEST.T_639_NUMBERS_TABLE.BIG_DECIMAL</code>.
	 */
	val BIG_DECIMAL : TableField[T_639NumbersTableRecord, BigDecimal] = createField("BIG_DECIMAL", org.jooq.impl.SQLDataType.NUMERIC.precision(22, 5), "")

	/**
	 * The column <code>TEST.T_639_NUMBERS_TABLE.FLOAT</code>.
	 */
	val FLOAT : TableField[T_639NumbersTableRecord, Double] = createField("FLOAT", org.jooq.impl.SQLDataType.DOUBLE, "")

	/**
	 * The column <code>TEST.T_639_NUMBERS_TABLE.REAL</code>.
	 */
	val REAL : TableField[T_639NumbersTableRecord, Double] = createField("REAL", org.jooq.impl.SQLDataType.DOUBLE, "")

	/**
	 * Create a <code>TEST.T_639_NUMBERS_TABLE</code> table reference
	 */
	def this() = {
		this("T_639_NUMBERS_TABLE", null, null)
	}

	/**
	 * Create an aliased <code>TEST.T_639_NUMBERS_TABLE</code> table reference
	 */
	def this(alias : String) = {
		this(alias, T_639NumbersTable.T_639_NUMBERS_TABLE, null)
	}

	private def this(alias : String, aliased : Table[T_639NumbersTableRecord]) = {
		this(alias, aliased, null)
	}

	override def getPrimaryKey : UniqueKey[T_639NumbersTableRecord] = {
		Keys.PK_T_639_NUMBERS_TABLE
	}

	override def getKeys : List[ UniqueKey[T_639NumbersTableRecord] ] = {
		return Arrays.asList[ UniqueKey[T_639NumbersTableRecord] ](Keys.PK_T_639_NUMBERS_TABLE)
	}

	override def as(alias : String) : T_639NumbersTable = {
		new T_639NumbersTable(alias, this)
	}

	/**
	 * Rename this table
	 */
	def rename(name : String) : T_639NumbersTable = {
		new T_639NumbersTable(name, null)
	}
}
