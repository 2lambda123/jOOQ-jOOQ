/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test


import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.AbstractKeys
import org.jooq.test.oraclescala.generatedclasses.test.Keys
import org.jooq.test.oraclescala.generatedclasses.test.tables.TArrays
import org.jooq.test.oraclescala.generatedclasses.test.tables.TAuthor
import org.jooq.test.oraclescala.generatedclasses.test.tables.TBook
import org.jooq.test.oraclescala.generatedclasses.test.tables.TBookStore
import org.jooq.test.oraclescala.generatedclasses.test.tables.TBookToBookStore
import org.jooq.test.oraclescala.generatedclasses.test.tables.TBooleans
import org.jooq.test.oraclescala.generatedclasses.test.tables.TDates
import org.jooq.test.oraclescala.generatedclasses.test.tables.TDirectory
import org.jooq.test.oraclescala.generatedclasses.test.tables.TExoticTypes
import org.jooq.test.oraclescala.generatedclasses.test.tables.TLanguage
import org.jooq.test.oraclescala.generatedclasses.test.tables.TTemp
import org.jooq.test.oraclescala.generatedclasses.test.tables.TTriggers
import org.jooq.test.oraclescala.generatedclasses.test.tables.T_2155
import org.jooq.test.oraclescala.generatedclasses.test.tables.T_2845CaseSensitivity
import org.jooq.test.oraclescala.generatedclasses.test.tables.T_639NumbersTable
import org.jooq.test.oraclescala.generatedclasses.test.tables.T_725LobTest
import org.jooq.test.oraclescala.generatedclasses.test.tables.XTestCase_2025
import org.jooq.test.oraclescala.generatedclasses.test.tables.XTestCase_64_69
import org.jooq.test.oraclescala.generatedclasses.test.tables.XTestCase_71
import org.jooq.test.oraclescala.generatedclasses.test.tables.XTestCase_85
import org.jooq.test.oraclescala.generatedclasses.test.tables.XUnused
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.TArraysRecord
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.TAuthorRecord
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.TBookRecord
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.TBookStoreRecord
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.TBookToBookStoreRecord
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.TBooleansRecord
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.TDatesRecord
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.TDirectoryRecord
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.TExoticTypesRecord
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.TLanguageRecord
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.TTempRecord
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.TTriggersRecord
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.T_2155Record
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.T_2845CaseSensitivityRecord
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.T_639NumbersTableRecord
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.T_725LobTestRecord
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.XTestCase_2025Record
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.XTestCase_64_69Record
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.XTestCase_71Record
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.XTestCase_85Record
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.XUnusedRecord


/**
 * A class modelling foreign key relationships between tables of the <code>TEST</code> 
 * schema
 */
object Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------


	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	val PK_T_ARRAYS = UniqueKeys0.PK_T_ARRAYS
	val PK_T_AUTHOR = UniqueKeys0.PK_T_AUTHOR
	val PK_T_BOOK = UniqueKeys0.PK_T_BOOK
	val UK_T_BOOK_STORE_NAME = UniqueKeys0.UK_T_BOOK_STORE_NAME
	val PK_B2BS = UniqueKeys0.PK_B2BS
	val PK_T_BOOLEANS = UniqueKeys0.PK_T_BOOLEANS
	val PK_T_DATES = UniqueKeys0.PK_T_DATES
	val PK_T_DIRECTORY = UniqueKeys0.PK_T_DIRECTORY
	val PK_T_EXOTIC_TYPES = UniqueKeys0.PK_T_EXOTIC_TYPES
	val PK_T_LANGUAGE = UniqueKeys0.PK_T_LANGUAGE
	val PK_T_TEMP = UniqueKeys0.PK_T_TEMP
	val PK_T_TRIGGERS = UniqueKeys0.PK_T_TRIGGERS
	val PK_T_2155 = UniqueKeys0.PK_T_2155
	val PK_T_2845_CASE_SENSITIVITY = UniqueKeys0.PK_T_2845_CASE_SENSITIVITY
	val PK_T_639_NUMBERS_TABLE = UniqueKeys0.PK_T_639_NUMBERS_TABLE
	val PK_T_725_LOB_TEST = UniqueKeys0.PK_T_725_LOB_TEST
	val PK_X_TEST_CASE_64_69 = UniqueKeys0.PK_X_TEST_CASE_64_69
	val PK_X_TEST_CASE_71 = UniqueKeys0.PK_X_TEST_CASE_71
	val PK_X_TEST_CASE_85 = UniqueKeys0.PK_X_TEST_CASE_85
	val PK_X_UNUSED = UniqueKeys0.PK_X_UNUSED
	val UK_X_UNUSED_ID = UniqueKeys0.UK_X_UNUSED_ID

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------

	val FK_T_BOOK_AUTHOR_ID = ForeignKeys0.FK_T_BOOK_AUTHOR_ID
	val FK_T_BOOK_CO_AUTHOR_ID = ForeignKeys0.FK_T_BOOK_CO_AUTHOR_ID
	val FK_T_BOOK_LANGUAGE_ID = ForeignKeys0.FK_T_BOOK_LANGUAGE_ID
	val FK_B2BS_BS_NAME = ForeignKeys0.FK_B2BS_BS_NAME
	val FK_B2BS_B_ID = ForeignKeys0.FK_B2BS_B_ID
	val PK_T_DIRECTORY_SELF = ForeignKeys0.PK_T_DIRECTORY_SELF
	val FK_X_TEST_CASE_2025_1 = ForeignKeys0.FK_X_TEST_CASE_2025_1
	val FK_X_TEST_CASE_2025_2 = ForeignKeys0.FK_X_TEST_CASE_2025_2
	val FK_X_TEST_CASE_2025_3 = ForeignKeys0.FK_X_TEST_CASE_2025_3
	val FK_X_TEST_CASE_64_69A = ForeignKeys0.FK_X_TEST_CASE_64_69A
	val FK_X_TEST_CASE_64_69B = ForeignKeys0.FK_X_TEST_CASE_64_69B
	val FK_X_TEST_CASE_71 = ForeignKeys0.FK_X_TEST_CASE_71
	val FK_X_TEST_CASE_85 = ForeignKeys0.FK_X_TEST_CASE_85
	val FK_X_UNUSED_SELF = ForeignKeys0.FK_X_UNUSED_SELF

	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private object UniqueKeys0 extends AbstractKeys {
		val PK_T_ARRAYS : UniqueKey[TArraysRecord] = AbstractKeys.createUniqueKey(TArrays.T_ARRAYS, TArrays.T_ARRAYS.ID)
		val PK_T_AUTHOR : UniqueKey[TAuthorRecord] = AbstractKeys.createUniqueKey(TAuthor.T_AUTHOR, TAuthor.T_AUTHOR.ID)
		val PK_T_BOOK : UniqueKey[TBookRecord] = AbstractKeys.createUniqueKey(TBook.T_BOOK, TBook.T_BOOK.ID)
		val UK_T_BOOK_STORE_NAME : UniqueKey[TBookStoreRecord] = AbstractKeys.createUniqueKey(TBookStore.T_BOOK_STORE, TBookStore.T_BOOK_STORE.NAME)
		val PK_B2BS : UniqueKey[TBookToBookStoreRecord] = AbstractKeys.createUniqueKey(TBookToBookStore.T_BOOK_TO_BOOK_STORE, TBookToBookStore.T_BOOK_TO_BOOK_STORE.BOOK_STORE_NAME, TBookToBookStore.T_BOOK_TO_BOOK_STORE.BOOK_ID)
		val PK_T_BOOLEANS : UniqueKey[TBooleansRecord] = AbstractKeys.createUniqueKey(TBooleans.T_BOOLEANS, TBooleans.T_BOOLEANS.ID)
		val PK_T_DATES : UniqueKey[TDatesRecord] = AbstractKeys.createUniqueKey(TDates.T_DATES, TDates.T_DATES.ID)
		val PK_T_DIRECTORY : UniqueKey[TDirectoryRecord] = AbstractKeys.createUniqueKey(TDirectory.T_DIRECTORY, TDirectory.T_DIRECTORY.ID)
		val PK_T_EXOTIC_TYPES : UniqueKey[TExoticTypesRecord] = AbstractKeys.createUniqueKey(TExoticTypes.T_EXOTIC_TYPES, TExoticTypes.T_EXOTIC_TYPES.ID)
		val PK_T_LANGUAGE : UniqueKey[TLanguageRecord] = AbstractKeys.createUniqueKey(TLanguage.T_LANGUAGE, TLanguage.T_LANGUAGE.ID)
		val PK_T_TEMP : UniqueKey[TTempRecord] = AbstractKeys.createUniqueKey(TTemp.T_TEMP, TTemp.T_TEMP.ID)
		val PK_T_TRIGGERS : UniqueKey[TTriggersRecord] = AbstractKeys.createUniqueKey(TTriggers.T_TRIGGERS, TTriggers.T_TRIGGERS.ID_GENERATED)
		val PK_T_2155 : UniqueKey[T_2155Record] = AbstractKeys.createUniqueKey(T_2155.T_2155, T_2155.T_2155.ID)
		val PK_T_2845_CASE_SENSITIVITY : UniqueKey[T_2845CaseSensitivityRecord] = AbstractKeys.createUniqueKey(T_2845CaseSensitivity.T_2845_CASE_SENSITIVITY, T_2845CaseSensitivity.T_2845_CASE_SENSITIVITY.ID)
		val PK_T_639_NUMBERS_TABLE : UniqueKey[T_639NumbersTableRecord] = AbstractKeys.createUniqueKey(T_639NumbersTable.T_639_NUMBERS_TABLE, T_639NumbersTable.T_639_NUMBERS_TABLE.ID)
		val PK_T_725_LOB_TEST : UniqueKey[T_725LobTestRecord] = AbstractKeys.createUniqueKey(T_725LobTest.T_725_LOB_TEST, T_725LobTest.T_725_LOB_TEST.ID)
		val PK_X_TEST_CASE_64_69 : UniqueKey[XTestCase_64_69Record] = AbstractKeys.createUniqueKey(XTestCase_64_69.X_TEST_CASE_64_69, XTestCase_64_69.X_TEST_CASE_64_69.ID)
		val PK_X_TEST_CASE_71 : UniqueKey[XTestCase_71Record] = AbstractKeys.createUniqueKey(XTestCase_71.X_TEST_CASE_71, XTestCase_71.X_TEST_CASE_71.ID)
		val PK_X_TEST_CASE_85 : UniqueKey[XTestCase_85Record] = AbstractKeys.createUniqueKey(XTestCase_85.X_TEST_CASE_85, XTestCase_85.X_TEST_CASE_85.ID)
		val PK_X_UNUSED : UniqueKey[XUnusedRecord] = AbstractKeys.createUniqueKey(XUnused.X_UNUSED, XUnused.X_UNUSED.ID, XUnused.X_UNUSED.NAME)
		val UK_X_UNUSED_ID : UniqueKey[XUnusedRecord] = AbstractKeys.createUniqueKey(XUnused.X_UNUSED, XUnused.X_UNUSED.ID)
	}

	private object ForeignKeys0 extends AbstractKeys {
		val FK_T_BOOK_AUTHOR_ID : ForeignKey[TBookRecord, TAuthorRecord] = AbstractKeys.createForeignKey(Keys.PK_T_AUTHOR, TBook.T_BOOK, TBook.T_BOOK.AUTHOR_ID)
		val FK_T_BOOK_CO_AUTHOR_ID : ForeignKey[TBookRecord, TAuthorRecord] = AbstractKeys.createForeignKey(Keys.PK_T_AUTHOR, TBook.T_BOOK, TBook.T_BOOK.CO_AUTHOR_ID)
		val FK_T_BOOK_LANGUAGE_ID : ForeignKey[TBookRecord, TLanguageRecord] = AbstractKeys.createForeignKey(Keys.PK_T_LANGUAGE, TBook.T_BOOK, TBook.T_BOOK.LANGUAGE_ID)
		val FK_B2BS_BS_NAME : ForeignKey[TBookToBookStoreRecord, TBookStoreRecord] = AbstractKeys.createForeignKey(Keys.UK_T_BOOK_STORE_NAME, TBookToBookStore.T_BOOK_TO_BOOK_STORE, TBookToBookStore.T_BOOK_TO_BOOK_STORE.BOOK_STORE_NAME)
		val FK_B2BS_B_ID : ForeignKey[TBookToBookStoreRecord, TBookRecord] = AbstractKeys.createForeignKey(Keys.PK_T_BOOK, TBookToBookStore.T_BOOK_TO_BOOK_STORE, TBookToBookStore.T_BOOK_TO_BOOK_STORE.BOOK_ID)
		val PK_T_DIRECTORY_SELF : ForeignKey[TDirectoryRecord, TDirectoryRecord] = AbstractKeys.createForeignKey(Keys.PK_T_DIRECTORY, TDirectory.T_DIRECTORY, TDirectory.T_DIRECTORY.PARENT_ID)
		val FK_X_TEST_CASE_2025_1 : ForeignKey[XTestCase_2025Record, XTestCase_85Record] = AbstractKeys.createForeignKey(Keys.PK_X_TEST_CASE_85, XTestCase_2025.X_TEST_CASE_2025, XTestCase_2025.X_TEST_CASE_2025.REF_ID)
		val FK_X_TEST_CASE_2025_2 : ForeignKey[XTestCase_2025Record, XTestCase_71Record] = AbstractKeys.createForeignKey(Keys.PK_X_TEST_CASE_71, XTestCase_2025.X_TEST_CASE_2025, XTestCase_2025.X_TEST_CASE_2025.REF_ID)
		val FK_X_TEST_CASE_2025_3 : ForeignKey[XTestCase_2025Record, XUnusedRecord] = AbstractKeys.createForeignKey(Keys.PK_X_UNUSED, XTestCase_2025.X_TEST_CASE_2025, XTestCase_2025.X_TEST_CASE_2025.REF_ID, XTestCase_2025.X_TEST_CASE_2025.REF_NAME)
		val FK_X_TEST_CASE_64_69A : ForeignKey[XTestCase_64_69Record, XUnusedRecord] = AbstractKeys.createForeignKey(Keys.UK_X_UNUSED_ID, XTestCase_64_69.X_TEST_CASE_64_69, XTestCase_64_69.X_TEST_CASE_64_69.UNUSED_ID)
		val FK_X_TEST_CASE_64_69B : ForeignKey[XTestCase_64_69Record, XUnusedRecord] = AbstractKeys.createForeignKey(Keys.UK_X_UNUSED_ID, XTestCase_64_69.X_TEST_CASE_64_69, XTestCase_64_69.X_TEST_CASE_64_69.UNUSED_ID)
		val FK_X_TEST_CASE_71 : ForeignKey[XTestCase_71Record, XTestCase_64_69Record] = AbstractKeys.createForeignKey(Keys.PK_X_TEST_CASE_64_69, XTestCase_71.X_TEST_CASE_71, XTestCase_71.X_TEST_CASE_71.TEST_CASE_64_69_ID)
		val FK_X_TEST_CASE_85 : ForeignKey[XTestCase_85Record, XUnusedRecord] = AbstractKeys.createForeignKey(Keys.PK_X_UNUSED, XTestCase_85.X_TEST_CASE_85, XTestCase_85.X_TEST_CASE_85.X_UNUSED_ID, XTestCase_85.X_TEST_CASE_85.X_UNUSED_NAME)
		val FK_X_UNUSED_SELF : ForeignKey[XUnusedRecord, XUnusedRecord] = AbstractKeys.createForeignKey(Keys.PK_X_UNUSED, XUnused.X_UNUSED, XUnused.X_UNUSED.ID_REF, XUnused.X_UNUSED.NAME_REF)
	}
}
