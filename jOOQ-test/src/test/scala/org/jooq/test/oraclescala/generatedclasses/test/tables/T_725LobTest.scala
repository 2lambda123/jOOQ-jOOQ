/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.util.Arrays
import java.util.List

import org.jooq.Field
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl
import org.jooq.test.oraclescala.generatedclasses.test.Keys
import org.jooq.test.oraclescala.generatedclasses.test.Test
import org.jooq.test.oraclescala.generatedclasses.test.tables.records.T_725LobTestRecord

import scala.Array


object T_725LobTest {

	/**
	 * The reference instance of <code>TEST.T_725_LOB_TEST</code>
	 */
	val T_725_LOB_TEST = new T_725LobTest
}

/**
 * This class is generated by jOOQ.
 */
class T_725LobTest(alias : String, aliased : Table[T_725LobTestRecord], parameters : Array[ Field[_] ]) extends TableImpl[T_725LobTestRecord](alias, Test.TEST, aliased, parameters, "") {

	/**
	 * The class holding records for this type
	 */
	override def getRecordType : Class[T_725LobTestRecord] = {
		classOf[T_725LobTestRecord]
	}

	/**
	 * The column <code>TEST.T_725_LOB_TEST.ID</code>.
	 */
	val ID : TableField[T_725LobTestRecord, Integer] = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

	/**
	 * The column <code>TEST.T_725_LOB_TEST.LOB</code>.
	 */
	val LOB : TableField[T_725LobTestRecord, Array[scala.Byte]] = createField("LOB", org.jooq.impl.SQLDataType.BLOB, "")

	/**
	 * Create a <code>TEST.T_725_LOB_TEST</code> table reference
	 */
	def this() = {
		this("T_725_LOB_TEST", null, null)
	}

	/**
	 * Create an aliased <code>TEST.T_725_LOB_TEST</code> table reference
	 */
	def this(alias : String) = {
		this(alias, org.jooq.test.oraclescala.generatedclasses.test.tables.T_725LobTest.T_725_LOB_TEST, null)
	}

	private def this(alias : String, aliased : Table[T_725LobTestRecord]) = {
		this(alias, aliased, null)
	}

	override def getPrimaryKey : UniqueKey[T_725LobTestRecord] = {
		Keys.PK_T_725_LOB_TEST
	}

	override def getKeys : List[ UniqueKey[T_725LobTestRecord] ] = {
		return Arrays.asList[ UniqueKey[T_725LobTestRecord] ](Keys.PK_T_725_LOB_TEST)
	}

	override def as(alias : String) : T_725LobTest = {
		new T_725LobTest(alias, this)
	}

	/**
	 * Rename this table
	 */
	def rename(name : String) : T_725LobTest = {
		new T_725LobTest(name, null)
	}
}
