/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.udt.records


import java.math.BigDecimal

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UDTRecordImpl
import org.jooq.test.oraclescala.generatedclasses.test.udt.U_3082_1


/**
 * This class is generated by jOOQ.
 */
class U_3082_1Record extends UDTRecordImpl[U_3082_1Record](U_3082_1.U_3082_1) with Record2[BigDecimal, UNumberTableRecord] {

	/**
	 * Setter for <code>TEST.U_3082_1.N</code>.
	 */
	def setN(value : BigDecimal) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>TEST.U_3082_1.N</code>.
	 */
	def getN : BigDecimal = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.U_3082_1.NUMBERS</code>.
	 */
	def setNumbers(value : UNumberTableRecord) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>TEST.U_3082_1.NUMBERS</code>.
	 */
	def getNumbers : UNumberTableRecord = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[UNumberTableRecord]
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row2[BigDecimal, UNumberTableRecord] = {
		super.fieldsRow.asInstanceOf[ Row2[BigDecimal, UNumberTableRecord] ]
	}

	override def valuesRow : Row2[BigDecimal, UNumberTableRecord] = {
		super.valuesRow.asInstanceOf[ Row2[BigDecimal, UNumberTableRecord] ]
	}
	override def field1 : Field[BigDecimal] = U_3082_1.N
	override def field2 : Field[UNumberTableRecord] = U_3082_1.NUMBERS
	override def value1 : BigDecimal = getN
	override def value2 : UNumberTableRecord = getNumbers

	override def value1(value : BigDecimal) : U_3082_1Record = {
		setN(value)
		this
	}

	override def value2(value : UNumberTableRecord) : U_3082_1Record = {
		setNumbers(value)
		this
	}

	override def values(value1 : BigDecimal, value2 : UNumberTableRecord) : U_3082_1Record = {
		this.value1(value1)
		this.value2(value2)
		this
	}

	/**
	 * Create a detached, initialised U_3082_1Record
	 */
	def this(n : BigDecimal, numbers : UNumberTableRecord) = {
		this()

		setValue(0, n)
		setValue(1, numbers)
	}
}
