/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.udt.records


import java.math.BigDecimal

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Row1
import org.jooq.impl.UDTRecordImpl
import org.jooq.test.oraclescala.generatedclasses.test.udt.U_3082_1


/**
 * This class is generated by jOOQ.
 */
class U_3082_1Record extends UDTRecordImpl[U_3082_1Record](U_3082_1.U_3082_1) with Record1[BigDecimal] {

	/**
	 * Setter for <code>TEST.U_3082_1.N</code>.
	 */
	def setN(value : BigDecimal) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>TEST.U_3082_1.N</code>.
	 */
	def getN : BigDecimal = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	// -------------------------------------------------------------------------
	// Record1 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row1[BigDecimal] = {
		super.fieldsRow.asInstanceOf[ Row1[BigDecimal] ]
	}

	override def valuesRow : Row1[BigDecimal] = {
		super.valuesRow.asInstanceOf[ Row1[BigDecimal] ]
	}
	override def field1 : Field[BigDecimal] = U_3082_1.N
	override def value1 : BigDecimal = getN

	override def value1(value : BigDecimal) : U_3082_1Record = {
		setN(value)
		this
	}

	override def values(value1 : BigDecimal) : U_3082_1Record = {
		this.value1(value1)
		this
	}

	/**
	 * Create a detached, initialised U_3082_1Record
	 */
	def this(n : BigDecimal) = {
		this()

		setValue(0, n)
	}
}
