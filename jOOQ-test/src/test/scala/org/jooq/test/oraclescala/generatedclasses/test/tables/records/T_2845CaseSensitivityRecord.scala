/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.records


import java.math.BigDecimal

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Id
import javax.persistence.Table
import javax.validation.constraints.NotNull

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.test.oraclescala.generatedclasses.test.tables.T_2845CaseSensitivity


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_2845_CASE_sensitivity", schema = "TEST")
class T_2845CaseSensitivityRecord extends UpdatableRecordImpl[T_2845CaseSensitivityRecord](T_2845CaseSensitivity.T_2845_CASE_SENSITIVITY) with Record5[BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal] {

	/**
	 * Setter for <code>TEST.T_2845_CASE_sensitivity.ID</code>.
	 */
	def setId(value : BigDecimal) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>TEST.T_2845_CASE_sensitivity.ID</code>.
	 */
	@Id
	@Column(name = "ID", unique = true, nullable = false)
	@NotNull
	def getId : BigDecimal = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_2845_CASE_sensitivity.INSENSITIVE</code>.
	 */
	def setInsensitive(value : BigDecimal) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>TEST.T_2845_CASE_sensitivity.INSENSITIVE</code>.
	 */
	@Column(name = "INSENSITIVE")
	def getInsensitive : BigDecimal = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_2845_CASE_sensitivity.UPPER</code>.
	 */
	def setUpper(value : BigDecimal) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>TEST.T_2845_CASE_sensitivity.UPPER</code>.
	 */
	@Column(name = "UPPER")
	def getUpper : BigDecimal = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_2845_CASE_sensitivity.lower</code>.
	 */
	def setLower(value : BigDecimal) : Unit = {
		setValue(3, value)
	}

	/**
	 * Getter for <code>TEST.T_2845_CASE_sensitivity.lower</code>.
	 */
	@Column(name = "lower")
	def getLower : BigDecimal = {
		val r = getValue(3)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	/**
	 * Setter for <code>TEST.T_2845_CASE_sensitivity.Mixed</code>.
	 */
	def setMixed(value : BigDecimal) : Unit = {
		setValue(4, value)
	}

	/**
	 * Getter for <code>TEST.T_2845_CASE_sensitivity.Mixed</code>.
	 */
	@Column(name = "Mixed")
	def getMixed : BigDecimal = {
		val r = getValue(4)
		if (r == null) null else r.asInstanceOf[BigDecimal]
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------
	override def key() : Record1[BigDecimal] = {
		return super.key.asInstanceOf[ Record1[BigDecimal] ]
	}

	// -------------------------------------------------------------------------
	// Record5 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row5[BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal] = {
		super.fieldsRow.asInstanceOf[ Row5[BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal] ]
	}

	override def valuesRow : Row5[BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal] = {
		super.valuesRow.asInstanceOf[ Row5[BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal] ]
	}
	override def field1 : Field[BigDecimal] = T_2845CaseSensitivity.T_2845_CASE_SENSITIVITY.ID
	override def field2 : Field[BigDecimal] = T_2845CaseSensitivity.T_2845_CASE_SENSITIVITY.INSENSITIVE
	override def field3 : Field[BigDecimal] = T_2845CaseSensitivity.T_2845_CASE_SENSITIVITY.UPPER
	override def field4 : Field[BigDecimal] = T_2845CaseSensitivity.T_2845_CASE_SENSITIVITY.LOWER
	override def field5 : Field[BigDecimal] = T_2845CaseSensitivity.T_2845_CASE_SENSITIVITY.MIXED
	override def value1 : BigDecimal = getId
	override def value2 : BigDecimal = getInsensitive
	override def value3 : BigDecimal = getUpper
	override def value4 : BigDecimal = getLower
	override def value5 : BigDecimal = getMixed

	override def value1(value : BigDecimal) : T_2845CaseSensitivityRecord = {
		setId(value)
		this
	}

	override def value2(value : BigDecimal) : T_2845CaseSensitivityRecord = {
		setInsensitive(value)
		this
	}

	override def value3(value : BigDecimal) : T_2845CaseSensitivityRecord = {
		setUpper(value)
		this
	}

	override def value4(value : BigDecimal) : T_2845CaseSensitivityRecord = {
		setLower(value)
		this
	}

	override def value5(value : BigDecimal) : T_2845CaseSensitivityRecord = {
		setMixed(value)
		this
	}

	override def values(value1 : BigDecimal, value2 : BigDecimal, value3 : BigDecimal, value4 : BigDecimal, value5 : BigDecimal) : T_2845CaseSensitivityRecord = {
		this
	}

	/**
	 * Create a detached, initialised T_2845CaseSensitivityRecord
	 */
	def this(id : BigDecimal, insensitive : BigDecimal, upper : BigDecimal, lower : BigDecimal, mixed : BigDecimal) = {
		this()

		setValue(0, id)
		setValue(1, insensitive)
		setValue(2, upper)
		setValue(3, lower)
		setValue(4, mixed)
	}
}
