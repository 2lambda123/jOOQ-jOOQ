/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.tables.records


import java.io.Serializable
import java.lang.Integer
import java.util.UUID

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Id
import javax.persistence.Table
import javax.validation.constraints.NotNull

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.test.oraclescala.generatedclasses.test.tables.TExoticTypes


/**
 * This class is generated by jOOQ.
 */
@Entity
@Table(name = "T_EXOTIC_TYPES", schema = "TEST")
class TExoticTypesRecord extends UpdatableRecordImpl[TExoticTypesRecord](TExoticTypes.T_EXOTIC_TYPES) with Record3[Integer, UUID, Serializable] {

	/**
	 * Setter for <code>TEST.T_EXOTIC_TYPES.ID</code>.
	 */
	def setId(value : Integer) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>TEST.T_EXOTIC_TYPES.ID</code>.
	 */
	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 7)
	@NotNull
	def getId : Integer = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>TEST.T_EXOTIC_TYPES.UU</code>.
	 */
	def setUu(value : UUID) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>TEST.T_EXOTIC_TYPES.UU</code>.
	 */
	@Column(name = "UU")
	def getUu : UUID = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[UUID]
	}

	/**
	 * Setter for <code>TEST.T_EXOTIC_TYPES.JAVA_IO_SERIALIZABLE</code>.
	 */
	def setJavaIoSerializable(value : Serializable) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>TEST.T_EXOTIC_TYPES.JAVA_IO_SERIALIZABLE</code>.
	 */
	@Column(name = "JAVA_IO_SERIALIZABLE")
	def getJavaIoSerializable : Serializable = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[Serializable]
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------
	override def key() : Record1[Integer] = {
		return super.key.asInstanceOf[ Record1[Integer] ]
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row3[Integer, UUID, Serializable] = {
		super.fieldsRow.asInstanceOf[ Row3[Integer, UUID, Serializable] ]
	}

	override def valuesRow : Row3[Integer, UUID, Serializable] = {
		super.valuesRow.asInstanceOf[ Row3[Integer, UUID, Serializable] ]
	}
	override def field1 : Field[Integer] = TExoticTypes.T_EXOTIC_TYPES.ID
	override def field2 : Field[UUID] = TExoticTypes.T_EXOTIC_TYPES.UU
	override def field3 : Field[Serializable] = TExoticTypes.T_EXOTIC_TYPES.JAVA_IO_SERIALIZABLE
	override def value1 : Integer = getId
	override def value2 : UUID = getUu
	override def value3 : Serializable = getJavaIoSerializable

	override def value1(value : Integer) : TExoticTypesRecord = {
		setId(value)
		this
	}

	override def value2(value : UUID) : TExoticTypesRecord = {
		setUu(value)
		this
	}

	override def value3(value : Serializable) : TExoticTypesRecord = {
		setJavaIoSerializable(value)
		this
	}

	override def values(value1 : Integer, value2 : UUID, value3 : Serializable) : TExoticTypesRecord = {
		this
	}

	/**
	 * Create a detached, initialised TExoticTypesRecord
	 */
	def this(id : Integer, uu : UUID, javaIoSerializable : Serializable) = {
		this()

		setValue(0, id)
		setValue(1, uu)
		setValue(2, javaIoSerializable)
	}
}
