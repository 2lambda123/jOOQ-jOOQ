/**
 * This class is generated by jOOQ
 */
package org.jooq.test.oraclescala.generatedclasses.test.udt


import java.lang.Class
import java.lang.Integer
import java.lang.Number
import java.lang.String
import java.math.BigDecimal

import org.jooq.Configuration
import org.jooq.Field
import org.jooq.Package
import org.jooq.UDTField
import org.jooq.impl.UDTImpl
import org.jooq.test.oraclescala.generatedclasses.test.Test
import org.jooq.test.oraclescala.generatedclasses.test.udt.records.UAuthorTypeRecord
import org.jooq.test.oraclescala.generatedclasses.test.udt.u_author_type.CountBooks
import org.jooq.test.oraclescala.generatedclasses.test.udt.u_author_type.GetAuthor
import org.jooq.test.oraclescala.generatedclasses.test.udt.u_author_type.GetBooks
import org.jooq.test.oraclescala.generatedclasses.test.udt.u_author_type.Load
import org.jooq.test.oraclescala.generatedclasses.test.udt.u_author_type.NewAuthor


object UAuthorType {

	/**
	 * The reference instance of <code>TEST.U_AUTHOR_TYPE</code>
	 */
	val U_AUTHOR_TYPE = new UAuthorType

	/**
	 * The attribute <code>TEST.U_AUTHOR_TYPE.ID</code>.
	 */
	val ID = U_AUTHOR_TYPE.ID

	/**
	 * The attribute <code>TEST.U_AUTHOR_TYPE.FIRST_NAME</code>.
	 */
	val FIRST_NAME = U_AUTHOR_TYPE.FIRST_NAME

	/**
	 * The attribute <code>TEST.U_AUTHOR_TYPE.LAST_NAME</code>.
	 */
	val LAST_NAME = U_AUTHOR_TYPE.LAST_NAME
}

/**
 * This class is generated by jOOQ.
 */
class UAuthorType extends UDTImpl[UAuthorTypeRecord]("U_AUTHOR_TYPE", Test.TEST) with Package {

	/**
	 * The class holding records for this type
	 */
	override def getRecordType : Class[UAuthorTypeRecord] = {
		classOf[UAuthorTypeRecord]
	}
	private val ID : UDTField[UAuthorTypeRecord, Integer] = UDTImpl.createField("ID", org.jooq.impl.SQLDataType.INTEGER, this, "")
	private val FIRST_NAME : UDTField[UAuthorTypeRecord, String] = UDTImpl.createField("FIRST_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "")
	private val LAST_NAME : UDTField[UAuthorTypeRecord, String] = UDTImpl.createField("LAST_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "")

	/**
	 * Call <code>TEST.U_AUTHOR_TYPE.COUNT_BOOKS</code>
	 */
	def countBooks(configuration : Configuration, self : UAuthorTypeRecord) : BigDecimal = {
		val f = new CountBooks()
		f.setSelf(self)

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>TEST.U_AUTHOR_TYPE.COUNT_BOOKS</code> as a field
	 */
	def countBooks(self : UAuthorTypeRecord) : Field[BigDecimal] = {
		val f = new CountBooks
		f.setSelf(self)

		return f.asField
	}

	/**
	 * Get <code>TEST.U_AUTHOR_TYPE.COUNT_BOOKS</code> as a field
	 */
	def countBooks(self : Field[UAuthorTypeRecord]) : Field[BigDecimal] = {
		val f = new CountBooks
		f.setSelf(self)

		return f.asField
	}

	/**
	 * Call <code>TEST.U_AUTHOR_TYPE.GET_AUTHOR</code>
	 */
	def getAuthor(configuration : Configuration, pId : Number) : UAuthorTypeRecord = {
		val f = new GetAuthor()
		f.setPId(pId)

		f.execute(configuration)
		f.getReturnValue
	}

	/**
	 * Get <code>TEST.U_AUTHOR_TYPE.GET_AUTHOR</code> as a field
	 */
	def getAuthor(pId : Number) : Field[UAuthorTypeRecord] = {
		val f = new GetAuthor
		f.setPId(pId)

		return f.asField
	}

	/**
	 * Get <code>TEST.U_AUTHOR_TYPE.GET_AUTHOR</code> as a field
	 */
	def getAuthor(pId : Field[_ <: Number]) : Field[UAuthorTypeRecord] = {
		val f = new GetAuthor
		f.setPId(pId)

		return f.asField
	}

	/**
	 * Call <code>TEST.U_AUTHOR_TYPE.GET_BOOKS</code>
	 */
	def getBooks(configuration : Configuration, self : UAuthorTypeRecord) : GetBooks = {
		val p = new GetBooks
		p.setSelf(self)

		p.execute(configuration)
		return p
	}

	/**
	 * Call <code>TEST.U_AUTHOR_TYPE.LOAD</code>
	 */
	def load(configuration : Configuration, self : UAuthorTypeRecord) : UAuthorTypeRecord = {
		val p = new Load
		p.setSelf(self)

		p.execute(configuration)
		return p.getSelf
	}

	/**
	 * Call <code>TEST.U_AUTHOR_TYPE.NEW_AUTHOR</code>
	 */
	def newAuthor(configuration : Configuration, pId : Number, pFirstName : String, pLastName : String) : UAuthorTypeRecord = {
		val p = new NewAuthor
		p.setPId(pId)
		p.setPFirstName(pFirstName)
		p.setPLastName(pLastName)

		p.execute(configuration)
		return p.getPAuthor
	}

	{
		// Initialise data type
		getDataType
	}
}
