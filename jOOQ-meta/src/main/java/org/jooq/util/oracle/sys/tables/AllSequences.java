/**
 * This class is generated by jOOQ
 */
package org.jooq.util.oracle.sys.tables;


import java.math.BigDecimal;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;
import org.jooq.util.oracle.sys.Sys;


/**
 * Description of SEQUENCEs accessible to the user
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AllSequences extends TableImpl<Record> {

	private static final long serialVersionUID = -520382444;

	/**
	 * The reference instance of <code>SYS.ALL_SEQUENCES</code>
	 */
	public static final AllSequences ALL_SEQUENCES = new AllSequences();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<Record> getRecordType() {
		return Record.class;
	}

	/**
	 * The column <code>SYS.ALL_SEQUENCES.SEQUENCE_OWNER</code>. Name of the owner of the sequence
	 */
	public final TableField<Record, String> SEQUENCE_OWNER = createField("SEQUENCE_OWNER", org.jooq.impl.SQLDataType.VARCHAR.length(30).nullable(false), this, "Name of the owner of the sequence");

	/**
	 * The column <code>SYS.ALL_SEQUENCES.SEQUENCE_NAME</code>. SEQUENCE name
	 */
	public final TableField<Record, String> SEQUENCE_NAME = createField("SEQUENCE_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(30).nullable(false), this, "SEQUENCE name");

	/**
	 * The column <code>SYS.ALL_SEQUENCES.MIN_VALUE</code>. Minimum value of the sequence
	 */
	public final TableField<Record, BigDecimal> MIN_VALUE = createField("MIN_VALUE", org.jooq.impl.SQLDataType.NUMERIC, this, "Minimum value of the sequence");

	/**
	 * The column <code>SYS.ALL_SEQUENCES.MAX_VALUE</code>. Maximum value of the sequence
	 */
	public final TableField<Record, BigDecimal> MAX_VALUE = createField("MAX_VALUE", org.jooq.impl.SQLDataType.NUMERIC, this, "Maximum value of the sequence");

	/**
	 * The column <code>SYS.ALL_SEQUENCES.INCREMENT_BY</code>. Value by which sequence is incremented
	 */
	public final TableField<Record, BigDecimal> INCREMENT_BY = createField("INCREMENT_BY", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "Value by which sequence is incremented");

	/**
	 * The column <code>SYS.ALL_SEQUENCES.CYCLE_FLAG</code>. Does sequence wrap around on reaching limit?
	 */
	public final TableField<Record, String> CYCLE_FLAG = createField("CYCLE_FLAG", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Does sequence wrap around on reaching limit?");

	/**
	 * The column <code>SYS.ALL_SEQUENCES.ORDER_FLAG</code>. Are sequence numbers generated in order?
	 */
	public final TableField<Record, String> ORDER_FLAG = createField("ORDER_FLAG", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Are sequence numbers generated in order?");

	/**
	 * The column <code>SYS.ALL_SEQUENCES.CACHE_SIZE</code>. Number of sequence numbers to cache
	 */
	public final TableField<Record, BigDecimal> CACHE_SIZE = createField("CACHE_SIZE", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "Number of sequence numbers to cache");

	/**
	 * The column <code>SYS.ALL_SEQUENCES.LAST_NUMBER</code>. Last sequence number written to disk
	 */
	public final TableField<Record, BigDecimal> LAST_NUMBER = createField("LAST_NUMBER", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "Last sequence number written to disk");

	/**
	 * Create a <code>SYS.ALL_SEQUENCES</code> table reference
	 */
	public AllSequences() {
		this("ALL_SEQUENCES", null);
	}

	/**
	 * Create an aliased <code>SYS.ALL_SEQUENCES</code> table reference
	 */
	public AllSequences(String alias) {
		this(alias, ALL_SEQUENCES);
	}

	private AllSequences(String alias, Table<Record> aliased) {
		this(alias, aliased, null);
	}

	private AllSequences(String alias, Table<Record> aliased, Field<?>[] parameters) {
		super(alias, Sys.SYS, aliased, parameters, "Description of SEQUENCEs accessible to the user");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AllSequences as(String alias) {
		return new AllSequences(alias, this);
	}

	/**
	 * Rename this table
	 */
	public AllSequences rename(String name) {
		return new AllSequences(name, null);
	}
}
