/**
 * This class is generated by jOOQ
 */
package org.jooq.util.oracle.sys.tables;

/**
 * This class is generated by jOOQ.
 *
 * Arguments in object accessible to the user
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.4.0" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AllArguments extends org.jooq.impl.TableImpl<org.jooq.Record> {

	private static final long serialVersionUID = 180385589;

	/**
	 * The singleton instance of <code>SYS.ALL_ARGUMENTS</code>
	 */
	public static final org.jooq.util.oracle.sys.tables.AllArguments ALL_ARGUMENTS = new org.jooq.util.oracle.sys.tables.AllArguments();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<org.jooq.Record> getRecordType() {
		return org.jooq.Record.class;
	}

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.OWNER</code>. Username of the owner of the object
	 */
	public final org.jooq.TableField<org.jooq.Record, java.lang.String> OWNER = createField("OWNER", org.jooq.impl.SQLDataType.VARCHAR.length(30).nullable(false), this, "Username of the owner of the object");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.OBJECT_NAME</code>. Procedure or function name
	 */
	public final org.jooq.TableField<org.jooq.Record, java.lang.String> OBJECT_NAME = createField("OBJECT_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "Procedure or function name");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.PACKAGE_NAME</code>. Package name
	 */
	public final org.jooq.TableField<org.jooq.Record, java.lang.String> PACKAGE_NAME = createField("PACKAGE_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "Package name");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.OBJECT_ID</code>. Object number of the object
	 */
	public final org.jooq.TableField<org.jooq.Record, java.math.BigDecimal> OBJECT_ID = createField("OBJECT_ID", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "Object number of the object");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.OVERLOAD</code>. Overload unique identifier
	 */
	public final org.jooq.TableField<org.jooq.Record, java.lang.String> OVERLOAD = createField("OVERLOAD", org.jooq.impl.SQLDataType.VARCHAR.length(40), this, "Overload unique identifier");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.SUBPROGRAM_ID</code>. Unique sub-program Identifier
	 */
	public final org.jooq.TableField<org.jooq.Record, java.math.BigDecimal> SUBPROGRAM_ID = createField("SUBPROGRAM_ID", org.jooq.impl.SQLDataType.NUMERIC, this, "Unique sub-program Identifier");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.ARGUMENT_NAME</code>. Argument name
	 */
	public final org.jooq.TableField<org.jooq.Record, java.lang.String> ARGUMENT_NAME = createField("ARGUMENT_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "Argument name");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.POSITION</code>. Position in argument list, or null for function return value
	 */
	public final org.jooq.TableField<org.jooq.Record, java.math.BigDecimal> POSITION = createField("POSITION", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "Position in argument list, or null for function return value");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.SEQUENCE</code>. Argument sequence, including all nesting levels
	 */
	public final org.jooq.TableField<org.jooq.Record, java.math.BigDecimal> SEQUENCE = createField("SEQUENCE", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "Argument sequence, including all nesting levels");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.DATA_LEVEL</code>. Nesting depth of argument for composite types
	 */
	public final org.jooq.TableField<org.jooq.Record, java.math.BigDecimal> DATA_LEVEL = createField("DATA_LEVEL", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "Nesting depth of argument for composite types");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.DATA_TYPE</code>. Datatype of the argument
	 */
	public final org.jooq.TableField<org.jooq.Record, java.lang.String> DATA_TYPE = createField("DATA_TYPE", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "Datatype of the argument");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.DEFAULTED</code>. Is the argument defaulted?
	 */
	public final org.jooq.TableField<org.jooq.Record, java.lang.String> DEFAULTED = createField("DEFAULTED", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Is the argument defaulted?");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.DEFAULT_VALUE</code>. Default value for the argument
	 */
	public final org.jooq.TableField<org.jooq.Record, java.lang.String> DEFAULT_VALUE = createField("DEFAULT_VALUE", org.jooq.impl.SQLDataType.CLOB, this, "Default value for the argument");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.DEFAULT_LENGTH</code>. Length of default value for the argument
	 */
	public final org.jooq.TableField<org.jooq.Record, java.math.BigDecimal> DEFAULT_LENGTH = createField("DEFAULT_LENGTH", org.jooq.impl.SQLDataType.NUMERIC, this, "Length of default value for the argument");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.IN_OUT</code>. Argument direction (IN, OUT, or IN/OUT)
	 */
	public final org.jooq.TableField<org.jooq.Record, java.lang.String> IN_OUT = createField("IN_OUT", org.jooq.impl.SQLDataType.VARCHAR.length(9), this, "Argument direction (IN, OUT, or IN/OUT)");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.DATA_LENGTH</code>. Length of the column in bytes
	 */
	public final org.jooq.TableField<org.jooq.Record, java.math.BigDecimal> DATA_LENGTH = createField("DATA_LENGTH", org.jooq.impl.SQLDataType.NUMERIC, this, "Length of the column in bytes");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.DATA_PRECISION</code>. Length: decimal digits (NUMBER) or binary digits (FLOAT)
	 */
	public final org.jooq.TableField<org.jooq.Record, java.math.BigDecimal> DATA_PRECISION = createField("DATA_PRECISION", org.jooq.impl.SQLDataType.NUMERIC, this, "Length: decimal digits (NUMBER) or binary digits (FLOAT)");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.DATA_SCALE</code>. Digits to right of decimal point in a number
	 */
	public final org.jooq.TableField<org.jooq.Record, java.math.BigDecimal> DATA_SCALE = createField("DATA_SCALE", org.jooq.impl.SQLDataType.NUMERIC, this, "Digits to right of decimal point in a number");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.RADIX</code>. Argument radix for a number
	 */
	public final org.jooq.TableField<org.jooq.Record, java.math.BigDecimal> RADIX = createField("RADIX", org.jooq.impl.SQLDataType.NUMERIC, this, "Argument radix for a number");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.CHARACTER_SET_NAME</code>. Character set name for the argument
	 */
	public final org.jooq.TableField<org.jooq.Record, java.lang.String> CHARACTER_SET_NAME = createField("CHARACTER_SET_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(44), this, "Character set name for the argument");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.TYPE_OWNER</code>. Owner name for the argument type in case of object types
	 */
	public final org.jooq.TableField<org.jooq.Record, java.lang.String> TYPE_OWNER = createField("TYPE_OWNER", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "Owner name for the argument type in case of object types");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.TYPE_NAME</code>. Object name for the argument type in case of object types
	 */
	public final org.jooq.TableField<org.jooq.Record, java.lang.String> TYPE_NAME = createField("TYPE_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "Object name for the argument type in case of object types");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.TYPE_SUBNAME</code>. Subordinate object name for the argument type in case of object types
	 */
	public final org.jooq.TableField<org.jooq.Record, java.lang.String> TYPE_SUBNAME = createField("TYPE_SUBNAME", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "Subordinate object name for the argument type in case of object types");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.TYPE_LINK</code>. Database link name for the argument type in case of object types
	 */
	public final org.jooq.TableField<org.jooq.Record, java.lang.String> TYPE_LINK = createField("TYPE_LINK", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "Database link name for the argument type in case of object types");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.PLS_TYPE</code>. PL/SQL type name for numeric arguments
	 */
	public final org.jooq.TableField<org.jooq.Record, java.lang.String> PLS_TYPE = createField("PLS_TYPE", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "PL/SQL type name for numeric arguments");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.CHAR_LENGTH</code>. Character limit for string datatypes
	 */
	public final org.jooq.TableField<org.jooq.Record, java.math.BigDecimal> CHAR_LENGTH = createField("CHAR_LENGTH", org.jooq.impl.SQLDataType.NUMERIC, this, "Character limit for string datatypes");

	/**
	 * The column <code>SYS.ALL_ARGUMENTS.CHAR_USED</code>. Is the byte limit (B) or char limit (C) official for this string?
	 */
	public final org.jooq.TableField<org.jooq.Record, java.lang.String> CHAR_USED = createField("CHAR_USED", org.jooq.impl.SQLDataType.VARCHAR.length(1), this, "Is the byte limit (B) or char limit (C) official for this string?");

	/**
	 * Create a <code>SYS.ALL_ARGUMENTS</code> table reference
	 */
	public AllArguments() {
		this("ALL_ARGUMENTS", null);
	}

	/**
	 * Create an aliased <code>SYS.ALL_ARGUMENTS</code> table reference
	 */
	public AllArguments(java.lang.String alias) {
		this(alias, org.jooq.util.oracle.sys.tables.AllArguments.ALL_ARGUMENTS);
	}

	private AllArguments(java.lang.String alias, org.jooq.Table<org.jooq.Record> aliased) {
		this(alias, aliased, null);
	}

	private AllArguments(java.lang.String alias, org.jooq.Table<org.jooq.Record> aliased, org.jooq.Field<?>[] parameters) {
		super(alias, org.jooq.util.oracle.sys.Sys.SYS, aliased, parameters, "Arguments in object accessible to the user");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.util.oracle.sys.tables.AllArguments as(java.lang.String alias) {
		return new org.jooq.util.oracle.sys.tables.AllArguments(alias, this);
	}

	/**
	 * Rename this table
	 */
	public org.jooq.util.oracle.sys.tables.AllArguments rename(java.lang.String name) {
		return new org.jooq.util.oracle.sys.tables.AllArguments(name, null);
	}
}
