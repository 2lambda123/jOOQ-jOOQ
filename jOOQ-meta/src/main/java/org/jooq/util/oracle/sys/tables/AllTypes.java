/**
 * This class is generated by jOOQ
 */
package org.jooq.util.oracle.sys.tables;


import java.math.BigDecimal;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;
import org.jooq.util.oracle.sys.Sys;


/**
 * Description of types accessible to the user
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AllTypes extends TableImpl<Record> {

	private static final long serialVersionUID = -1469441855;

	/**
	 * The reference instance of <code>SYS.ALL_TYPES</code>
	 */
	public static final AllTypes ALL_TYPES = new AllTypes();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<Record> getRecordType() {
		return Record.class;
	}

	/**
	 * The column <code>SYS.ALL_TYPES.OWNER</code>. Owner of the type
	 */
	public final TableField<Record, String> OWNER = createField("OWNER", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "Owner of the type");

	/**
	 * The column <code>SYS.ALL_TYPES.TYPE_NAME</code>. Name of the type
	 */
	public final TableField<Record, String> TYPE_NAME = createField("TYPE_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "Name of the type");

	/**
	 * The column <code>SYS.ALL_TYPES.TYPE_OID</code>. Object identifier (OID) of the type
	 */
	public final TableField<Record, byte[]> TYPE_OID = createField("TYPE_OID", org.jooq.impl.SQLDataType.BLOB, this, "Object identifier (OID) of the type");

	/**
	 * The column <code>SYS.ALL_TYPES.TYPECODE</code>. Typecode of the type
	 */
	public final TableField<Record, String> TYPECODE = createField("TYPECODE", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "Typecode of the type");

	/**
	 * The column <code>SYS.ALL_TYPES.ATTRIBUTES</code>. Number of attributes in the type
	 */
	public final TableField<Record, BigDecimal> ATTRIBUTES = createField("ATTRIBUTES", org.jooq.impl.SQLDataType.NUMERIC, this, "Number of attributes in the type");

	/**
	 * The column <code>SYS.ALL_TYPES.METHODS</code>. Number of methods in the type
	 */
	public final TableField<Record, BigDecimal> METHODS = createField("METHODS", org.jooq.impl.SQLDataType.NUMERIC, this, "Number of methods in the type");

	/**
	 * The column <code>SYS.ALL_TYPES.PREDEFINED</code>. Is the type a predefined type?
	 */
	public final TableField<Record, String> PREDEFINED = createField("PREDEFINED", org.jooq.impl.SQLDataType.VARCHAR.length(3), this, "Is the type a predefined type?");

	/**
	 * The column <code>SYS.ALL_TYPES.INCOMPLETE</code>. Is the type an incomplete type?
	 */
	public final TableField<Record, String> INCOMPLETE = createField("INCOMPLETE", org.jooq.impl.SQLDataType.VARCHAR.length(3), this, "Is the type an incomplete type?");

	/**
	 * The column <code>SYS.ALL_TYPES.FINAL</code>. Is the type a final type?
	 */
	public final TableField<Record, String> FINAL = createField("FINAL", org.jooq.impl.SQLDataType.VARCHAR.length(3), this, "Is the type a final type?");

	/**
	 * The column <code>SYS.ALL_TYPES.INSTANTIABLE</code>. Is the type an instantiable type?
	 */
	public final TableField<Record, String> INSTANTIABLE = createField("INSTANTIABLE", org.jooq.impl.SQLDataType.VARCHAR.length(3), this, "Is the type an instantiable type?");

	/**
	 * The column <code>SYS.ALL_TYPES.SUPERTYPE_OWNER</code>. Owner of the supertype (null if type is not a subtype)
	 */
	public final TableField<Record, String> SUPERTYPE_OWNER = createField("SUPERTYPE_OWNER", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "Owner of the supertype (null if type is not a subtype)");

	/**
	 * The column <code>SYS.ALL_TYPES.SUPERTYPE_NAME</code>. Name of the supertype (null if type is not a subtype)
	 */
	public final TableField<Record, String> SUPERTYPE_NAME = createField("SUPERTYPE_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "Name of the supertype (null if type is not a subtype)");

	/**
	 * The column <code>SYS.ALL_TYPES.LOCAL_ATTRIBUTES</code>. Number of local (not inherited) attributes (if any) in the subtype
	 */
	public final TableField<Record, BigDecimal> LOCAL_ATTRIBUTES = createField("LOCAL_ATTRIBUTES", org.jooq.impl.SQLDataType.NUMERIC, this, "Number of local (not inherited) attributes (if any) in the subtype");

	/**
	 * The column <code>SYS.ALL_TYPES.LOCAL_METHODS</code>. Number of local (not inherited) methods (if any) in the subtype
	 */
	public final TableField<Record, BigDecimal> LOCAL_METHODS = createField("LOCAL_METHODS", org.jooq.impl.SQLDataType.NUMERIC, this, "Number of local (not inherited) methods (if any) in the subtype");

	/**
	 * The column <code>SYS.ALL_TYPES.TYPEID</code>. Type id value of the type
	 */
	public final TableField<Record, byte[]> TYPEID = createField("TYPEID", org.jooq.impl.SQLDataType.BLOB, this, "Type id value of the type");

	/**
	 * Create a <code>SYS.ALL_TYPES</code> table reference
	 */
	public AllTypes() {
		this("ALL_TYPES", null);
	}

	/**
	 * Create an aliased <code>SYS.ALL_TYPES</code> table reference
	 */
	public AllTypes(String alias) {
		this(alias, ALL_TYPES);
	}

	private AllTypes(String alias, Table<Record> aliased) {
		this(alias, aliased, null);
	}

	private AllTypes(String alias, Table<Record> aliased, Field<?>[] parameters) {
		super(alias, Sys.SYS, aliased, parameters, "Description of types accessible to the user");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AllTypes as(String alias) {
		return new AllTypes(alias, this);
	}

	/**
	 * Rename this table
	 */
	public AllTypes rename(String name) {
		return new AllTypes(name, null);
	}
}
