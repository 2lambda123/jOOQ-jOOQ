/**
 * This class is generated by jOOQ
 */
package org.jooq.util.redshift.pg_catalog.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;
import org.jooq.util.redshift.pg_catalog.PgCatalog;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgConstraint extends TableImpl<Record> {

	private static final long serialVersionUID = 1370994777;

	/**
	 * The reference instance of <code>pg_catalog.pg_constraint</code>
	 */
	public static final PgConstraint PG_CONSTRAINT = new PgConstraint();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<Record> getRecordType() {
		return Record.class;
	}

	/**
	 * The column <code>pg_catalog.pg_constraint.conname</code>.
	 */
	public final TableField<Record, String> CONNAME = createField("conname", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

	/**
	 * The column <code>pg_catalog.pg_constraint.connamespace</code>.
	 */
	public final TableField<Record, Long> CONNAMESPACE = createField("connamespace", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>pg_catalog.pg_constraint.contype</code>.
	 */
	public final TableField<Record, String> CONTYPE = createField("contype", org.jooq.impl.SQLDataType.CHAR.nullable(false), this, "");

	/**
	 * The column <code>pg_catalog.pg_constraint.condeferrable</code>.
	 */
	public final TableField<Record, Boolean> CONDEFERRABLE = createField("condeferrable", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

	/**
	 * The column <code>pg_catalog.pg_constraint.condeferred</code>.
	 */
	public final TableField<Record, Boolean> CONDEFERRED = createField("condeferred", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

	/**
	 * The column <code>pg_catalog.pg_constraint.conrelid</code>.
	 */
	public final TableField<Record, Long> CONRELID = createField("conrelid", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>pg_catalog.pg_constraint.contypid</code>.
	 */
	public final TableField<Record, Long> CONTYPID = createField("contypid", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>pg_catalog.pg_constraint.confrelid</code>.
	 */
	public final TableField<Record, Long> CONFRELID = createField("confrelid", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>pg_catalog.pg_constraint.confupdtype</code>.
	 */
	public final TableField<Record, String> CONFUPDTYPE = createField("confupdtype", org.jooq.impl.SQLDataType.CHAR.nullable(false), this, "");

	/**
	 * The column <code>pg_catalog.pg_constraint.confdeltype</code>.
	 */
	public final TableField<Record, String> CONFDELTYPE = createField("confdeltype", org.jooq.impl.SQLDataType.CHAR.nullable(false), this, "");

	/**
	 * The column <code>pg_catalog.pg_constraint.confmatchtype</code>.
	 */
	public final TableField<Record, String> CONFMATCHTYPE = createField("confmatchtype", org.jooq.impl.SQLDataType.CHAR.nullable(false), this, "");

	/**
	 * The column <code>pg_catalog.pg_constraint.conkey</code>.
	 */
	public final TableField<Record, Short[]> CONKEY = createField("conkey", org.jooq.impl.SQLDataType.SMALLINT.getArrayDataType(), this, "");

	/**
	 * The column <code>pg_catalog.pg_constraint.confkey</code>.
	 */
	public final TableField<Record, Short[]> CONFKEY = createField("confkey", org.jooq.impl.SQLDataType.SMALLINT.getArrayDataType(), this, "");

	/**
	 * The column <code>pg_catalog.pg_constraint.conbin</code>.
	 */
	public final TableField<Record, String> CONBIN = createField("conbin", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>pg_catalog.pg_constraint.consrc</code>.
	 */
	public final TableField<Record, String> CONSRC = createField("consrc", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * Create a <code>pg_catalog.pg_constraint</code> table reference
	 */
	public PgConstraint() {
		this("pg_constraint", null);
	}

	/**
	 * Create an aliased <code>pg_catalog.pg_constraint</code> table reference
	 */
	public PgConstraint(String alias) {
		this(alias, PG_CONSTRAINT);
	}

	private PgConstraint(String alias, Table<Record> aliased) {
		this(alias, aliased, null);
	}

	private PgConstraint(String alias, Table<Record> aliased, Field<?>[] parameters) {
		super(alias, PgCatalog.PG_CATALOG, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PgConstraint as(String alias) {
		return new PgConstraint(alias, this);
	}

	/**
	 * Rename this table
	 */
	public PgConstraint rename(String name) {
		return new PgConstraint(name, null);
	}
}
