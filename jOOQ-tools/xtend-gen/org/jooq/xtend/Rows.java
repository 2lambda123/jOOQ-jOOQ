/**
 * Copyright (c) 2009-2015, Data Geekery GmbH (http://www.datageekery.com)
 * All rights reserved.
 * 
 * This work is dual-licensed
 * - under the Apache Software License 2.0 (the "ASL")
 * - under the jOOQ License and Maintenance Agreement (the "jOOQ License")
 * =============================================================================
 * You may choose which license applies to you:
 * 
 * - If you're using this work with Open Source databases, you may choose
 *   either ASL or jOOQ License.
 * - If you're using this work with at least one commercial database, you must
 *   choose jOOQ License
 * 
 * For more information, please visit http://www.jooq.org/licenses
 * 
 * Apache Software License 2.0:
 * -----------------------------------------------------------------------------
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *  http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * jOOQ License and Maintenance Agreement:
 * -----------------------------------------------------------------------------
 * Data Geekery grants the Customer the non-exclusive, timely limited and
 * non-transferable license to install and use the Software under the terms of
 * the jOOQ License and Maintenance Agreement.
 * 
 * This library is distributed with a LIMITED WARRANTY. See the jOOQ License
 * and Maintenance Agreement for more details: http://www.jooq.org/licensing
 */
package org.jooq.xtend;

import java.util.ArrayList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.jooq.Constants;
import org.jooq.xtend.Generators;

/**
 * @author Lukas Eder
 */
@SuppressWarnings("all")
public class Rows extends Generators {
  public static void main(final String[] args) {
    final Rows rows = new Rows();
    rows.generateRowClasses();
    rows.generateRowImpl();
  }
  
  public void generateRowClasses() {
    IntegerRange _upTo = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
    for (final Integer degree : _upTo) {
      {
        final StringBuilder out = new StringBuilder();
        final CharSequence typeSuffix = this.typeSuffix((degree).intValue());
        final CharSequence typeSuffixRaw = this.typeSuffixRaw((degree).intValue());
        final CharSequence recTypeSuffix = this.recTypeSuffix((degree).intValue());
        final CharSequence recTypeSuffixRaw = this.recTypeSuffixRaw((degree).intValue());
        StringConcatenation _builder = new StringConcatenation();
        CharSequence _classHeader = this.classHeader();
        _builder.append(_classHeader, "");
        _builder.newLineIfNotEmpty();
        _builder.append("package org.jooq;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("import static org.jooq.SQLDialect.ASE;");
        _builder.newLine();
        _builder.append("import static org.jooq.SQLDialect.CUBRID;");
        _builder.newLine();
        _builder.append("import static org.jooq.SQLDialect.DB2;");
        _builder.newLine();
        _builder.append("import static org.jooq.SQLDialect.DERBY;");
        _builder.newLine();
        _builder.append("import static org.jooq.SQLDialect.FIREBIRD;");
        _builder.newLine();
        _builder.append("import static org.jooq.SQLDialect.H2;");
        _builder.newLine();
        _builder.append("import static org.jooq.SQLDialect.HANA;");
        _builder.newLine();
        _builder.append("import static org.jooq.SQLDialect.HSQLDB;");
        _builder.newLine();
        _builder.append("import static org.jooq.SQLDialect.INGRES;");
        _builder.newLine();
        _builder.append("import static org.jooq.SQLDialect.MARIADB;");
        _builder.newLine();
        _builder.append("import static org.jooq.SQLDialect.MYSQL;");
        _builder.newLine();
        _builder.append("import static org.jooq.SQLDialect.ORACLE;");
        _builder.newLine();
        _builder.append("import static org.jooq.SQLDialect.POSTGRES;");
        _builder.newLine();
        _builder.append("import static org.jooq.SQLDialect.SQLSERVER;");
        _builder.newLine();
        _builder.append("import static org.jooq.SQLDialect.SYBASE;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("import org.jooq.Comparator;");
        _builder.newLine();
        _builder.append("import org.jooq.impl.DSL;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("import java.util.Collection;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("import javax.annotation.Generated;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("/**");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* A model type for a row value expression with degree <code>");
        {
          if (((degree).intValue() > 0)) {
            _builder.append(degree, " ");
          } else {
            _builder.append("N > ");
            _builder.append(Constants.MAX_ROW_DEGREE, " ");
          }
        }
        _builder.append("</code>.");
        _builder.newLineIfNotEmpty();
        _builder.append(" ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* Note: Not all databases support row value expressions, but many row value");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* expression operations can be emulated on all databases. See relevant row");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* value expression method Javadocs for details.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* @author Lukas Eder");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        CharSequence _generatedAnnotation = this.generatedAnnotation();
        _builder.append(_generatedAnnotation, "");
        _builder.newLineIfNotEmpty();
        _builder.append("public interface Row");
        _builder.append(typeSuffix, "");
        _builder.append(" extends Row {");
        _builder.newLineIfNotEmpty();
        {
          if (((degree).intValue() > 0)) {
            _builder.newLine();
            _builder.append("    ");
            _builder.append("// ------------------------------------------------------------------------");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("// Field accessors");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("// ------------------------------------------------------------------------");
            _builder.newLine();
            {
              IntegerRange _upTo_1 = new IntegerRange(1, (degree).intValue());
              for(final Integer d : _upTo_1) {
                _builder.newLine();
                _builder.append("    ");
                _builder.append("/**");
                _builder.newLine();
                _builder.append("    ");
                _builder.append(" ");
                _builder.append("* Get the ");
                String _first = this.first((d).intValue());
                _builder.append(_first, "     ");
                _builder.append(" field.");
                _builder.newLineIfNotEmpty();
                _builder.append("    ");
                _builder.append(" ");
                _builder.append("*/");
                _builder.newLine();
                _builder.append("    ");
                _builder.append("Field<T");
                _builder.append(d, "    ");
                _builder.append("> field");
                _builder.append(d, "    ");
                _builder.append("();");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// ------------------------------------------------------------------------");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// Generic comparison predicates");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// ------------------------------------------------------------------------");
        _builder.newLine();
        _builder.append("    ");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* using a dynamic comparator.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* See the explicit comparison methods for details. Note, not all");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* {@link Comparator} types are supported");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #equal(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("* @see #notEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("* @see #lessThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("* @see #lessOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("* @see #greaterThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("* @see #greaterOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition compare(Comparator comparator, Row");
        _builder.append(typeSuffix, "    ");
        _builder.append(" row);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a record");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* using a dynamic comparator.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* See the explicit comparison methods for details. Note, not all");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* {@link Comparator} types are supported");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #equal(Record");
        _builder.append(recTypeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("* @see #notEqual(Record");
        _builder.append(recTypeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("* @see #lessThan(Record");
        _builder.append(recTypeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("* @see #lessOrEqual(Record");
        _builder.append(recTypeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("* @see #greaterThan(Record");
        _builder.append(recTypeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("* @see #greaterOrEqual(Record");
        _builder.append(recTypeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition compare(Comparator comparator, Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append(" record);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* using a dynamic comparator.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* See the explicit comparison methods for details. Note, not all");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* {@link Comparator} types are supported");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #equal(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("* @see #notEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("* @see #lessThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("* @see #lessOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("* @see #greaterThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("* @see #greaterOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition compare(Comparator comparator, ");
        String _TN_tn = this.TN_tn((degree).intValue());
        _builder.append(_TN_tn, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* using a dynamic comparator.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* See the explicit comparison methods for details. Note, not all");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* {@link Comparator} types are supported");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #equal(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("* @see #notEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("* @see #lessThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("* @see #lessOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("* @see #greaterThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("* @see #greaterOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition compare(Comparator comparator, ");
        String _Field_TN_tn = this.Field_TN_tn((degree).intValue());
        _builder.append(_Field_TN_tn, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* using a dynamic comparator.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* See the explicit comparison methods for details. Note, not all");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* {@link Comparator} types are supported");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #equal(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notEqual(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #lessThan(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #lessOrEqual(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #greaterThan(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #greaterOrEqual(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition compare(Comparator comparator, Select<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* using a dynamic comparator.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* See the explicit comparison methods for details. Note, not all");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* {@link Comparator} types are supported");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #equal(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notEqual(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #lessThan(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #lessOrEqual(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #greaterThan(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #greaterOrEqual(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition compare(Comparator comparator, QuantifiedSelect<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// ------------------------------------------------------------------------");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// Equal / Not equal comparison predicates");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// ------------------------------------------------------------------------");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Row equality comparison predicates can be emulated in those databases");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* that do not support such predicates natively:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>(A, B) = (1, 2)</code> is equivalent to");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>A = 1 AND B = 2</code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition equal(Row");
        _builder.append(typeSuffix, "    ");
        _builder.append(" row);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a record for equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #equal(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition equal(Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append(" record);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #equal(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition equal(");
        String _TN_tn_1 = this.TN_tn((degree).intValue());
        _builder.append(_TN_tn_1, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #equal(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition equal(");
        String _Field_TN_tn_1 = this.Field_TN_tn((degree).intValue());
        _builder.append(_Field_TN_tn_1, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #equal(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition equal(Select<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support({ ASE, CUBRID, DB2, DERBY, FIREBIRD, H2, HANA, HSQLDB, INGRES, MARIADB, MYSQL, ORACLE, POSTGRES, SQLSERVER, SYBASE })");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition equal(QuantifiedSelect<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #equal(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition eq(Row");
        _builder.append(typeSuffix, "    ");
        _builder.append(" row);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a record for equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #equal(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition eq(Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append(" record);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #equal(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition eq(");
        String _TN_tn_2 = this.TN_tn((degree).intValue());
        _builder.append(_TN_tn_2, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #equal(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition eq(");
        String _Field_TN_tn_2 = this.Field_TN_tn((degree).intValue());
        _builder.append(_Field_TN_tn_2, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #equal(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition eq(Select<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support({ ASE, CUBRID, DB2, DERBY, FIREBIRD, H2, HANA, HSQLDB, INGRES, MARIADB, MYSQL, ORACLE, POSTGRES, SQLSERVER, SYBASE })");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition eq(QuantifiedSelect<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* non-equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Row non-equality comparison predicates can be emulated in those");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* databases that do not support such predicates natively:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>(A, B) &lt;> (1, 2)</code> is equivalent to");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>NOT(A = 1 AND B = 2)</code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition notEqual(Row");
        _builder.append(typeSuffix, "    ");
        _builder.append(" row);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a record for non-equality");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition notEqual(Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append(" record);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* non-equality");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition notEqual(");
        String _TN_tn_3 = this.TN_tn((degree).intValue());
        _builder.append(_TN_tn_3, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* non-equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition notEqual(");
        String _Field_TN_tn_3 = this.Field_TN_tn((degree).intValue());
        _builder.append(_Field_TN_tn_3, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for non-equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition notEqual(Select<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for non-equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support({ ASE, CUBRID, DB2, DERBY, FIREBIRD, H2, HANA, HSQLDB, INGRES, MARIADB, MYSQL, ORACLE, POSTGRES, SQLSERVER, SYBASE })");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition notEqual(QuantifiedSelect<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* non-equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition ne(Row");
        _builder.append(typeSuffix, "    ");
        _builder.append(" row);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a record for non-equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition ne(Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append(" record);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* non-equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition ne(");
        String _TN_tn_4 = this.TN_tn((degree).intValue());
        _builder.append(_TN_tn_4, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* non-equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition ne(");
        String _Field_TN_tn_4 = this.Field_TN_tn((degree).intValue());
        _builder.append(_Field_TN_tn_4, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for non-equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition ne(Select<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for non-equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support({ ASE, CUBRID, DB2, DERBY, FIREBIRD, H2, HANA, HSQLDB, INGRES, MARIADB, MYSQL, ORACLE, POSTGRES, SQLSERVER, SYBASE })");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition ne(QuantifiedSelect<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// ------------------------------------------------------------------------");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// Ordering comparison predicates");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// ------------------------------------------------------------------------");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Row order comparison predicates can be emulated in those");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* databases that do not support such predicates natively:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>(A, B, C) &lt; (1, 2, 3)</code> is equivalent to");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>A &lt; 1 OR (A = 1 AND B &lt; 2) OR (A = 1 AND B = 2 AND C &lt; 3)</code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition lessThan(Row");
        _builder.append(typeSuffix, "    ");
        _builder.append(" row);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a record for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #lessThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition lessThan(Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append(" record);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #lessThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition lessThan(");
        String _TN_tn_5 = this.TN_tn((degree).intValue());
        _builder.append(_TN_tn_5, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #lessThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition lessThan(");
        String _Field_TN_tn_5 = this.Field_TN_tn((degree).intValue());
        _builder.append(_Field_TN_tn_5, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #lessThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition lessThan(Select<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support({ ASE, CUBRID, DB2, DERBY, FIREBIRD, H2, HSQLDB, INGRES, MARIADB, MYSQL, ORACLE, POSTGRES, SQLSERVER, SYBASE })");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition lessThan(QuantifiedSelect<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #lessThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition lt(Row");
        _builder.append(typeSuffix, "    ");
        _builder.append(" row);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a record for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #lessThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition lt(Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append(" record);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #lessThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition lt(");
        String _TN_tn_6 = this.TN_tn((degree).intValue());
        _builder.append(_TN_tn_6, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #lessThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition lt(");
        String _Field_TN_tn_6 = this.Field_TN_tn((degree).intValue());
        _builder.append(_Field_TN_tn_6, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #lessThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition lt(Select<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support({ ASE, CUBRID, DB2, DERBY, FIREBIRD, H2, HSQLDB, INGRES, MARIADB, MYSQL, ORACLE, POSTGRES, SQLSERVER, SYBASE })");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition lt(QuantifiedSelect<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Row order comparison predicates can be emulated in those");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* databases that do not support such predicates natively:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>(A, B) &lt;= (1, 2)</code> is equivalent to");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>A &lt; 1 OR (A = 1 AND B &lt; 2) OR (A = 1 AND B = 2)</code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition lessOrEqual(Row");
        _builder.append(typeSuffix, "    ");
        _builder.append(" row);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a record for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #lessOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition lessOrEqual(Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append(" record);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #lessOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition lessOrEqual(");
        String _TN_tn_7 = this.TN_tn((degree).intValue());
        _builder.append(_TN_tn_7, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #lessOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition lessOrEqual(");
        String _Field_TN_tn_7 = this.Field_TN_tn((degree).intValue());
        _builder.append(_Field_TN_tn_7, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #lessOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition lessOrEqual(Select<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support({ ASE, CUBRID, DB2, DERBY, FIREBIRD, H2, HSQLDB, INGRES, MARIADB, MYSQL, ORACLE, POSTGRES, SQLSERVER, SYBASE })");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition lessOrEqual(QuantifiedSelect<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #lessOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition le(Row");
        _builder.append(typeSuffix, "    ");
        _builder.append(" row);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a record for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #lessOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition le(Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append(" record);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #lessOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition le(");
        String _TN_tn_8 = this.TN_tn((degree).intValue());
        _builder.append(_TN_tn_8, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #lessOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition le(");
        String _Field_TN_tn_8 = this.Field_TN_tn((degree).intValue());
        _builder.append(_Field_TN_tn_8, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #lessOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition le(Select<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support({ ASE, CUBRID, DB2, DERBY, FIREBIRD, H2, HSQLDB, INGRES, MARIADB, MYSQL, ORACLE, POSTGRES, SQLSERVER, SYBASE })");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition le(QuantifiedSelect<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Row order comparison predicates can be emulated in those");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* databases that do not support such predicates natively:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>(A, B, C) > (1, 2, 3)</code> is equivalent to");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>A > 1 OR (A = 1 AND B > 2) OR (A = 1 AND B = 2 AND C > 3)</code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition greaterThan(Row");
        _builder.append(typeSuffix, "    ");
        _builder.append(" row);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a record for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #greaterThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition greaterThan(Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append(" record);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #greaterThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition greaterThan(");
        String _TN_tn_9 = this.TN_tn((degree).intValue());
        _builder.append(_TN_tn_9, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #greaterThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition greaterThan(");
        String _Field_TN_tn_9 = this.Field_TN_tn((degree).intValue());
        _builder.append(_Field_TN_tn_9, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #greaterThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition greaterThan(Select<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support({ ASE, CUBRID, DB2, DERBY, FIREBIRD, H2, HSQLDB, INGRES, MARIADB, MYSQL, ORACLE, POSTGRES, SQLSERVER, SYBASE })");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition greaterThan(QuantifiedSelect<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #greaterThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition gt(Row");
        _builder.append(typeSuffix, "    ");
        _builder.append(" row);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a record for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #greaterThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition gt(Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append(" record);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #greaterThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition gt(");
        String _TN_tn_10 = this.TN_tn((degree).intValue());
        _builder.append(_TN_tn_10, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #greaterThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition gt(");
        String _Field_TN_tn_10 = this.Field_TN_tn((degree).intValue());
        _builder.append(_Field_TN_tn_10, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #greaterThan(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition gt(Select<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support({ ASE, CUBRID, DB2, DERBY, FIREBIRD, H2, HSQLDB, INGRES, MARIADB, MYSQL, ORACLE, POSTGRES, SQLSERVER, SYBASE })");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition gt(QuantifiedSelect<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Row order comparison predicates can be emulated in those");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* databases that do not support such predicates natively:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>(A, B) >= (1, 2)</code> is equivalent to");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>A > 1 OR (A = 1 AND B > 2) OR (A = 1 AND B = 2)</code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition greaterOrEqual(Row");
        _builder.append(typeSuffix, "    ");
        _builder.append(" row);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a record for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #greaterOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition greaterOrEqual(Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append(" record);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #greaterOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition greaterOrEqual(");
        String _TN_tn_11 = this.TN_tn((degree).intValue());
        _builder.append(_TN_tn_11, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #greaterOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition greaterOrEqual(");
        String _Field_TN_tn_11 = this.Field_TN_tn((degree).intValue());
        _builder.append(_Field_TN_tn_11, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #greaterOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition greaterOrEqual(Select<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support({ ASE, CUBRID, DB2, DERBY, FIREBIRD, H2, HSQLDB, INGRES, MARIADB, MYSQL, ORACLE, POSTGRES, SQLSERVER, SYBASE })");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition greaterOrEqual(QuantifiedSelect<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #greaterOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition ge(Row");
        _builder.append(typeSuffix, "    ");
        _builder.append(" row);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a record for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #greaterOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition ge(Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append(" record);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #greaterOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition ge(");
        String _TN_tn_12 = this.TN_tn((degree).intValue());
        _builder.append(_TN_tn_12, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with another row value expression for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #greaterOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition ge(");
        String _Field_TN_tn_12 = this.Field_TN_tn((degree).intValue());
        _builder.append(_Field_TN_tn_12, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #greaterOrEqual(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition ge(Select<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for order.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#all(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Field)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Select)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see DSL#any(Object...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support({ ASE, CUBRID, DB2, DERBY, FIREBIRD, H2, HSQLDB, INGRES, MARIADB, MYSQL, ORACLE, POSTGRES, SQLSERVER, SYBASE })");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition ge(QuantifiedSelect<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// ------------------------------------------------------------------------");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// [NOT] BETWEEN predicates");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// ------------------------------------------------------------------------");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is within a range of two other row");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* value expressions.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #between(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(", Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("BetweenAndStep");
        _builder.append(typeSuffix, "    ");
        _builder.append(" between(");
        String _TN_XXXn = this.TN_XXXn((degree).intValue(), "minValue");
        _builder.append(_TN_XXXn, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is within a range of two other row");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* value expressions.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #between(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(", Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("BetweenAndStep");
        _builder.append(typeSuffix, "    ");
        _builder.append(" between(");
        String _Field_TN_XXXn = this.Field_TN_XXXn((degree).intValue(), "minValue");
        _builder.append(_Field_TN_XXXn, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is within a range of two other row");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* value expressions.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #between(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(", Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("BetweenAndStep");
        _builder.append(typeSuffix, "    ");
        _builder.append(" between(Row");
        _builder.append(typeSuffix, "    ");
        _builder.append(" minValue);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is within a range of two records.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #between(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(", Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("BetweenAndStep");
        _builder.append(typeSuffix, "    ");
        _builder.append(" between(Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append(" minValue);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is within a range of two other row");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* value expressions.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* This is the same as calling <code>between(minValue).and(maxValue)</code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The expression <code>A BETWEEN B AND C</code> is equivalent to the");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* expression <code>A >= B AND A &lt;= C</code> for those SQL dialects that do");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* not properly support the <code>BETWEEN</code> predicate for row value");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* expressions");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition between(Row");
        _builder.append(typeSuffix, "    ");
        _builder.append(" minValue,");
        _builder.newLineIfNotEmpty();
        _builder.append("                      ");
        _builder.append("Row");
        _builder.append(typeSuffix, "                      ");
        _builder.append(" maxValue);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is within a range of two records.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* This is the same as calling <code>between(minValue).and(maxValue)</code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #between(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(", Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition between(Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append(" minValue,");
        _builder.newLineIfNotEmpty();
        _builder.append("                      ");
        _builder.append("Record");
        _builder.append(recTypeSuffix, "                      ");
        _builder.append(" maxValue);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is within a symmetric range of two");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* other row value expressions.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #betweenSymmetric(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(", Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("BetweenAndStep");
        _builder.append(typeSuffix, "    ");
        _builder.append(" betweenSymmetric(");
        String _TN_XXXn_1 = this.TN_XXXn((degree).intValue(), "minValue");
        _builder.append(_TN_XXXn_1, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is within a symmetric range of two");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* other row value expressions.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #betweenSymmetric(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(", Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("BetweenAndStep");
        _builder.append(typeSuffix, "    ");
        _builder.append(" betweenSymmetric(");
        String _Field_TN_XXXn_1 = this.Field_TN_XXXn((degree).intValue(), "minValue");
        _builder.append(_Field_TN_XXXn_1, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is within a symmetric range of two");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* other row value expressions.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #betweenSymmetric(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(", Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("BetweenAndStep");
        _builder.append(typeSuffix, "    ");
        _builder.append(" betweenSymmetric(Row");
        _builder.append(typeSuffix, "    ");
        _builder.append(" minValue);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is within a symmetric range of two");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* records.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #betweenSymmetric(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(", Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("BetweenAndStep");
        _builder.append(typeSuffix, "    ");
        _builder.append(" betweenSymmetric(Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append(" minValue);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is within a symmetric range of two");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* other row value expressions.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* This is the same as calling <code>betweenSymmetric(minValue).and(maxValue)</code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The expression <code>A BETWEEN SYMMETRIC B AND C</code> is equivalent to");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* the expression <code>(A >= B AND A &lt;= C) OR (A >= C AND A &lt;= B)</code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* for those SQL dialects that do not properly support the");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>BETWEEN</code> predicate for row value expressions");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition betweenSymmetric(Row");
        _builder.append(typeSuffix, "    ");
        _builder.append(" minValue,");
        _builder.newLineIfNotEmpty();
        _builder.append("                               ");
        _builder.append("Row");
        _builder.append(typeSuffix, "                               ");
        _builder.append(" maxValue);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is within a symmetric range of two");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* records.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* This is the same as calling <code>betweenSymmetric(minValue).and(maxValue)</code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #betweenSymmetric(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(", Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition betweenSymmetric(Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append(" minValue,");
        _builder.newLineIfNotEmpty();
        _builder.append("                               ");
        _builder.append("Record");
        _builder.append(recTypeSuffix, "                               ");
        _builder.append(" maxValue);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is not within a range of two other");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* row value expressions.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #between(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(", Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("BetweenAndStep");
        _builder.append(typeSuffix, "    ");
        _builder.append(" notBetween(");
        String _TN_XXXn_2 = this.TN_XXXn((degree).intValue(), "minValue");
        _builder.append(_TN_XXXn_2, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is not within a range of two other");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* row value expressions.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notBetween(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(", Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("BetweenAndStep");
        _builder.append(typeSuffix, "    ");
        _builder.append(" notBetween(");
        String _Field_TN_XXXn_2 = this.Field_TN_XXXn((degree).intValue(), "minValue");
        _builder.append(_Field_TN_XXXn_2, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is not within a range of two other");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* row value expressions.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notBetween(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(", Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("BetweenAndStep");
        _builder.append(typeSuffix, "    ");
        _builder.append(" notBetween(Row");
        _builder.append(typeSuffix, "    ");
        _builder.append(" minValue);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is within a range of two records.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notBetween(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(", Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("BetweenAndStep");
        _builder.append(typeSuffix, "    ");
        _builder.append(" notBetween(Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append(" minValue);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is not within a range of two other");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* row value expressions.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* This is the same as calling <code>notBetween(minValue).and(maxValue)</code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The expression <code>A NOT BETWEEN B AND C</code> is equivalent to the");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* expression <code>A &lt; B OR A > C</code> for those SQL dialects that do");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* not properly support the <code>BETWEEN</code> predicate for row value");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* expressions");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition notBetween(Row");
        _builder.append(typeSuffix, "    ");
        _builder.append(" minValue,");
        _builder.newLineIfNotEmpty();
        _builder.append("                         ");
        _builder.append("Row");
        _builder.append(typeSuffix, "                         ");
        _builder.append(" maxValue);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is within a range of two records.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* This is the same as calling <code>notBetween(minValue).and(maxValue)</code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notBetween(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(", Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition notBetween(Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append(" minValue,");
        _builder.newLineIfNotEmpty();
        _builder.append("                         ");
        _builder.append("Record");
        _builder.append(recTypeSuffix, "                         ");
        _builder.append(" maxValue);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is not within a symmetric range of two");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* other row value expressions.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notBetweenSymmetric(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(", Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("BetweenAndStep");
        _builder.append(typeSuffix, "    ");
        _builder.append(" notBetweenSymmetric(");
        String _TN_XXXn_3 = this.TN_XXXn((degree).intValue(), "minValue");
        _builder.append(_TN_XXXn_3, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is not within a symmetric range of two");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* other row value expressions.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notBetweenSymmetric(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(", Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("BetweenAndStep");
        _builder.append(typeSuffix, "    ");
        _builder.append(" notBetweenSymmetric(");
        String _Field_TN_XXXn_3 = this.Field_TN_XXXn((degree).intValue(), "minValue");
        _builder.append(_Field_TN_XXXn_3, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is not within a symmetric range of two");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* other row value expressions.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notBetweenSymmetric(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(", Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("BetweenAndStep");
        _builder.append(typeSuffix, "    ");
        _builder.append(" notBetweenSymmetric(Row");
        _builder.append(typeSuffix, "    ");
        _builder.append(" minValue);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is not within a symmetric range of two");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* records.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notBetweenSymmetric(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(", Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("BetweenAndStep");
        _builder.append(typeSuffix, "    ");
        _builder.append(" notBetweenSymmetric(Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append(" minValue);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is not within a symmetric range of two");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* other row value expressions.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* This is the same as calling <code>notBetweenSymmetric(minValue).and(maxValue)</code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The expression <code>A NOT BETWEEN SYMMETRIC B AND C</code> is equivalent");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* to the expression <code>(A &lt; B OR A > C) AND (A &lt; C OR A > B)</code> for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* those SQL dialects that do not properly support the <code>BETWEEN</code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* predicate for row value expressions");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition notBetweenSymmetric(Row");
        _builder.append(typeSuffix, "    ");
        _builder.append(" minValue,");
        _builder.newLineIfNotEmpty();
        _builder.append("                                  ");
        _builder.append("Row");
        _builder.append(typeSuffix, "                                  ");
        _builder.append(" maxValue);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Check if this row value expression is not within a symmetric range of two");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* records.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* This is the same as calling <code>notBetweenSymmetric(minValue).and(maxValue)</code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notBetweenSymmetric(Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(", Row");
        _builder.append(typeSuffixRaw, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition notBetweenSymmetric(Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append(" minValue,");
        _builder.newLineIfNotEmpty();
        _builder.append("                                  ");
        _builder.append("Record");
        _builder.append(recTypeSuffix, "                                  ");
        _builder.append(" maxValue);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// ------------------------------------------------------------------------");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// [NOT] DISTINCT predicates");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// ------------------------------------------------------------------------");
        _builder.newLine();
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// ------------------------------------------------------------------------");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// [NOT] IN predicates");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("// ------------------------------------------------------------------------");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a set of row value expressions for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Row IN predicates can be emulated in those databases that do not support");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* such predicates natively: <code>(A, B) IN ((1, 2), (3, 4))</code> is");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* equivalent to <code>((A, B) = (1, 2)) OR ((A, B) = (3, 4))</code>, which");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* is equivalent to <code>(A = 1 AND B = 2) OR (A = 3 AND B = 4)</code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition in(Collection<? extends Row");
        _builder.append(typeSuffix, "    ");
        _builder.append("> rows);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a set of records for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Row IN predicates can be emulated in those databases that do not support");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* such predicates natively: <code>(A, B) IN ((1, 2), (3, 4))</code> is");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* equivalent to <code>((A, B) = (1, 2)) OR ((A, B) = (3, 4))</code>, which");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* is equivalent to <code>(A = 1 AND B = 2) OR (A = 3 AND B = 4)</code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition in(Result<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> result);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a set of row value expressions for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #in(Collection)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition in(Row");
        _builder.append(typeSuffix, "    ");
        _builder.append("... rows);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a set of records for equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #in(Collection)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition in(Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("... record);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #in(Collection)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition in(Select<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a set of row value expressions for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Row NOT IN predicates can be emulated in those databases that do not");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* support such predicates natively:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>(A, B) NOT IN ((1, 2), (3, 4))</code> is equivalent to");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>NOT(((A, B) = (1, 2)) OR ((A, B) = (3, 4)))</code>, which is");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* equivalent to <code>NOT((A = 1 AND B = 2) OR (A = 3 AND B = 4))</code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition notIn(Collection<? extends Row");
        _builder.append(typeSuffix, "    ");
        _builder.append("> rows);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a set of records for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Row NOT IN predicates can be emulated in those databases that do not");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* support such predicates natively:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>(A, B) NOT IN ((1, 2), (3, 4))</code> is equivalent to");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>NOT(((A, B) = (1, 2)) OR ((A, B) = (3, 4)))</code>, which is");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* equivalent to <code>NOT((A = 1 AND B = 2) OR (A = 3 AND B = 4))</code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition notIn(Result<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> result);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a set of row value expressions for");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notIn(Collection)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition notIn(Row");
        _builder.append(typeSuffix, "    ");
        _builder.append("... rows);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a set of records for non-equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notIn(Collection)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition notIn(Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("... record);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Compare this row value expression with a subselect for non-equality.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #notIn(Collection)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("Condition notIn(Select<? extends Record");
        _builder.append(recTypeSuffix, "    ");
        _builder.append("> select);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        {
          if (((degree).intValue() == 2)) {
            _builder.append("    ");
            _builder.append("// ------------------------------------------------------------------------");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("// Row2-specific OVERLAPS predicate");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("// ------------------------------------------------------------------------");
            _builder.newLine();
            _builder.newLine();
            _builder.append("    ");
            _builder.append("/**");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* Check if this row value expression overlaps another row value expression.");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* <p>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* The SQL standard specifies a temporal <code>OVERLAPS</code> predicate,");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* which comes in two flavours:");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* <ul>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* <li><code>(DATE, DATE) OVERLAPS (DATE, DATE)</code></li>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* <li><code>(DATE, INTERVAL) OVERLAPS (DATE, INTERVAL)</code></li>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* </ul>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* <p>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* jOOQ also supports arbitrary 2-degree row value expression comparisons,");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* by emulating them as such <code><pre>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* -- This predicate");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* (A, B) OVERLAPS (C, D)");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("*");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* -- can be emulated as such");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* (C &lt;= B) AND (A &lt;= D)");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* </pre></code>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("*/");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("@Support");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("Condition overlaps(T1 t1, T2 t2);");
            _builder.newLine();
            _builder.newLine();
            _builder.append("    ");
            _builder.append("/**");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* Check if this row value expression overlaps another row value expression.");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* <p>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* The SQL standard specifies a temporal <code>OVERLAPS</code> predicate,");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* which comes in two flavours:");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* <ul>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* <li><code>(DATE, DATE) OVERLAPS (DATE, DATE)</code></li>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* <li><code>(DATE, INTERVAL) OVERLAPS (DATE, INTERVAL)</code></li>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* </ul>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* <p>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* jOOQ also supports arbitrary 2-degree row value expression comparisons,");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* by emulating them as such <code><pre>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* -- This predicate");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* (A, B) OVERLAPS (C, D)");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("*");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* -- can be emulated as such");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* (C &lt;= B) AND (A &lt;= D)");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* </pre></code>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("*/");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("@Support");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("Condition overlaps(Field<T1> t1, Field<T2> t2);");
            _builder.newLine();
            _builder.newLine();
            _builder.append("    ");
            _builder.append("/**");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* Check if this row value expression overlaps another row value expression.");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* <p>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* The SQL standard specifies a temporal <code>OVERLAPS</code> predicate,");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* which comes in two flavours:");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* <ul>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* <li><code>(DATE, DATE) OVERLAPS (DATE, DATE)</code></li>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* <li><code>(DATE, INTERVAL) OVERLAPS (DATE, INTERVAL)</code></li>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* </ul>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* <p>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* jOOQ also supports arbitrary 2-degree row value expression comparisons,");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* by emulating them as such <code><pre>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* -- This predicate");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* (A, B) OVERLAPS (C, D)");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("*");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* -- can be emulated as such");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* (C &lt;= B) AND (A &lt;= D)");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("* </pre></code>");
            _builder.newLine();
            _builder.append("    ");
            _builder.append(" ");
            _builder.append("*/");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("@Support");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("Condition overlaps(Row2<T1, T2> row);");
            _builder.newLine();
            _builder.newLine();
          }
        }
        _builder.append("}");
        _builder.newLine();
        out.append(_builder);
        Object _degreeOrN = this.degreeOrN((degree).intValue());
        String _plus = ("org.jooq.Row" + _degreeOrN);
        this.write(_plus, out);
      }
    }
  }
  
  public void generateRowImpl() {
    final StringBuilder out = new StringBuilder();
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _classHeader = this.classHeader();
    _builder.append(_classHeader, "");
    _builder.newLineIfNotEmpty();
    _builder.append("package org.jooq.impl;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import static org.jooq.Clause.FIELD_ROW;");
    _builder.newLine();
    _builder.append("import static org.jooq.SQLDialect.INFORMIX;");
    _builder.newLine();
    _builder.append("import static org.jooq.impl.DSL.row;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.Arrays;");
    _builder.newLine();
    _builder.append("import java.util.Collection;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.annotation.Generated;");
    _builder.newLine();
    _builder.newLine();
    {
      IntegerRange _upTo = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree : _upTo) {
        _builder.append("import org.jooq.BetweenAndStep");
        CharSequence _typeSuffixRaw = this.typeSuffixRaw((degree).intValue());
        _builder.append(_typeSuffixRaw, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("import org.jooq.Clause;");
    _builder.newLine();
    _builder.append("import org.jooq.Comparator;");
    _builder.newLine();
    _builder.append("import org.jooq.Condition;");
    _builder.newLine();
    _builder.append("import org.jooq.Context;");
    _builder.newLine();
    _builder.append("import org.jooq.DataType;");
    _builder.newLine();
    _builder.append("import org.jooq.Field;");
    _builder.newLine();
    _builder.append("import org.jooq.Name;");
    _builder.newLine();
    _builder.append("import org.jooq.QuantifiedSelect;");
    _builder.newLine();
    {
      IntegerRange _upTo_1 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_1 : _upTo_1) {
        _builder.append("import org.jooq.Record");
        CharSequence _recTypeSuffixRaw = this.recTypeSuffixRaw((degree_1).intValue());
        _builder.append(_recTypeSuffixRaw, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("import org.jooq.Row;");
    _builder.newLine();
    {
      IntegerRange _upTo_2 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_2 : _upTo_2) {
        _builder.append("import org.jooq.Row");
        CharSequence _typeSuffixRaw_1 = this.typeSuffixRaw((degree_2).intValue());
        _builder.append(_typeSuffixRaw_1, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("import org.jooq.Result;");
    _builder.newLine();
    _builder.append("import org.jooq.Select;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author Lukas Eder");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    CharSequence _generatedAnnotation = this.generatedAnnotation();
    _builder.append(_generatedAnnotation, "");
    _builder.newLineIfNotEmpty();
    _builder.append("@SuppressWarnings({ \"rawtypes\", \"unchecked\" })");
    _builder.newLine();
    _builder.append("class RowImpl<");
    String _TN = this.TN(Constants.MAX_ROW_DEGREE);
    _builder.append(_TN, "");
    _builder.append("> extends AbstractQueryPart");
    _builder.newLineIfNotEmpty();
    _builder.append("implements");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// This row implementation implements all row types. Type-safety is");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// being checked through the type-safe API. No need for further checks here");
    _builder.newLine();
    {
      IntegerRange _upTo_3 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      boolean _hasElements = false;
      for(final Integer degree_3 : _upTo_3) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "    ");
        }
        _builder.append("    ");
        _builder.append("Row");
        CharSequence _typeSuffix = this.typeSuffix((degree_3).intValue());
        _builder.append(_typeSuffix, "    ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("{");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Generated UID");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final long     serialVersionUID = -929427349071556318L;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final Clause[] CLAUSES          = { FIELD_ROW };");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("final Fields                  fields;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RowImpl(Field<?>... fields) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this(new Fields(fields));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RowImpl(Collection<? extends Field<?>> fields) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this(new Fields(fields));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("RowImpl(Fields fields) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.fields = fields;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// XXX: QueryPart API");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ------------------------------------------------------------------------");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final void accept(Context<?> context) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("/* [pro] */");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (context.family() == INFORMIX)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("context.keyword(\"row\").sql(\" \");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("/* [/pro] */");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("context.sql(\"(\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String separator = \"\";");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (Field<?> field : fields.fields) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("context.sql(separator);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("context.visit(field);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("separator = \", \";");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("context.sql(\")\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Clause[] clauses(Context<?> ctx) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return CLAUSES;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// XXX: Row accessor API");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ------------------------------------------------------------------------");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final int size() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.size();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final <T> Field<T> field(Field<T> field) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.field(field);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Field<?> field(String name) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.field(name);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final <T> Field<T> field(String name, Class<T> type) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.field(name, type);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final <T> Field<T> field(String name, DataType<T> dataType) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.field(name, dataType);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Field<?> field(Name name) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.field(name);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final <T> Field<T> field(Name name, Class<T> type) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.field(name, type);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final <T> Field<T> field(Name name, DataType<T> dataType) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.field(name, dataType);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Field<?> field(int index) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.field(index);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final <T> Field<T> field(int index, Class<T> type) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.field(index, type);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final <T> Field<T> field(int index, DataType<T> dataType) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.field(index, dataType);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Field<?>[] fields() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.fields();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Field<?>[] fields(Field<?>... f) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.fields(f);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Field<?>[] fields(String... fieldNames) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.fields(fieldNames);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Field<?>[] fields(Name... fieldNames) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.fields(fieldNames);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Field<?>[] fields(int... fieldIndexes) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.fields(fieldIndexes);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final int indexOf(Field<?> field) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.indexOf(field);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final int indexOf(String fieldName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.indexOf(fieldName);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final int indexOf(Name fieldName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.indexOf(fieldName);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Class<?>[] types() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.types();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Class<?> type(int fieldIndex) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.type(fieldIndex);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Class<?> type(String fieldName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.type(fieldName);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Class<?> type(Name fieldName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.type(fieldName);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final DataType<?>[] dataTypes() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.dataTypes();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final DataType<?> dataType(int fieldIndex) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.dataType(fieldIndex);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final DataType<?> dataType(String fieldName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.dataType(fieldName);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final DataType<?> dataType(Name fieldName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return fields.dataType(fieldName);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    {
      IntegerRange _upTo_4 = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_4 : _upTo_4) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Field<T");
        _builder.append(degree_4, "    ");
        _builder.append("> field");
        _builder.append(degree_4, "    ");
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return fields.field(");
        _builder.append(((degree_4).intValue() - 1), "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// [NOT] NULL predicates");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ------------------------------------------------------------------------");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition isNull() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new RowIsNull(this, true);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition isNotNull() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new RowIsNull(this, false);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Generic comparison predicates");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ------------------------------------------------------------------------");
    _builder.newLine();
    {
      IntegerRange _upTo_5 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_5 : _upTo_5) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition compare(Comparator comparator, Row");
        CharSequence _typeSuffix_1 = this.typeSuffix((degree_5).intValue());
        _builder.append(_typeSuffix_1, "    ");
        _builder.append(" row) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return new RowCondition(this, row, comparator);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_6 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_6 : _upTo_6) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition compare(Comparator comparator, Record");
        CharSequence _recTypeSuffix = this.recTypeSuffix((degree_6).intValue());
        _builder.append(_recTypeSuffix, "    ");
        _builder.append(" record) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return new RowCondition(this, record.valuesRow(), comparator);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_7 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_7 : _upTo_7) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition compare(Comparator comparator, ");
        String _TN_tn = this.TN_tn((degree_7).intValue());
        _builder.append(_TN_tn, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(comparator, row(");
        String _tn = this.tn((degree_7).intValue());
        _builder.append(_tn, "        ");
        _builder.append("));");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_8 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_8 : _upTo_8) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition compare(Comparator comparator, ");
        String _Field_TN_tn = this.Field_TN_tn((degree_8).intValue());
        _builder.append(_Field_TN_tn, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(comparator, row(");
        String _tn_1 = this.tn((degree_8).intValue());
        _builder.append(_tn_1, "        ");
        _builder.append("));");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition compare(Comparator comparator, Select select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new RowSubqueryCondition(this, select, comparator);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition compare(Comparator comparator, QuantifiedSelect select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new RowSubqueryCondition(this, select, comparator);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Equal / Not equal comparison predicates");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ------------------------------------------------------------------------");
    _builder.newLine();
    {
      IntegerRange _upTo_9 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_9 : _upTo_9) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition equal(Row");
        CharSequence _typeSuffix_2 = this.typeSuffix((degree_9).intValue());
        _builder.append(_typeSuffix_2, "    ");
        _builder.append(" row) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.EQUALS, row);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_10 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_10 : _upTo_10) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition equal(Record");
        CharSequence _recTypeSuffix_1 = this.recTypeSuffix((degree_10).intValue());
        _builder.append(_recTypeSuffix_1, "    ");
        _builder.append(" record) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.EQUALS, record);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_11 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_11 : _upTo_11) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition equal(");
        String _TN_tn_1 = this.TN_tn((degree_11).intValue());
        _builder.append(_TN_tn_1, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.EQUALS, ");
        String _tn_2 = this.tn((degree_11).intValue());
        _builder.append(_tn_2, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_12 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_12 : _upTo_12) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition equal(");
        String _Field_TN_tn_1 = this.Field_TN_tn((degree_12).intValue());
        _builder.append(_Field_TN_tn_1, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.EQUALS, ");
        String _tn_3 = this.tn((degree_12).intValue());
        _builder.append(_tn_3, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_13 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_13 : _upTo_13) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition eq(Row");
        CharSequence _typeSuffix_3 = this.typeSuffix((degree_13).intValue());
        _builder.append(_typeSuffix_3, "    ");
        _builder.append(" row) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return equal(row);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_14 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_14 : _upTo_14) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition eq(Record");
        CharSequence _recTypeSuffix_2 = this.recTypeSuffix((degree_14).intValue());
        _builder.append(_recTypeSuffix_2, "    ");
        _builder.append(" record) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return equal(record);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_15 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_15 : _upTo_15) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition eq(");
        String _TN_tn_2 = this.TN_tn((degree_15).intValue());
        _builder.append(_TN_tn_2, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return equal(");
        String _tn_4 = this.tn((degree_15).intValue());
        _builder.append(_tn_4, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_16 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_16 : _upTo_16) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition eq(");
        String _Field_TN_tn_2 = this.Field_TN_tn((degree_16).intValue());
        _builder.append(_Field_TN_tn_2, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return equal(");
        String _tn_5 = this.tn((degree_16).intValue());
        _builder.append(_tn_5, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_17 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_17 : _upTo_17) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition notEqual(Row");
        CharSequence _typeSuffix_4 = this.typeSuffix((degree_17).intValue());
        _builder.append(_typeSuffix_4, "    ");
        _builder.append(" row) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.NOT_EQUALS, row);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_18 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_18 : _upTo_18) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition notEqual(Record");
        CharSequence _recTypeSuffix_3 = this.recTypeSuffix((degree_18).intValue());
        _builder.append(_recTypeSuffix_3, "    ");
        _builder.append(" record) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.NOT_EQUALS, record);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_19 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_19 : _upTo_19) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition notEqual(");
        String _TN_tn_3 = this.TN_tn((degree_19).intValue());
        _builder.append(_TN_tn_3, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.NOT_EQUALS, ");
        String _tn_6 = this.tn((degree_19).intValue());
        _builder.append(_tn_6, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_20 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_20 : _upTo_20) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition notEqual(");
        String _Field_TN_tn_3 = this.Field_TN_tn((degree_20).intValue());
        _builder.append(_Field_TN_tn_3, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.NOT_EQUALS, ");
        String _tn_7 = this.tn((degree_20).intValue());
        _builder.append(_tn_7, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_21 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_21 : _upTo_21) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition ne(Row");
        CharSequence _typeSuffix_5 = this.typeSuffix((degree_21).intValue());
        _builder.append(_typeSuffix_5, "    ");
        _builder.append(" row) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return notEqual(row);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_22 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_22 : _upTo_22) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition ne(Record");
        CharSequence _recTypeSuffix_4 = this.recTypeSuffix((degree_22).intValue());
        _builder.append(_recTypeSuffix_4, "    ");
        _builder.append(" record) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return notEqual(record);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_23 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_23 : _upTo_23) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition ne(");
        String _TN_tn_4 = this.TN_tn((degree_23).intValue());
        _builder.append(_TN_tn_4, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return notEqual(");
        String _tn_8 = this.tn((degree_23).intValue());
        _builder.append(_tn_8, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_24 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_24 : _upTo_24) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition ne(");
        String _Field_TN_tn_4 = this.Field_TN_tn((degree_24).intValue());
        _builder.append(_Field_TN_tn_4, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return notEqual(");
        String _tn_9 = this.tn((degree_24).intValue());
        _builder.append(_tn_9, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Ordering comparison predicates");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ------------------------------------------------------------------------");
    _builder.newLine();
    {
      IntegerRange _upTo_25 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_25 : _upTo_25) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition lessThan(Row");
        CharSequence _typeSuffix_6 = this.typeSuffix((degree_25).intValue());
        _builder.append(_typeSuffix_6, "    ");
        _builder.append(" row) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.LESS, row);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_26 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_26 : _upTo_26) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition lessThan(Record");
        CharSequence _recTypeSuffix_5 = this.recTypeSuffix((degree_26).intValue());
        _builder.append(_recTypeSuffix_5, "    ");
        _builder.append(" record) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.LESS, record);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_27 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_27 : _upTo_27) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition lessThan(");
        String _TN_tn_5 = this.TN_tn((degree_27).intValue());
        _builder.append(_TN_tn_5, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.LESS, ");
        String _tn_10 = this.tn((degree_27).intValue());
        _builder.append(_tn_10, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_28 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_28 : _upTo_28) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition lessThan(");
        String _Field_TN_tn_5 = this.Field_TN_tn((degree_28).intValue());
        _builder.append(_Field_TN_tn_5, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.LESS, ");
        String _tn_11 = this.tn((degree_28).intValue());
        _builder.append(_tn_11, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_29 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_29 : _upTo_29) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition lt(Row");
        CharSequence _typeSuffix_7 = this.typeSuffix((degree_29).intValue());
        _builder.append(_typeSuffix_7, "    ");
        _builder.append(" row) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return lessThan(row);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_30 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_30 : _upTo_30) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition lt(Record");
        CharSequence _recTypeSuffix_6 = this.recTypeSuffix((degree_30).intValue());
        _builder.append(_recTypeSuffix_6, "    ");
        _builder.append(" record) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return lessThan(record);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_31 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_31 : _upTo_31) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition lt(");
        String _TN_tn_6 = this.TN_tn((degree_31).intValue());
        _builder.append(_TN_tn_6, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return lessThan(");
        String _tn_12 = this.tn((degree_31).intValue());
        _builder.append(_tn_12, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_32 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_32 : _upTo_32) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition lt(");
        String _Field_TN_tn_6 = this.Field_TN_tn((degree_32).intValue());
        _builder.append(_Field_TN_tn_6, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return lessThan(");
        String _tn_13 = this.tn((degree_32).intValue());
        _builder.append(_tn_13, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_33 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_33 : _upTo_33) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition lessOrEqual(Row");
        CharSequence _typeSuffix_8 = this.typeSuffix((degree_33).intValue());
        _builder.append(_typeSuffix_8, "    ");
        _builder.append(" row) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.LESS_OR_EQUAL, row);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_34 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_34 : _upTo_34) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition lessOrEqual(Record");
        CharSequence _recTypeSuffix_7 = this.recTypeSuffix((degree_34).intValue());
        _builder.append(_recTypeSuffix_7, "    ");
        _builder.append(" record) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.LESS_OR_EQUAL, record);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_35 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_35 : _upTo_35) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition lessOrEqual(");
        String _TN_tn_7 = this.TN_tn((degree_35).intValue());
        _builder.append(_TN_tn_7, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.LESS_OR_EQUAL, ");
        String _tn_14 = this.tn((degree_35).intValue());
        _builder.append(_tn_14, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_36 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_36 : _upTo_36) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition lessOrEqual(");
        String _Field_TN_tn_7 = this.Field_TN_tn((degree_36).intValue());
        _builder.append(_Field_TN_tn_7, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.LESS_OR_EQUAL, ");
        String _tn_15 = this.tn((degree_36).intValue());
        _builder.append(_tn_15, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_37 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_37 : _upTo_37) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition le(Row");
        CharSequence _typeSuffix_9 = this.typeSuffix((degree_37).intValue());
        _builder.append(_typeSuffix_9, "    ");
        _builder.append(" row) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return lessOrEqual(row);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_38 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_38 : _upTo_38) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition le(Record");
        CharSequence _recTypeSuffix_8 = this.recTypeSuffix((degree_38).intValue());
        _builder.append(_recTypeSuffix_8, "    ");
        _builder.append(" record) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return lessOrEqual(record);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_39 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_39 : _upTo_39) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition le(");
        String _TN_tn_8 = this.TN_tn((degree_39).intValue());
        _builder.append(_TN_tn_8, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return lessOrEqual(");
        String _tn_16 = this.tn((degree_39).intValue());
        _builder.append(_tn_16, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_40 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_40 : _upTo_40) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition le(");
        String _Field_TN_tn_8 = this.Field_TN_tn((degree_40).intValue());
        _builder.append(_Field_TN_tn_8, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return lessOrEqual(");
        String _tn_17 = this.tn((degree_40).intValue());
        _builder.append(_tn_17, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_41 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_41 : _upTo_41) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition greaterThan(Row");
        CharSequence _typeSuffix_10 = this.typeSuffix((degree_41).intValue());
        _builder.append(_typeSuffix_10, "    ");
        _builder.append(" row) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.GREATER, row);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_42 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_42 : _upTo_42) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition greaterThan(Record");
        CharSequence _recTypeSuffix_9 = this.recTypeSuffix((degree_42).intValue());
        _builder.append(_recTypeSuffix_9, "    ");
        _builder.append(" record) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.GREATER, record);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_43 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_43 : _upTo_43) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition greaterThan(");
        String _TN_tn_9 = this.TN_tn((degree_43).intValue());
        _builder.append(_TN_tn_9, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.GREATER, ");
        String _tn_18 = this.tn((degree_43).intValue());
        _builder.append(_tn_18, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_44 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_44 : _upTo_44) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition greaterThan(");
        String _Field_TN_tn_9 = this.Field_TN_tn((degree_44).intValue());
        _builder.append(_Field_TN_tn_9, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.GREATER, ");
        String _tn_19 = this.tn((degree_44).intValue());
        _builder.append(_tn_19, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_45 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_45 : _upTo_45) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition gt(Row");
        CharSequence _typeSuffix_11 = this.typeSuffix((degree_45).intValue());
        _builder.append(_typeSuffix_11, "    ");
        _builder.append(" row) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return greaterThan(row);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_46 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_46 : _upTo_46) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition gt(Record");
        CharSequence _recTypeSuffix_10 = this.recTypeSuffix((degree_46).intValue());
        _builder.append(_recTypeSuffix_10, "    ");
        _builder.append(" record) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return greaterThan(record);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_47 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_47 : _upTo_47) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition gt(");
        String _TN_tn_10 = this.TN_tn((degree_47).intValue());
        _builder.append(_TN_tn_10, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return greaterThan(");
        String _tn_20 = this.tn((degree_47).intValue());
        _builder.append(_tn_20, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_48 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_48 : _upTo_48) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition gt(");
        String _Field_TN_tn_10 = this.Field_TN_tn((degree_48).intValue());
        _builder.append(_Field_TN_tn_10, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return greaterThan(");
        String _tn_21 = this.tn((degree_48).intValue());
        _builder.append(_tn_21, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_49 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_49 : _upTo_49) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition greaterOrEqual(Row");
        CharSequence _typeSuffix_12 = this.typeSuffix((degree_49).intValue());
        _builder.append(_typeSuffix_12, "    ");
        _builder.append(" row) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.GREATER_OR_EQUAL, row);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_50 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_50 : _upTo_50) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition greaterOrEqual(Record");
        CharSequence _recTypeSuffix_11 = this.recTypeSuffix((degree_50).intValue());
        _builder.append(_recTypeSuffix_11, "    ");
        _builder.append(" record) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.GREATER_OR_EQUAL, record);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_51 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_51 : _upTo_51) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition greaterOrEqual(");
        String _TN_tn_11 = this.TN_tn((degree_51).intValue());
        _builder.append(_TN_tn_11, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.GREATER_OR_EQUAL, ");
        String _tn_22 = this.tn((degree_51).intValue());
        _builder.append(_tn_22, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_52 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_52 : _upTo_52) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition greaterOrEqual(");
        String _Field_TN_tn_11 = this.Field_TN_tn((degree_52).intValue());
        _builder.append(_Field_TN_tn_11, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return compare(Comparator.GREATER_OR_EQUAL, ");
        String _tn_23 = this.tn((degree_52).intValue());
        _builder.append(_tn_23, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_53 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_53 : _upTo_53) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition ge(Row");
        CharSequence _typeSuffix_13 = this.typeSuffix((degree_53).intValue());
        _builder.append(_typeSuffix_13, "    ");
        _builder.append(" row) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return greaterOrEqual(row);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_54 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_54 : _upTo_54) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition ge(Record");
        CharSequence _recTypeSuffix_12 = this.recTypeSuffix((degree_54).intValue());
        _builder.append(_recTypeSuffix_12, "    ");
        _builder.append(" record) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return greaterOrEqual(record);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_55 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_55 : _upTo_55) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition ge(");
        String _TN_tn_12 = this.TN_tn((degree_55).intValue());
        _builder.append(_TN_tn_12, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return greaterOrEqual(");
        String _tn_24 = this.tn((degree_55).intValue());
        _builder.append(_tn_24, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_56 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_56 : _upTo_56) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition ge(");
        String _Field_TN_tn_12 = this.Field_TN_tn((degree_56).intValue());
        _builder.append(_Field_TN_tn_12, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return greaterOrEqual(");
        String _tn_25 = this.tn((degree_56).intValue());
        _builder.append(_tn_25, "        ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// [NOT] BETWEEN predicates");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ------------------------------------------------------------------------");
    _builder.newLine();
    {
      ArrayList<String> _newArrayList = CollectionLiterals.<String>newArrayList("between", "betweenSymmetric", "notBetween", "notBetweenSymmetric");
      for(final String keyword : _newArrayList) {
        {
          IntegerRange _upTo_57 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
          for(final Integer degree_57 : _upTo_57) {
            _builder.newLine();
            _builder.append("    ");
            _builder.append("@Override");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("public final BetweenAndStep");
            CharSequence _typeSuffix_14 = this.typeSuffix((degree_57).intValue());
            _builder.append(_typeSuffix_14, "    ");
            _builder.append(" ");
            _builder.append(keyword, "    ");
            _builder.append("(");
            String _TN_tn_13 = this.TN_tn((degree_57).intValue());
            _builder.append(_TN_tn_13, "    ");
            _builder.append(") {");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("    ");
            _builder.append("return ");
            _builder.append(keyword, "        ");
            _builder.append("(row(");
            String _tn_26 = this.tn((degree_57).intValue());
            _builder.append(_tn_26, "        ");
            _builder.append("));");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("}");
            _builder.newLine();
          }
        }
        {
          IntegerRange _upTo_58 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
          for(final Integer degree_58 : _upTo_58) {
            _builder.newLine();
            _builder.append("    ");
            _builder.append("@Override");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("public final BetweenAndStep");
            CharSequence _typeSuffix_15 = this.typeSuffix((degree_58).intValue());
            _builder.append(_typeSuffix_15, "    ");
            _builder.append(" ");
            _builder.append(keyword, "    ");
            _builder.append("(");
            String _Field_TN_tn_13 = this.Field_TN_tn((degree_58).intValue());
            _builder.append(_Field_TN_tn_13, "    ");
            _builder.append(") {");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("    ");
            _builder.append("return ");
            _builder.append(keyword, "        ");
            _builder.append("(row(");
            String _tn_27 = this.tn((degree_58).intValue());
            _builder.append(_tn_27, "        ");
            _builder.append("));");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("}");
            _builder.newLine();
          }
        }
        {
          IntegerRange _upTo_59 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
          for(final Integer degree_59 : _upTo_59) {
            _builder.newLine();
            _builder.append("    ");
            _builder.append("@Override");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("public final BetweenAndStep");
            CharSequence _typeSuffix_16 = this.typeSuffix((degree_59).intValue());
            _builder.append(_typeSuffix_16, "    ");
            _builder.append(" ");
            _builder.append(keyword, "    ");
            _builder.append("(Row");
            CharSequence _typeSuffix_17 = this.typeSuffix((degree_59).intValue());
            _builder.append(_typeSuffix_17, "    ");
            _builder.append(" row) {");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("    ");
            _builder.append("return new RowBetweenCondition(this, row, ");
            boolean _startsWith = keyword.startsWith("not");
            _builder.append(_startsWith, "        ");
            _builder.append(", ");
            boolean _endsWith = keyword.endsWith("Symmetric");
            _builder.append(_endsWith, "        ");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("}");
            _builder.newLine();
          }
        }
        {
          IntegerRange _upTo_60 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
          for(final Integer degree_60 : _upTo_60) {
            _builder.newLine();
            _builder.append("    ");
            _builder.append("@Override");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("public final BetweenAndStep");
            CharSequence _typeSuffix_18 = this.typeSuffix((degree_60).intValue());
            _builder.append(_typeSuffix_18, "    ");
            _builder.append(" ");
            _builder.append(keyword, "    ");
            _builder.append("(Record");
            CharSequence _recTypeSuffix_13 = this.recTypeSuffix((degree_60).intValue());
            _builder.append(_recTypeSuffix_13, "    ");
            _builder.append(" record) {");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("    ");
            _builder.append("return ");
            _builder.append(keyword, "        ");
            _builder.append("(record.valuesRow());");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("}");
            _builder.newLine();
          }
        }
        {
          IntegerRange _upTo_61 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
          for(final Integer degree_61 : _upTo_61) {
            _builder.newLine();
            _builder.append("    ");
            _builder.append("@Override");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("public final Condition ");
            _builder.append(keyword, "    ");
            _builder.append("(Row");
            CharSequence _typeSuffix_19 = this.typeSuffix((degree_61).intValue());
            _builder.append(_typeSuffix_19, "    ");
            _builder.append(" minValue, Row");
            CharSequence _typeSuffix_20 = this.typeSuffix((degree_61).intValue());
            _builder.append(_typeSuffix_20, "    ");
            _builder.append(" maxValue) {");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("    ");
            _builder.append("return ");
            _builder.append(keyword, "        ");
            _builder.append("(minValue).and(maxValue);");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("}");
            _builder.newLine();
          }
        }
        {
          IntegerRange _upTo_62 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
          for(final Integer degree_62 : _upTo_62) {
            _builder.newLine();
            _builder.append("    ");
            _builder.append("@Override");
            _builder.newLine();
            _builder.append("    ");
            _builder.append("public final Condition ");
            _builder.append(keyword, "    ");
            _builder.append("(Record");
            CharSequence _recTypeSuffix_14 = this.recTypeSuffix((degree_62).intValue());
            _builder.append(_recTypeSuffix_14, "    ");
            _builder.append(" minValue, Record");
            CharSequence _recTypeSuffix_15 = this.recTypeSuffix((degree_62).intValue());
            _builder.append(_recTypeSuffix_15, "    ");
            _builder.append(" maxValue) {");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("    ");
            _builder.append("return ");
            _builder.append(keyword, "        ");
            _builder.append("(minValue).and(maxValue);");
            _builder.newLineIfNotEmpty();
            _builder.append("    ");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// [NOT] DISTINCT predicates");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ------------------------------------------------------------------------");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// [NOT] IN predicates");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ------------------------------------------------------------------------");
    _builder.newLine();
    {
      IntegerRange _upTo_63 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_63 : _upTo_63) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition in(Row");
        CharSequence _typeSuffix_21 = this.typeSuffix((degree_63).intValue());
        _builder.append(_typeSuffix_21, "    ");
        _builder.append("... rows) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return in(Arrays.asList(rows));");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_64 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_64 : _upTo_64) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition in(Record");
        CharSequence _recTypeSuffix_16 = this.recTypeSuffix((degree_64).intValue());
        _builder.append(_recTypeSuffix_16, "    ");
        _builder.append("... records) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("Row");
        CharSequence _typeSuffix_22 = this.typeSuffix((degree_64).intValue());
        _builder.append(_typeSuffix_22, "        ");
        _builder.append("[] rows = new Row");
        CharSequence _typeSuffixRaw_2 = this.typeSuffixRaw((degree_64).intValue());
        _builder.append(_typeSuffixRaw_2, "        ");
        _builder.append("[records.length];");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("for (int i = 0; i < records.length; i++) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("rows[i] = ");
        {
          if (((degree_64).intValue() == 0)) {
            _builder.append("(RowN) ");
          }
        }
        _builder.append("records[i].valuesRow();");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return in(rows);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_65 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_65 : _upTo_65) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition notIn(Row");
        CharSequence _typeSuffix_23 = this.typeSuffix((degree_65).intValue());
        _builder.append(_typeSuffix_23, "    ");
        _builder.append("... rows) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return notIn(Arrays.asList(rows));");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      IntegerRange _upTo_66 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_66 : _upTo_66) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final Condition notIn(Record");
        CharSequence _recTypeSuffix_17 = this.recTypeSuffix((degree_66).intValue());
        _builder.append(_recTypeSuffix_17, "    ");
        _builder.append("... records) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("Row");
        CharSequence _typeSuffix_24 = this.typeSuffix((degree_66).intValue());
        _builder.append(_typeSuffix_24, "        ");
        _builder.append("[] rows = new Row");
        CharSequence _typeSuffixRaw_3 = this.typeSuffixRaw((degree_66).intValue());
        _builder.append(_typeSuffixRaw_3, "        ");
        _builder.append("[records.length];");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("for (int i = 0; i < records.length; i++) {");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("        ");
        _builder.append("rows[i] = ");
        {
          if (((degree_66).intValue() == 0)) {
            _builder.append("(RowN) ");
          }
        }
        _builder.append("records[i].valuesRow();");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return notIn(rows);");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition in(Collection rows) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("QueryPartList<Row> list = new QueryPartList<Row>(rows);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new RowInCondition(this, list, Comparator.IN);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition in(Result result) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("QueryPartList<Row> list = new QueryPartList<Row>(Utils.rows(result));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new RowInCondition(this, list, Comparator.IN);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition notIn(Collection rows) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("QueryPartList<Row> list = new QueryPartList<Row>(rows);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new RowInCondition(this, list, Comparator.NOT_IN);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition notIn(Result result) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("QueryPartList<Row> list = new QueryPartList<Row>(Utils.rows(result));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new RowInCondition(this, list, Comparator.NOT_IN);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Predicates involving subqueries");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ------------------------------------------------------------------------");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition equal(Select select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return compare(Comparator.EQUALS, select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition equal(QuantifiedSelect select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return compare(Comparator.EQUALS, select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition eq(Select select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return equal(select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition eq(QuantifiedSelect select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return equal(select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition notEqual(Select select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return compare(Comparator.NOT_EQUALS, select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition notEqual(QuantifiedSelect select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return compare(Comparator.NOT_EQUALS, select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition ne(Select select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return notEqual(select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition ne(QuantifiedSelect select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return notEqual(select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition greaterThan(Select select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return compare(Comparator.GREATER, select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition greaterThan(QuantifiedSelect select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return compare(Comparator.GREATER, select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition gt(Select select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return greaterThan(select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition gt(QuantifiedSelect select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return greaterThan(select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition greaterOrEqual(Select select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return compare(Comparator.GREATER_OR_EQUAL, select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition greaterOrEqual(QuantifiedSelect select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return compare(Comparator.GREATER_OR_EQUAL, select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition ge(Select select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return greaterOrEqual(select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition ge(QuantifiedSelect select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return greaterOrEqual(select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition lessThan(Select select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return compare(Comparator.LESS, select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition lessThan(QuantifiedSelect select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return compare(Comparator.LESS, select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition lt(Select select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return lessThan(select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition lt(QuantifiedSelect select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return lessThan(select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition lessOrEqual(Select select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return compare(Comparator.LESS_OR_EQUAL, select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition lessOrEqual(QuantifiedSelect select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return compare(Comparator.LESS_OR_EQUAL, select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition le(Select select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return lessOrEqual(select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition le(QuantifiedSelect select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return lessOrEqual(select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition in(Select select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return compare(Comparator.IN, select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition notIn(Select select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return compare(Comparator.NOT_IN, select);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// XXX: Row2 API");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// ------------------------------------------------------------------------");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition overlaps(T1 t1, T2 t2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return overlaps(row(t1, t2));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition overlaps(Field<T1> t1, Field<T2> t2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return overlaps(row(t1, t2));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Condition overlaps(Row2<T1, T2> row) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new RowOverlapsCondition(this, row);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    out.append(_builder);
    this.write("org.jooq.impl.RowImpl", out);
  }
}
