/**
 * Copyright (c) 2009-2015, Data Geekery GmbH (http://www.datageekery.com)
 * All rights reserved.
 * 
 * This work is dual-licensed
 * - under the Apache Software License 2.0 (the "ASL")
 * - under the jOOQ License and Maintenance Agreement (the "jOOQ License")
 * =============================================================================
 * You may choose which license applies to you:
 * 
 * - If you're using this work with Open Source databases, you may choose
 *   either ASL or jOOQ License.
 * - If you're using this work with at least one commercial database, you must
 *   choose jOOQ License
 * 
 * For more information, please visit http://www.jooq.org/licenses
 * 
 * Apache Software License 2.0:
 * -----------------------------------------------------------------------------
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *  http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * jOOQ License and Maintenance Agreement:
 * -----------------------------------------------------------------------------
 * Data Geekery grants the Customer the non-exclusive, timely limited and
 * non-transferable license to install and use the Software under the terms of
 * the jOOQ License and Maintenance Agreement.
 * 
 * This library is distributed with a LIMITED WARRANTY. See the jOOQ License
 * and Maintenance Agreement for more details: http://www.jooq.org/licensing
 */
package org.jooq.xtend;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.jooq.Constants;
import org.jooq.xtend.Generators;

@SuppressWarnings("all")
public class InsertDSL extends Generators {
  public static void main(final String[] args) {
    final InsertDSL insert = new InsertDSL();
    insert.generateInsertSetStep();
    insert.generateInsertValuesStep();
    insert.generateInsertImpl();
  }
  
  public void generateInsertSetStep() {
    final StringBuilder out = new StringBuilder();
    IntegerRange _upTo = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
    for (final Integer degree : _upTo) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("* Set the columns for insert.");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("    ");
      CharSequence _generatedAnnotation = this.generatedAnnotation();
      _builder.append(_generatedAnnotation, "    ");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("@Support");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<");
      String _TN = this.TN((degree).intValue());
      _builder.append(_TN, "    ");
      _builder.append("> InsertValuesStep");
      _builder.append(degree, "    ");
      _builder.append("<R, ");
      String _TN_1 = this.TN((degree).intValue());
      _builder.append(_TN_1, "    ");
      _builder.append("> columns(");
      String _Field_TN_fieldn = this.Field_TN_fieldn((degree).intValue());
      _builder.append(_Field_TN_fieldn, "    ");
      _builder.append(");");
      _builder.newLineIfNotEmpty();
      out.append(_builder);
    }
    this.insert("org.jooq.InsertSetStep", out, "columns");
  }
  
  public void generateInsertValuesStep() {
    IntegerRange _upTo = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
    for (final Integer degree : _upTo) {
      {
        final StringBuilder out = new StringBuilder();
        StringConcatenation _builder = new StringConcatenation();
        CharSequence _classHeader = this.classHeader();
        _builder.append(_classHeader, "");
        _builder.newLineIfNotEmpty();
        _builder.append("package org.jooq;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("import java.util.Collection;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("import javax.annotation.Generated;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("/**");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* This type is used for the {@link Insert}\'s DSL API.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* Example: <code><pre>");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* using(configuration)");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*       .insertInto(table, ");
        String _field1_field2_fieldn = this.field1_field2_fieldn((degree).intValue());
        _builder.append(_field1_field2_fieldn, " ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append(" ");
        _builder.append("*       .values(");
        String _XXX1_XXX2_XXXn = this.XXX1_XXX2_XXXn((degree).intValue(), "valueA");
        _builder.append(_XXX1_XXX2_XXXn, " ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append(" ");
        _builder.append("*       .values(");
        String _XXX1_XXX2_XXXn_1 = this.XXX1_XXX2_XXXn((degree).intValue(), "valueB");
        _builder.append(_XXX1_XXX2_XXXn_1, " ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append(" ");
        _builder.append("*       .onDuplicateKeyUpdate()");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*       .set(field1, value1)");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*       .set(field2, value2)");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*       .execute();");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* </pre></code>");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* @author Lukas Eder");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        CharSequence _generatedAnnotation = this.generatedAnnotation();
        _builder.append(_generatedAnnotation, "");
        _builder.newLineIfNotEmpty();
        _builder.append("public interface InsertValuesStep");
        _builder.append(degree, "");
        _builder.append("<R extends Record, ");
        String _TN = this.TN((degree).intValue());
        _builder.append(_TN, "");
        _builder.append("> extends InsertOnDuplicateStep<R> {");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Add values to the insert statement.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("InsertValuesStep");
        _builder.append(degree, "    ");
        _builder.append("<R, ");
        String _TN_1 = this.TN((degree).intValue());
        _builder.append(_TN_1, "    ");
        _builder.append("> values(");
        String _TN_XXXn = this.TN_XXXn((degree).intValue(), "value");
        _builder.append(_TN_XXXn, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Add values to the insert statement.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("InsertValuesStep");
        _builder.append(degree, "    ");
        _builder.append("<R, ");
        String _TN_2 = this.TN((degree).intValue());
        _builder.append(_TN_2, "    ");
        _builder.append("> values(");
        String _Field_TN_XXXn = this.Field_TN_XXXn((degree).intValue(), "value");
        _builder.append(_Field_TN_XXXn, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Add values to the insert statement.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("InsertValuesStep");
        _builder.append(degree, "    ");
        _builder.append("<R, ");
        String _TN_3 = this.TN((degree).intValue());
        _builder.append(_TN_3, "    ");
        _builder.append("> values(Collection<?> values);");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Use a <code>SELECT</code> statement as the source of values for the");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>INSERT</code> statement");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* This variant of the <code>INSERT .. SELECT</code> statement expects a");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* select returning exactly as many fields as specified previously in the");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>INTO</code> clause:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* {@link DSLContext#insertInto(Table, ");
        IntegerRange _upTo_1 = new IntegerRange(1, (degree).intValue());
        final Function1<Integer, CharSequence> _function = (Integer e) -> {
          return "Field";
        };
        String _join = IterableExtensions.<Integer>join(_upTo_1, ", ", _function);
        _builder.append(_join, "     ");
        _builder.append(")}");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("InsertReturningStep<R> select(Select<? extends Record");
        _builder.append(degree, "    ");
        _builder.append("<");
        String _TN_4 = this.TN((degree).intValue());
        _builder.append(_TN_4, "    ");
        _builder.append(">> select);");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
        out.append(_builder);
        this.write(("org.jooq.InsertValuesStep" + degree), out);
      }
    }
  }
  
  public void generateInsertImpl() {
    final StringBuilder out = new StringBuilder();
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _classHeader = this.classHeader();
    _builder.append(_classHeader, "");
    _builder.newLineIfNotEmpty();
    _builder.append("package org.jooq.impl;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.Arrays;");
    _builder.newLine();
    _builder.append("import java.util.Collection;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.append("import java.util.Optional;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.annotation.Generated;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.jooq.AttachableInternal;");
    _builder.newLine();
    _builder.append("import org.jooq.Configuration;");
    _builder.newLine();
    _builder.append("import org.jooq.Field;");
    _builder.newLine();
    _builder.append("import org.jooq.FieldLike;");
    _builder.newLine();
    _builder.append("import org.jooq.Insert;");
    _builder.newLine();
    _builder.append("import org.jooq.InsertOnDuplicateSetMoreStep;");
    _builder.newLine();
    _builder.append("import org.jooq.InsertQuery;");
    _builder.newLine();
    _builder.append("import org.jooq.InsertResultStep;");
    _builder.newLine();
    _builder.append("import org.jooq.InsertSetMoreStep;");
    _builder.newLine();
    _builder.append("import org.jooq.InsertSetStep;");
    _builder.newLine();
    {
      IntegerRange _upTo = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
      for(final Integer degree : _upTo) {
        _builder.append("import org.jooq.InsertValuesStep");
        _builder.append(degree, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("import org.jooq.InsertValuesStepN;");
    _builder.newLine();
    _builder.append("import org.jooq.Record;");
    _builder.newLine();
    _builder.append("import org.jooq.Record1;");
    _builder.newLine();
    _builder.append("import org.jooq.Result;");
    _builder.newLine();
    _builder.append("import org.jooq.Select;");
    _builder.newLine();
    _builder.append("import org.jooq.Table;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author Lukas Eder");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@SuppressWarnings({ \"rawtypes\", \"unchecked\" })");
    _builder.newLine();
    CharSequence _generatedAnnotation = this.generatedAnnotation();
    _builder.append(_generatedAnnotation, "");
    _builder.newLineIfNotEmpty();
    _builder.append("class InsertImpl<R extends Record, ");
    String _TN = this.TN(Constants.MAX_ROW_DEGREE);
    _builder.append(_TN, "");
    _builder.append(">");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("extends AbstractDelegatingQuery<InsertQuery<R>>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("implements");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Cascading interface implementations for Insert behaviour");
    _builder.newLine();
    {
      IntegerRange _upTo_1 = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_1 : _upTo_1) {
        _builder.append("    ");
        _builder.append("InsertValuesStep");
        _builder.append(degree_1, "    ");
        _builder.append("<R, ");
        String _TN_1 = this.TN((degree_1).intValue());
        _builder.append(_TN_1, "    ");
        _builder.append(">,");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.append("InsertValuesStepN<R>,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("InsertSetStep<R>,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("InsertSetMoreStep<R>,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("InsertOnDuplicateSetMoreStep<R>,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("InsertResultStep<R> {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Generated UID");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final long serialVersionUID = 4222898879771679107L;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private final Table<R>    into;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Field<?>[]        fields;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private boolean           onDuplicateKeyUpdate;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("InsertImpl(Configuration configuration, Table<R> into, Collection<? extends Field<?>> fields) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(new InsertQueryImpl<R>(configuration, into));");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.into = into;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("columns(fields);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.fields = (fields == null || fields.size() == 0)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("? into.fields()");
    _builder.newLine();
    _builder.append("            ");
    _builder.append(": fields.toArray(new Field[fields.size()]);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// -------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// The DSL API");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// -------------------------------------------------------------------------");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final InsertImpl select(Select select) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getDelegate().setSelect(select);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    {
      IntegerRange _upTo_2 = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_2 : _upTo_2) {
        _builder.append("    ");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final InsertImpl values(");
        String _TN_XXXn = this.TN_XXXn((degree_2).intValue(), "value");
        _builder.append(_TN_XXXn, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return values(new Object[] { ");
        String _XXXn = this.XXXn((degree_2).intValue(), "value");
        _builder.append(_XXXn, "        ");
        _builder.append(" });");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final InsertImpl values(Object... values) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (fields.length != values.length) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new IllegalArgumentException(\"The number of values must match the number of fields\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getDelegate().newRecord();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (int i = 0; i < fields.length; i++) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("addValue(getDelegate(), fields[i], values[i]);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final InsertImpl values(Collection<?> values) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return values(values.toArray());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private <T> void addValue(InsertQuery<R> delegate, Field<T> field, Object object) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// [#1343] Only convert non-jOOQ objects");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (object instanceof Field) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("delegate.addValue(field, (Field<T>) object);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("else if (object instanceof FieldLike) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("delegate.addValue(field, ((FieldLike) object).<T>asField());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("delegate.addValue(field, field.getDataType().convert(object));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    {
      IntegerRange _upTo_3 = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_3 : _upTo_3) {
        _builder.append("    ");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final InsertImpl values(");
        String _Field_TN_XXXn = this.Field_TN_XXXn((degree_3).intValue(), "value");
        _builder.append(_Field_TN_XXXn, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return values(new Field[] { ");
        String _XXXn_1 = this.XXXn((degree_3).intValue(), "value");
        _builder.append(_XXXn_1, "        ");
        _builder.append(" });");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final InsertImpl values(Field<?>... values) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("List<Field<?>> values1 = Arrays.asList(values);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (fields.length != values1.size()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new IllegalArgumentException(\"The number of values must match the number of fields\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getDelegate().newRecord();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (int i = 0; i < fields.length; i++) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// javac has trouble when inferring Object for T. Use Void instead");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("getDelegate().addValue((Field<Void>) fields[i], (Field<Void>) values1.get(i));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    {
      IntegerRange _upTo_4 = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_4 : _upTo_4) {
        _builder.append("    ");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("@SuppressWarnings(\"hiding\")");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public final <");
        String _TN_2 = this.TN((degree_4).intValue());
        _builder.append(_TN_2, "    ");
        _builder.append("> InsertImpl columns(");
        String _Field_TN_fieldn = this.Field_TN_fieldn((degree_4).intValue());
        _builder.append(_Field_TN_fieldn, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("return columns(new Field[] { ");
        String _fieldn = this.fieldn((degree_4).intValue());
        _builder.append(_fieldn, "        ");
        _builder.append(" });");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final InsertImpl columns(Field<?>... f) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.fields = (f == null || f.length == 0) ? into.fields() : f;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final InsertImpl columns(Collection<? extends Field<?>> f) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return columns(f.toArray(new Field[f.size()]));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Add an empty record with default values.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final InsertImpl defaultValues() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getDelegate().setDefaultValues();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final InsertImpl onDuplicateKeyUpdate() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("onDuplicateKeyUpdate = true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getDelegate().onDuplicateKeyUpdate(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final InsertImpl onDuplicateKeyIgnore() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getDelegate().onDuplicateKeyIgnore(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final <T> InsertImpl set(Field<T> field, T value) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (onDuplicateKeyUpdate) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("getDelegate().addValueForUpdate(field, value);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("getDelegate().addValue(field, value);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final <T> InsertImpl set(Field<T> field, Field<T> value) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (onDuplicateKeyUpdate) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("getDelegate().addValueForUpdate(field, value);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("getDelegate().addValue(field, value);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final <T> InsertImpl set(Field<T> field, Select<? extends Record1<T>> value) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return set(field, value.<T>asField());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final InsertImpl set(Map<? extends Field<?>, ?> map) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (onDuplicateKeyUpdate) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("getDelegate().addValuesForUpdate(map);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("getDelegate().addValues(map);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final InsertImpl set(Record record) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return set(Utils.mapOfChangedValues(record));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final InsertImpl newRecord() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getDelegate().newRecord();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final InsertImpl returning() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getDelegate().setReturning();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final InsertImpl returning(Field<?>... f) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getDelegate().setReturning(f);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final InsertImpl returning(Collection<? extends Field<?>> f) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getDelegate().setReturning(f);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Result<R> fetch() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getDelegate().execute();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return getDelegate().getReturnedRecords();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final R fetchOne() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getDelegate().execute();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return getDelegate().getReturnedRecord();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/* [java-8] */");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final Optional<R> fetchOptional() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Optional.ofNullable(fetchOne());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/* [/java-8] */");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    out.append(_builder);
    this.write("org.jooq.impl.InsertImpl", out);
  }
}
