/**
 * Copyright (c) 2009-2015, Data Geekery GmbH (http://www.datageekery.com)
 * All rights reserved.
 * 
 * This work is dual-licensed
 * - under the Apache Software License 2.0 (the "ASL")
 * - under the jOOQ License and Maintenance Agreement (the "jOOQ License")
 * =============================================================================
 * You may choose which license applies to you:
 * 
 * - If you're using this work with Open Source databases, you may choose
 *   either ASL or jOOQ License.
 * - If you're using this work with at least one commercial database, you must
 *   choose jOOQ License
 * 
 * For more information, please visit http://www.jooq.org/licenses
 * 
 * Apache Software License 2.0:
 * -----------------------------------------------------------------------------
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *  http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * jOOQ License and Maintenance Agreement:
 * -----------------------------------------------------------------------------
 * Data Geekery grants the Customer the non-exclusive, timely limited and
 * non-transferable license to install and use the Software under the terms of
 * the jOOQ License and Maintenance Agreement.
 * 
 * This library is distributed with a LIMITED WARRANTY. See the jOOQ License
 * and Maintenance Agreement for more details: http://www.jooq.org/licensing
 */
package org.jooq.xtend;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.jooq.Constants;
import org.jooq.xtend.Generators;

/**
 * @author Lukas Eder
 */
@SuppressWarnings("all")
public class SelectSeekStep extends Generators {
  public static void main(final String[] args) {
    final SelectSeekStep steps = new SelectSeekStep();
    steps.generateSelectImplImplementsSelectSeekStep();
    steps.generateSelectImplOrderByFieldArray();
    steps.generateSelectImplOrderBySortFieldArray();
    steps.generateSelectImplSeek();
    steps.generateOrderByFieldArray();
    steps.generateOrderBySortFieldArray();
    steps.generateSelectSeekSteps();
  }
  
  public void generateSelectImplImplementsSelectSeekStep() {
    final StringBuilder out = new StringBuilder();
    IntegerRange _upTo = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
    for (final Integer degree : _upTo) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("    ");
      _builder.append("SelectSeekStep");
      _builder.append(degree, "    ");
      _builder.append("<R, ");
      String _TN = this.TN((degree).intValue());
      _builder.append(_TN, "    ");
      _builder.append(">,");
      _builder.newLineIfNotEmpty();
      out.append(_builder);
    }
    this.insert("org.jooq.impl.SelectImpl", out, "implements-select-seek-step");
  }
  
  public void generateSelectImplOrderByFieldArray() {
    final StringBuilder out = new StringBuilder();
    IntegerRange _upTo = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
    for (final Integer degree : _upTo) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("    ");
      CharSequence _generatedMethod = this.generatedMethod();
      _builder.append(_generatedMethod, "    ");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("public final SelectSeekStep");
      _builder.append(degree, "    ");
      _builder.append(" orderBy(");
      String _Field_tn = this.Field_tn((degree).intValue());
      _builder.append(_Field_tn, "    ");
      _builder.append(") {");
      _builder.newLineIfNotEmpty();
      _builder.append("        ");
      _builder.append("return orderBy(new Field[] { ");
      String _tn = this.tn((degree).intValue());
      _builder.append(_tn, "        ");
      _builder.append(" });");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      out.append(_builder);
    }
    this.insert("org.jooq.impl.SelectImpl", out, "order-by-field-array");
  }
  
  public void generateSelectImplOrderBySortFieldArray() {
    final StringBuilder out = new StringBuilder();
    IntegerRange _upTo = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
    for (final Integer degree : _upTo) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("    ");
      CharSequence _generatedMethod = this.generatedMethod();
      _builder.append(_generatedMethod, "    ");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("public final SelectSeekStep");
      _builder.append(degree, "    ");
      _builder.append(" orderBy(");
      String _SortField_tn = this.SortField_tn((degree).intValue());
      _builder.append(_SortField_tn, "    ");
      _builder.append(") {");
      _builder.newLineIfNotEmpty();
      _builder.append("        ");
      _builder.append("return orderBy(new SortField[] { ");
      String _tn = this.tn((degree).intValue());
      _builder.append(_tn, "        ");
      _builder.append(" });");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      out.append(_builder);
    }
    this.insert("org.jooq.impl.SelectImpl", out, "order-by-sortfield-array");
  }
  
  public void generateSelectImplSeek() {
    final StringBuilder out = new StringBuilder();
    IntegerRange _upTo = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
    for (final Integer degree : _upTo) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("    ");
      CharSequence _generatedMethod = this.generatedMethod();
      _builder.append(_generatedMethod, "    ");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("public final SelectSeekLimitStep<R> seek(");
      String _Object_tn = this.Object_tn((degree).intValue());
      _builder.append(_Object_tn, "    ");
      _builder.append(") {");
      _builder.newLineIfNotEmpty();
      _builder.append("        ");
      _builder.append("return seek(new Object[] { ");
      String _tn = this.tn((degree).intValue());
      _builder.append(_tn, "        ");
      _builder.append(" });");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("    ");
      CharSequence _generatedMethod_1 = this.generatedMethod();
      _builder.append(_generatedMethod_1, "    ");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("public final SelectSeekLimitStep<R> seekBefore(");
      String _Object_tn_1 = this.Object_tn((degree).intValue());
      _builder.append(_Object_tn_1, "    ");
      _builder.append(") {");
      _builder.newLineIfNotEmpty();
      _builder.append("        ");
      _builder.append("return seekBefore(new Object[] { ");
      String _tn_1 = this.tn((degree).intValue());
      _builder.append(_tn_1, "        ");
      _builder.append(" });");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("    ");
      CharSequence _generatedMethod_2 = this.generatedMethod();
      _builder.append(_generatedMethod_2, "    ");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("public final SelectSeekLimitStep<R> seekAfter(");
      String _Object_tn_2 = this.Object_tn((degree).intValue());
      _builder.append(_Object_tn_2, "    ");
      _builder.append(") {");
      _builder.newLineIfNotEmpty();
      _builder.append("        ");
      _builder.append("return seekAfter(new Object[] { ");
      String _tn_2 = this.tn((degree).intValue());
      _builder.append(_tn_2, "        ");
      _builder.append(" });");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      out.append(_builder);
    }
    IntegerRange _upTo_1 = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
    for (final Integer degree_1 : _upTo_1) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("@Override");
      _builder_1.newLine();
      _builder_1.append("    ");
      CharSequence _generatedMethod_3 = this.generatedMethod();
      _builder_1.append(_generatedMethod_3, "    ");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("    ");
      _builder_1.append("public final SelectSeekLimitStep<R> seek(");
      String _Field_tn = this.Field_tn((degree_1).intValue());
      _builder_1.append(_Field_tn, "    ");
      _builder_1.append(") {");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("        ");
      _builder_1.append("return seek(new Field[] { ");
      String _tn_3 = this.tn((degree_1).intValue());
      _builder_1.append(_tn_3, "        ");
      _builder_1.append(" });");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("@Override");
      _builder_1.newLine();
      _builder_1.append("    ");
      CharSequence _generatedMethod_4 = this.generatedMethod();
      _builder_1.append(_generatedMethod_4, "    ");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("    ");
      _builder_1.append("public final SelectSeekLimitStep<R> seekBefore(");
      String _Field_tn_1 = this.Field_tn((degree_1).intValue());
      _builder_1.append(_Field_tn_1, "    ");
      _builder_1.append(") {");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("        ");
      _builder_1.append("return seekBefore(new Field[] { ");
      String _tn_4 = this.tn((degree_1).intValue());
      _builder_1.append(_tn_4, "        ");
      _builder_1.append(" });");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("@Override");
      _builder_1.newLine();
      _builder_1.append("    ");
      CharSequence _generatedMethod_5 = this.generatedMethod();
      _builder_1.append(_generatedMethod_5, "    ");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("    ");
      _builder_1.append("public final SelectSeekLimitStep<R> seekAfter(");
      String _Field_tn_2 = this.Field_tn((degree_1).intValue());
      _builder_1.append(_Field_tn_2, "    ");
      _builder_1.append(") {");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("        ");
      _builder_1.append("return seekAfter(new Field[] { ");
      String _tn_5 = this.tn((degree_1).intValue());
      _builder_1.append(_tn_5, "        ");
      _builder_1.append(" });");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("    ");
      _builder_1.append("}");
      _builder_1.newLine();
      out.append(_builder_1);
    }
    this.insert("org.jooq.impl.SelectImpl", out, "seek");
  }
  
  public void generateOrderByFieldArray() {
    final StringBuilder out = new StringBuilder();
    IntegerRange _upTo = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
    for (final Integer degree : _upTo) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("* Add an <code>ORDER BY</code> clause to the query.");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("    ");
      CharSequence _generatedMethod = this.generatedMethod();
      _builder.append(_generatedMethod, "    ");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("@Support");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<");
      String _TN = this.TN((degree).intValue());
      _builder.append(_TN, "    ");
      _builder.append("> SelectSeekStep");
      _builder.append(degree, "    ");
      _builder.append("<R, ");
      String _TN_1 = this.TN((degree).intValue());
      _builder.append(_TN_1, "    ");
      _builder.append("> orderBy(");
      String _Field_TN_fieldn = this.Field_TN_fieldn((degree).intValue());
      _builder.append(_Field_TN_fieldn, "    ");
      _builder.append(");");
      _builder.newLineIfNotEmpty();
      out.append(_builder);
    }
    this.insert("org.jooq.SelectOrderByStep", out, "order-by-field-array");
  }
  
  public void generateOrderBySortFieldArray() {
    final StringBuilder out = new StringBuilder();
    IntegerRange _upTo = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
    for (final Integer degree : _upTo) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("* Add an <code>ORDER BY</code> clause to the query.");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("    ");
      CharSequence _generatedMethod = this.generatedMethod();
      _builder.append(_generatedMethod, "    ");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("@Support");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<");
      String _TN = this.TN((degree).intValue());
      _builder.append(_TN, "    ");
      _builder.append("> SelectSeekStep");
      _builder.append(degree, "    ");
      _builder.append("<R, ");
      String _TN_1 = this.TN((degree).intValue());
      _builder.append(_TN_1, "    ");
      _builder.append("> orderBy(");
      String _SortField_TN_fieldn = this.SortField_TN_fieldn((degree).intValue());
      _builder.append(_SortField_TN_fieldn, "    ");
      _builder.append(");");
      _builder.newLineIfNotEmpty();
      out.append(_builder);
    }
    this.insert("org.jooq.SelectOrderByStep", out, "order-by-sortfield-array");
  }
  
  public void generateSelectSeekSteps() {
    IntegerRange _upTo = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
    for (final Integer degree : _upTo) {
      {
        final StringBuilder out = new StringBuilder();
        StringConcatenation _builder = new StringConcatenation();
        CharSequence _classHeader = this.classHeader();
        _builder.append(_classHeader, "");
        _builder.newLineIfNotEmpty();
        _builder.append("package org.jooq;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("import javax.annotation.Generated;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("import org.jooq.Record;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("/**");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* This type is used for the {@link Select}\'s DSL API when selecting generic");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* {@link Record} types.");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* Example: <code><pre>");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* -- get all authors\' first and last names, and the number");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* -- of books they\'ve written in German, if they have written");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* -- more than five books in German in the last three years");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* -- (from 2011), and sort those authors by last names");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* -- limiting results to the second and third row");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*   SELECT T_AUTHOR.FIRST_NAME, T_AUTHOR.LAST_NAME, COUNT(*)");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*     FROM T_AUTHOR");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*     JOIN T_BOOK ON T_AUTHOR.ID = T_BOOK.AUTHOR_ID");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*    WHERE T_BOOK.LANGUAGE = \'DE\'");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*      AND T_BOOK.PUBLISHED > \'2008-01-01\'");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* GROUP BY T_AUTHOR.FIRST_NAME, T_AUTHOR.LAST_NAME");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*   HAVING COUNT(*) > 5");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* ORDER BY T_AUTHOR.LAST_NAME ASC NULLS FIRST");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*    LIMIT 2");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*   OFFSET 1");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*      FOR UPDATE");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*       OF FIRST_NAME, LAST_NAME");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*       NO WAIT");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* </pre></code> Its equivalent in jOOQ <code><pre>");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* create.select(TAuthor.FIRST_NAME, TAuthor.LAST_NAME, create.count())");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*       .from(T_AUTHOR)");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*       .join(T_BOOK).on(TBook.AUTHOR_ID.equal(TAuthor.ID))");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*       .where(TBook.LANGUAGE.equal(\"DE\"))");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*       .and(TBook.PUBLISHED.greaterThan(parseDate(\'2008-01-01\')))");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*       .groupBy(TAuthor.FIRST_NAME, TAuthor.LAST_NAME)");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*       .having(create.count().greaterThan(5))");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*       .orderBy(TAuthor.LAST_NAME.asc().nullsFirst())");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*       .limit(2)");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*       .offset(1)");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*       .forUpdate()");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*       .of(TAuthor.FIRST_NAME, TAuthor.LAST_NAME)");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*       .noWait();");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* </pre></code> Refer to the manual for more details");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* @author Lukas Eder");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        CharSequence _generatedAnnotation = this.generatedAnnotation();
        _builder.append(_generatedAnnotation, "");
        _builder.newLineIfNotEmpty();
        _builder.append("public interface SelectSeekStep");
        _builder.append(degree, "");
        _builder.append("<R extends Record, ");
        String _TN = this.TN((degree).intValue());
        _builder.append(_TN, "");
        _builder.append("> extends SelectLimitStep<R> {");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Add a synthetic <code>SEEK AFTER</code> clause to the query.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The synthetic <code>SEEK AFTER</code> clause is an alternative way to specify");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* an <code>OFFSET</code>, and thus to perform paging in a SQL query. This");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* can be advantageous for two reasons:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <ol>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <li>The SQL generated from the <code>SEEK AFTER</code> clause is a regular");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* predicate, which can be used by query plan optimisers to choose an");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* appropriate index. The SQL standard <code>OFFSET</code> clause will need");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* to skip <code>N</code> rows in memory.</li>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <li>The <code>SEEK AFTER</code> clause is stable with respect to new data being");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* inserted or data being deleted while paging through pages.</li>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </ol>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Example: <code><pre>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* DSL.using(configuration)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .selectFrom(TABLE)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .orderBy(ID, CODE)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .seek(3, \"abc\")");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .fetch();");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </pre></code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The above query will render the following SQL statement:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code><pre>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* SELECT * FROM table");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* WHERE (id, code) > (3, \'abc\')");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* ORDER BY id ASC, code ASC");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </pre></code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The actual row value expression predicate may be expanded into this");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* equivalent predicate:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code><pre>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* WHERE (id > 3) OR (id = 3 AND code > \'abc\')");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </pre></code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The <code>SEEK AFTER</code> method currently does not support seeking");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>NULL</code> values, or operating with <code>NULLS FIRST</code>,");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>NULLS LAST</code> clauses in the <code>ORDER BY</code> clause.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see <a");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*      href=\"http://use-the-index-luke.com/sql/partial-results/fetch-next-page\">http://use-the-index-luke.com/sql/partial-results/fetch-next-page</a>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see <a");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*      href=\"http://blog.jooq.org/2013/10/26/faster-sql-paging-with-jooq-using-the-seek-method/\">http://blog.jooq.org/2013/10/26/faster-sql-paging-with-jooq-using-the-seek-method</a>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #seekAfter(");
        IntegerRange _upTo_1 = new IntegerRange(1, (degree).intValue());
        final Function1<Integer, CharSequence> _function = (Integer e) -> {
          return "Object";
        };
        String _join = IterableExtensions.<Integer>join(_upTo_1, ", ", _function);
        _builder.append(_join, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("SelectSeekLimitStep<R> seek(");
        String _TN_tn = this.TN_tn((degree).intValue());
        _builder.append(_TN_tn, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Add a synthetic <code>SEEK AFTER</code> clause to the query.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The synthetic <code>SEEK AFTER</code> clause is an alternative way to specify");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* an <code>OFFSET</code>, and thus to perform paging in a SQL query. This");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* can be advantageous for two reasons:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <ol>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <li>The SQL generated from the <code>SEEK AFTER</code> clause is a regular");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* predicate, which can be used by query plan optimisers to choose an");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* appropriate index. The SQL standard <code>OFFSET</code> clause will need");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* to skip <code>N</code> rows in memory.</li>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <li>The <code>SEEK AFTER</code> clause is stable with respect to new data being");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* inserted or data being deleted while paging through pages.</li>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </ol>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Example: <code><pre>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* DSL.using(configuration)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .selectFrom(TABLE)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .orderBy(ID, CODE)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .seek(3, \"abc\")");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .fetch();");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </pre></code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The above query will render the following SQL statement:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code><pre>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* SELECT * FROM table");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* WHERE (id, code) > (3, \'abc\')");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* ORDER BY id ASC, code ASC");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </pre></code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The actual row value expression predicate may be expanded into this");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* equivalent predicate:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code><pre>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* WHERE (id > 3) OR (id = 3 AND code > \'abc\')");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </pre></code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The <code>SEEK AFTER</code> method currently does not support seeking");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>NULL</code> values, or operating with <code>NULLS FIRST</code>,");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>NULLS LAST</code> clauses in the <code>ORDER BY</code> clause.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see <a");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*      href=\"http://use-the-index-luke.com/sql/partial-results/fetch-next-page\">http://use-the-index-luke.com/sql/partial-results/fetch-next-page</a>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see <a");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*      href=\"http://blog.jooq.org/2013/10/26/faster-sql-paging-with-jooq-using-the-seek-method/\">http://blog.jooq.org/2013/10/26/faster-sql-paging-with-jooq-using-the-seek-method</a>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #seekAfter(");
        IntegerRange _upTo_2 = new IntegerRange(1, (degree).intValue());
        final Function1<Integer, CharSequence> _function_1 = (Integer e) -> {
          return "Field";
        };
        String _join_1 = IterableExtensions.<Integer>join(_upTo_2, ", ", _function_1);
        _builder.append(_join_1, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("SelectSeekLimitStep<R> seek(");
        String _Field_TN_fieldn = this.Field_TN_fieldn((degree).intValue());
        _builder.append(_Field_TN_fieldn, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Add a synthetic <code>SEEK AFTER</code> clause to the query.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The synthetic <code>SEEK AFTER</code> clause is an alternative way to specify");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* an <code>OFFSET</code>, and thus to perform paging in a SQL query. This");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* can be advantageous for two reasons:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <ol>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <li>The SQL generated from the <code>SEEK AFTER</code> clause is a regular");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* predicate, which can be used by query plan optimisers to choose an");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* appropriate index. The SQL standard <code>OFFSET</code> clause will need");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* to skip <code>N</code> rows in memory.</li>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <li>The <code>SEEK AFTER</code> clause is stable with respect to new data being");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* inserted or data being deleted while paging through pages.</li>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </ol>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Example: <code><pre>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* DSL.using(configuration)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .selectFrom(TABLE)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .orderBy(ID, CODE)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .seekAfter(3, \"abc\")");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .fetch();");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </pre></code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The above query will render the following SQL statement:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code><pre>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* SELECT * FROM table");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* WHERE (id, code) > (3, \'abc\')");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* ORDER BY id ASC, code ASC");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </pre></code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The actual row value expression predicate may be expanded into this");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* equivalent predicate:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code><pre>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* WHERE (id > 3) OR (id = 3 AND code > \'abc\')");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </pre></code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The <code>SEEK AFTER</code> method currently does not support seeking");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>NULL</code> values, or operating with <code>NULLS FIRST</code>,");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>NULLS LAST</code> clauses in the <code>ORDER BY</code> clause.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see <a");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*      href=\"http://use-the-index-luke.com/sql/partial-results/fetch-next-page\">http://use-the-index-luke.com/sql/partial-results/fetch-next-page</a>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see <a");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*      href=\"http://blog.jooq.org/2013/10/26/faster-sql-paging-with-jooq-using-the-seek-method/\">http://blog.jooq.org/2013/10/26/faster-sql-paging-with-jooq-using-the-seek-method</a>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("SelectSeekLimitStep<R> seekAfter(");
        String _TN_tn_1 = this.TN_tn((degree).intValue());
        _builder.append(_TN_tn_1, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Add a synthetic <code>SEEK AFTER</code> clause to the query.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The synthetic <code>SEEK AFTER</code> clause is an alternative way to specify");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* an <code>OFFSET</code>, and thus to perform paging in a SQL query. This");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* can be advantageous for two reasons:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <ol>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <li>The SQL generated from the <code>SEEK AFTER</code> clause is a regular");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* predicate, which can be used by query plan optimisers to choose an");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* appropriate index. The SQL standard <code>OFFSET</code> clause will need");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* to skip <code>N</code> rows in memory.</li>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <li>The <code>SEEK AFTER</code> clause is stable with respect to new data being");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* inserted or data being deleted while paging through pages.</li>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </ol>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Example: <code><pre>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* DSL.using(configuration)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .selectFrom(TABLE)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .orderBy(ID, CODE)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .seekAfter(3, \"abc\")");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .fetch();");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </pre></code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The above query will render the following SQL statement:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code><pre>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* SELECT * FROM table");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* WHERE (id, code) > (3, \'abc\')");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* ORDER BY id ASC, code ASC");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </pre></code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The actual row value expression predicate may be expanded into this");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* equivalent predicate:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code><pre>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* WHERE (id > 3) OR (id = 3 AND code > \'abc\')");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </pre></code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The <code>SEEK AFTER</code> method currently does not support seeking");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>NULL</code> values, or operating with <code>NULLS FIRST</code>,");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>NULLS LAST</code> clauses in the <code>ORDER BY</code> clause.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see <a");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*      href=\"http://use-the-index-luke.com/sql/partial-results/fetch-next-page\">http://use-the-index-luke.com/sql/partial-results/fetch-next-page</a>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see <a");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*      href=\"http://blog.jooq.org/2013/10/26/faster-sql-paging-with-jooq-using-the-seek-method/\">http://blog.jooq.org/2013/10/26/faster-sql-paging-with-jooq-using-the-seek-method</a>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("SelectSeekLimitStep<R> seekAfter(");
        String _Field_TN_fieldn_1 = this.Field_TN_fieldn((degree).intValue());
        _builder.append(_Field_TN_fieldn_1, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Add a synthetic <code>SEEK BEFORE</code> clause to the query.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The synthetic <code>SEEK BEFORE</code> clause is an alternative way to specify");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* an <code>OFFSET</code>, and thus to perform paging in a SQL query. This");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* can be advantageous for two reasons:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <ol>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <li>The SQL generated from the <code>SEEK BEFORE</code> clause is a regular");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* predicate, which can be used by query plan optimisers to choose an");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* appropriate index. The SQL standard <code>OFFSET</code> clause will need");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* to skip <code>N</code> rows in memory.</li>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <li>The <code>SEEK BEFORE</code> clause is stable with respect to new data being");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* inserted or data being deleted while paging through pages.</li>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </ol>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Example: <code><pre>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* DSL.using(configuration)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .selectFrom(TABLE)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .orderBy(ID, CODE)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .seekBefore(3, \"abc\")");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .fetch();");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </pre></code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The above query will render the following SQL statement:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code><pre>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* SELECT * FROM table");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* WHERE (id, code) &lt; (3, \'abc\')");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* ORDER BY id ASC, code ASC");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </pre></code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The actual row value expression predicate may be expanded into this");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* equivalent predicate:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code><pre>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* WHERE (id &lt; 3) OR (id = 3 AND code &lt; \'abc\')");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </pre></code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The <code>SEEK BEFORE</code> method currently does not support seeking");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>NULL</code> values, or operating with <code>NULLS FIRST</code>,");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>NULLS LAST</code> clauses in the <code>ORDER BY</code> clause.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see <a");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*      href=\"http://use-the-index-luke.com/sql/partial-results/fetch-next-page\">http://use-the-index-luke.com/sql/partial-results/fetch-next-page</a>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see <a");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*      href=\"http://blog.jooq.org/2013/10/26/faster-sql-paging-with-jooq-using-the-seek-method/\">http://blog.jooq.org/2013/10/26/faster-sql-paging-with-jooq-using-the-seek-method</a>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("SelectSeekLimitStep<R> seekBefore(");
        String _TN_tn_2 = this.TN_tn((degree).intValue());
        _builder.append(_TN_tn_2, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Add a synthetic <code>SEEK BEFORE</code> clause to the query.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The synthetic <code>SEEK BEFORE</code> clause is an alternative way to specify");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* an <code>OFFSET</code>, and thus to perform paging in a SQL query. This");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* can be advantageous for two reasons:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <ol>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <li>The SQL generated from the <code>SEEK BEFORE</code> clause is a regular");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* predicate, which can be used by query plan optimisers to choose an");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* appropriate index. The SQL standard <code>OFFSET</code> clause will need");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* to skip <code>N</code> rows in memory.</li>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <li>The <code>SEEK BEFORE</code> clause is stable with respect to new data being");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* inserted or data being deleted while paging through pages.</li>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </ol>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Example: <code><pre>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* DSL.using(configuration)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .selectFrom(TABLE)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .orderBy(ID, CODE)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .seekBefore(3, \"abc\")");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*    .fetch();");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </pre></code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The above query will render the following SQL statement:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code><pre>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* SELECT * FROM table");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* WHERE (id, code) &lt; (3, \'abc\')");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* ORDER BY id ASC, code ASC");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </pre></code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The actual row value expression predicate may be expanded into this");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* equivalent predicate:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code><pre>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* WHERE (id &lt; 3) OR (id = 3 AND code &lt; \'abc\')");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </pre></code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* The <code>SEEK BEFORE</code> method currently does not support seeking");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>NULL</code> values, or operating with <code>NULLS FIRST</code>,");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>NULLS LAST</code> clauses in the <code>ORDER BY</code> clause.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see <a");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*      href=\"http://use-the-index-luke.com/sql/partial-results/fetch-next-page\">http://use-the-index-luke.com/sql/partial-results/fetch-next-page</a>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see <a");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*      href=\"http://blog.jooq.org/2013/10/26/faster-sql-paging-with-jooq-using-the-seek-method/\">http://blog.jooq.org/2013/10/26/faster-sql-paging-with-jooq-using-the-seek-method</a>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("SelectSeekLimitStep<R> seekBefore(");
        String _Field_TN_fieldn_2 = this.Field_TN_fieldn((degree).intValue());
        _builder.append(_Field_TN_fieldn_2, "    ");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
        out.append(_builder);
        this.write(("org.jooq.SelectSeekStep" + degree), out);
      }
    }
  }
}
