/**
 * Copyright (c) 2009-2015, Data Geekery GmbH (http://www.datageekery.com)
 * All rights reserved.
 * 
 * This work is dual-licensed
 * - under the Apache Software License 2.0 (the "ASL")
 * - under the jOOQ License and Maintenance Agreement (the "jOOQ License")
 * =============================================================================
 * You may choose which license applies to you:
 * 
 * - If you're using this work with Open Source databases, you may choose
 *   either ASL or jOOQ License.
 * - If you're using this work with at least one commercial database, you must
 *   choose jOOQ License
 * 
 * For more information, please visit http://www.jooq.org/licenses
 * 
 * Apache Software License 2.0:
 * -----------------------------------------------------------------------------
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *  http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * jOOQ License and Maintenance Agreement:
 * -----------------------------------------------------------------------------
 * Data Geekery grants the Customer the non-exclusive, timely limited and
 * non-transferable license to install and use the Software under the terms of
 * the jOOQ License and Maintenance Agreement.
 * 
 * This library is distributed with a LIMITED WARRANTY. See the jOOQ License
 * and Maintenance Agreement for more details: http://www.jooq.org/licensing
 */
package org.jooq.xtend;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.jooq.Constants;
import org.jooq.xtend.Generators;

/**
 * @author Lukas Eder
 */
@SuppressWarnings("all")
public class XtendConversions extends Generators {
  public static void main(final String[] args) {
    final XtendConversions conversions = new XtendConversions();
    conversions.generateConversions();
  }
  
  public void generateConversions() {
    final StringBuilder out = new StringBuilder();
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _classHeader = this.classHeader();
    _builder.append(_classHeader, "");
    _builder.newLineIfNotEmpty();
    _builder.append("package org.jooq.xtend");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.annotation.Generated");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.jooq.Condition");
    _builder.newLine();
    _builder.append("import org.jooq.Field");
    _builder.newLine();
    _builder.append("import org.jooq.QuantifiedSelect");
    _builder.newLine();
    {
      IntegerRange _upTo = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree : _upTo) {
        _builder.append("import org.jooq.Record");
        CharSequence _recTypeSuffixRaw = this.recTypeSuffixRaw((degree).intValue());
        _builder.append(_recTypeSuffixRaw, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("import org.jooq.Row");
    _builder.newLine();
    {
      IntegerRange _upTo_1 = new IntegerRange(0, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_1 : _upTo_1) {
        _builder.append("import org.jooq.Row");
        CharSequence _typeSuffixRaw = this.typeSuffixRaw((degree_1).intValue());
        _builder.append(_typeSuffixRaw, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("import org.jooq.Select");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.jooq.impl.DSL");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* jOOQ type conversions used to enhance the jOOQ Java API with Xtend operators.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author Lukas Eder");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @see <a href=\"http://www.eclipse.org/xtend/documentation.html#operators\">http://www.eclipse.org/xtend/documentation.html#operators</a>");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    CharSequence _generatedAnnotation = this.generatedAnnotation();
    _builder.append(_generatedAnnotation, "");
    _builder.newLineIfNotEmpty();
    _builder.append("class Conversions {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_or(Condition c1, Condition c2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("c1.or(c2);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_and(Condition c1, Condition c2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("c1.and(c2);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_tripleEquals(Field<T> f1, T f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.eq(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_tripleEquals(Field<T> f1, Field<T> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.eq(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_tripleEquals(Field<T> f1, Select<? extends Record1<T>> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.eq(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_tripleEquals(Field<T> f1, QuantifiedSelect<? extends Record1<T>> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.eq(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static operator_tripleEquals(RowN r1, RowN r2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("r1.eq(r2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static operator_tripleEquals(RowN r1, Record r2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("r1.eq(r2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static operator_tripleEquals(RowN r1, Select<? extends Record> r2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("r1.eq(r2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    {
      IntegerRange _upTo_2 = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_2 : _upTo_2) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("def static <");
        String _TN = this.TN((degree_2).intValue());
        _builder.append(_TN, "    ");
        _builder.append("> operator_tripleEquals(Row");
        CharSequence _typeSuffix = this.typeSuffix((degree_2).intValue());
        _builder.append(_typeSuffix, "    ");
        _builder.append(" r1, Row");
        CharSequence _typeSuffix_1 = this.typeSuffix((degree_2).intValue());
        _builder.append(_typeSuffix_1, "    ");
        _builder.append(" r2) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("r1.eq(r2)");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("def static <");
        String _TN_1 = this.TN((degree_2).intValue());
        _builder.append(_TN_1, "    ");
        _builder.append("> operator_tripleEquals(Row");
        CharSequence _typeSuffix_2 = this.typeSuffix((degree_2).intValue());
        _builder.append(_typeSuffix_2, "    ");
        _builder.append(" r1, Record");
        CharSequence _typeSuffix_3 = this.typeSuffix((degree_2).intValue());
        _builder.append(_typeSuffix_3, "    ");
        _builder.append(" r2) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("r1.eq(r2)");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("def static <");
        String _TN_2 = this.TN((degree_2).intValue());
        _builder.append(_TN_2, "    ");
        _builder.append("> operator_tripleEquals(Row");
        CharSequence _typeSuffix_4 = this.typeSuffix((degree_2).intValue());
        _builder.append(_typeSuffix_4, "    ");
        _builder.append(" r1, Select<? extends Record");
        CharSequence _typeSuffix_5 = this.typeSuffix((degree_2).intValue());
        _builder.append(_typeSuffix_5, "    ");
        _builder.append("> r2) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("r1.eq(r2)");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_tripleNotEquals(Field<T> f1, T f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.ne(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_tripleNotEquals(Field<T> f1, Field<T> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.ne(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_tripleNotEquals(Field<T> f1, Select<? extends Record1<T>> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.ne(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_tripleNotEquals(Field<T> f1, QuantifiedSelect<? extends Record1<T>> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.ne(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    {
      IntegerRange _upTo_3 = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_3 : _upTo_3) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("def static <");
        String _TN_3 = this.TN((degree_3).intValue());
        _builder.append(_TN_3, "    ");
        _builder.append("> operator_tripleNotEquals(Row");
        CharSequence _typeSuffix_6 = this.typeSuffix((degree_3).intValue());
        _builder.append(_typeSuffix_6, "    ");
        _builder.append(" r1, Row");
        CharSequence _typeSuffix_7 = this.typeSuffix((degree_3).intValue());
        _builder.append(_typeSuffix_7, "    ");
        _builder.append(" r2) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("r1.ne(r2)");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("def static <");
        String _TN_4 = this.TN((degree_3).intValue());
        _builder.append(_TN_4, "    ");
        _builder.append("> operator_tripleNotEquals(Row");
        CharSequence _typeSuffix_8 = this.typeSuffix((degree_3).intValue());
        _builder.append(_typeSuffix_8, "    ");
        _builder.append(" r1, Record");
        CharSequence _typeSuffix_9 = this.typeSuffix((degree_3).intValue());
        _builder.append(_typeSuffix_9, "    ");
        _builder.append(" r2) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("r1.ne(r2)");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("def static <");
        String _TN_5 = this.TN((degree_3).intValue());
        _builder.append(_TN_5, "    ");
        _builder.append("> operator_tripleNotEquals(Row");
        CharSequence _typeSuffix_10 = this.typeSuffix((degree_3).intValue());
        _builder.append(_typeSuffix_10, "    ");
        _builder.append(" r1, Select<? extends Record");
        CharSequence _typeSuffix_11 = this.typeSuffix((degree_3).intValue());
        _builder.append(_typeSuffix_11, "    ");
        _builder.append("> r2) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("r1.ne(r2)");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_lessThan(Field<T> f1, T f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.lt(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_lessThan(Field<T> f1, Field<T> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.lt(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_lessThan(Field<T> f1, Select<? extends Record1<T>> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.lt(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_lessThan(Field<T> f1, QuantifiedSelect<? extends Record1<T>> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.lt(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    {
      IntegerRange _upTo_4 = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_4 : _upTo_4) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("def static <");
        String _TN_6 = this.TN((degree_4).intValue());
        _builder.append(_TN_6, "    ");
        _builder.append("> operator_lessThan(Row");
        CharSequence _typeSuffix_12 = this.typeSuffix((degree_4).intValue());
        _builder.append(_typeSuffix_12, "    ");
        _builder.append(" r1, Row");
        CharSequence _typeSuffix_13 = this.typeSuffix((degree_4).intValue());
        _builder.append(_typeSuffix_13, "    ");
        _builder.append(" r2) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("r1.lt(r2)");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("def static <");
        String _TN_7 = this.TN((degree_4).intValue());
        _builder.append(_TN_7, "    ");
        _builder.append("> operator_lessThan(Row");
        CharSequence _typeSuffix_14 = this.typeSuffix((degree_4).intValue());
        _builder.append(_typeSuffix_14, "    ");
        _builder.append(" r1, Record");
        CharSequence _typeSuffix_15 = this.typeSuffix((degree_4).intValue());
        _builder.append(_typeSuffix_15, "    ");
        _builder.append(" r2) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("r1.lt(r2)");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("def static <");
        String _TN_8 = this.TN((degree_4).intValue());
        _builder.append(_TN_8, "    ");
        _builder.append("> operator_lessThan(Row");
        CharSequence _typeSuffix_16 = this.typeSuffix((degree_4).intValue());
        _builder.append(_typeSuffix_16, "    ");
        _builder.append(" r1, Select<? extends Record");
        CharSequence _typeSuffix_17 = this.typeSuffix((degree_4).intValue());
        _builder.append(_typeSuffix_17, "    ");
        _builder.append("> r2) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("r1.lt(r2)");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_greaterThan(Field<T> f1, T f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.gt(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_greaterThan(Field<T> f1, Field<T> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.gt(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_greaterThan(Field<T> f1, Select<? extends Record1<T>> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.gt(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_greaterThan(Field<T> f1, QuantifiedSelect<? extends Record1<T>> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.gt(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    {
      IntegerRange _upTo_5 = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_5 : _upTo_5) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("def static <");
        String _TN_9 = this.TN((degree_5).intValue());
        _builder.append(_TN_9, "    ");
        _builder.append("> operator_greaterThan(Row");
        CharSequence _typeSuffix_18 = this.typeSuffix((degree_5).intValue());
        _builder.append(_typeSuffix_18, "    ");
        _builder.append(" r1, Row");
        CharSequence _typeSuffix_19 = this.typeSuffix((degree_5).intValue());
        _builder.append(_typeSuffix_19, "    ");
        _builder.append(" r2) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("r1.gt(r2)");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("def static <");
        String _TN_10 = this.TN((degree_5).intValue());
        _builder.append(_TN_10, "    ");
        _builder.append("> operator_greaterThan(Row");
        CharSequence _typeSuffix_20 = this.typeSuffix((degree_5).intValue());
        _builder.append(_typeSuffix_20, "    ");
        _builder.append(" r1, Record");
        CharSequence _typeSuffix_21 = this.typeSuffix((degree_5).intValue());
        _builder.append(_typeSuffix_21, "    ");
        _builder.append(" r2) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("r1.gt(r2)");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("def static <");
        String _TN_11 = this.TN((degree_5).intValue());
        _builder.append(_TN_11, "    ");
        _builder.append("> operator_greaterThan(Row");
        CharSequence _typeSuffix_22 = this.typeSuffix((degree_5).intValue());
        _builder.append(_typeSuffix_22, "    ");
        _builder.append(" r1, Select<? extends Record");
        CharSequence _typeSuffix_23 = this.typeSuffix((degree_5).intValue());
        _builder.append(_typeSuffix_23, "    ");
        _builder.append("> r2) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("r1.gt(r2)");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_lessEqualsThan(Field<T> f1, T f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.le(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_lessEqualsThan(Field<T> f1, Field<T> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.le(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_lessEqualsThan(Field<T> f1, Select<? extends Record1<T>> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.le(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_lessEqualsThan(Field<T> f1, QuantifiedSelect<? extends Record1<T>> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.le(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    {
      IntegerRange _upTo_6 = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_6 : _upTo_6) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("def static <");
        String _TN_12 = this.TN((degree_6).intValue());
        _builder.append(_TN_12, "    ");
        _builder.append("> operator_lessEqualsThan(Row");
        CharSequence _typeSuffix_24 = this.typeSuffix((degree_6).intValue());
        _builder.append(_typeSuffix_24, "    ");
        _builder.append(" r1, Row");
        CharSequence _typeSuffix_25 = this.typeSuffix((degree_6).intValue());
        _builder.append(_typeSuffix_25, "    ");
        _builder.append(" r2) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("r1.le(r2)");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("def static <");
        String _TN_13 = this.TN((degree_6).intValue());
        _builder.append(_TN_13, "    ");
        _builder.append("> operator_lessEqualsThan(Row");
        CharSequence _typeSuffix_26 = this.typeSuffix((degree_6).intValue());
        _builder.append(_typeSuffix_26, "    ");
        _builder.append(" r1, Record");
        CharSequence _typeSuffix_27 = this.typeSuffix((degree_6).intValue());
        _builder.append(_typeSuffix_27, "    ");
        _builder.append(" r2) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("r1.le(r2)");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("def static <");
        String _TN_14 = this.TN((degree_6).intValue());
        _builder.append(_TN_14, "    ");
        _builder.append("> operator_lessEqualsThan(Row");
        CharSequence _typeSuffix_28 = this.typeSuffix((degree_6).intValue());
        _builder.append(_typeSuffix_28, "    ");
        _builder.append(" r1, Select<? extends Record");
        CharSequence _typeSuffix_29 = this.typeSuffix((degree_6).intValue());
        _builder.append(_typeSuffix_29, "    ");
        _builder.append("> r2) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("r1.le(r2)");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_greaterEqualsThan(Field<T> f1, T f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.ge(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_greaterEqualsThan(Field<T> f1, Field<T> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.ge(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_greaterEqualsThan(Field<T> f1, Select<? extends Record1<T>> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.ge(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_greaterEqualsThan(Field<T> f1, QuantifiedSelect<? extends Record1<T>> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.ge(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    {
      IntegerRange _upTo_7 = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
      for(final Integer degree_7 : _upTo_7) {
        _builder.newLine();
        _builder.append("    ");
        _builder.append("def static <");
        String _TN_15 = this.TN((degree_7).intValue());
        _builder.append(_TN_15, "    ");
        _builder.append("> operator_greaterEqualsThan(Row");
        CharSequence _typeSuffix_30 = this.typeSuffix((degree_7).intValue());
        _builder.append(_typeSuffix_30, "    ");
        _builder.append(" r1, Row");
        CharSequence _typeSuffix_31 = this.typeSuffix((degree_7).intValue());
        _builder.append(_typeSuffix_31, "    ");
        _builder.append(" r2) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("r1.ge(r2)");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("def static <");
        String _TN_16 = this.TN((degree_7).intValue());
        _builder.append(_TN_16, "    ");
        _builder.append("> operator_greaterEqualsThan(Row");
        CharSequence _typeSuffix_32 = this.typeSuffix((degree_7).intValue());
        _builder.append(_typeSuffix_32, "    ");
        _builder.append(" r1, Record");
        CharSequence _typeSuffix_33 = this.typeSuffix((degree_7).intValue());
        _builder.append(_typeSuffix_33, "    ");
        _builder.append(" r2) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("r1.ge(r2)");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("def static <");
        String _TN_17 = this.TN((degree_7).intValue());
        _builder.append(_TN_17, "    ");
        _builder.append("> operator_greaterEqualsThan(Row");
        CharSequence _typeSuffix_34 = this.typeSuffix((degree_7).intValue());
        _builder.append(_typeSuffix_34, "    ");
        _builder.append(" r1, Select<? extends Record");
        CharSequence _typeSuffix_35 = this.typeSuffix((degree_7).intValue());
        _builder.append(_typeSuffix_35, "    ");
        _builder.append("> r2) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("r1.ge(r2)");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static operator_upTo(Field<Integer> f1, Integer f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("DSL::generateSeries(f1, DSL::value(f2))");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static operator_upTo(Field<Integer> f1, Field<Integer> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("DSL::generateSeries(f1, f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T extends Number> operator_doubleLessThan(Field<T> f1, T f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("DSL::shl(f1, f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T extends Number> operator_doubleLessThan(Field<T> f1, Field<T> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("DSL::shl(f1, f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T extends Number> operator_doubleGreaterThan(Field<T> f1, T f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("DSL::shr(f1, f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T extends Number> operator_doubleGreaterThan(Field<T> f1, Field<T> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("DSL::shr(f1, f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_diamond(Field<T> f1, T f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.ne(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_elvis(Field<T> f1, T f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("DSL::nvl(f1, f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_elvis(Field<T> f1, Field<T> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("DSL::nvl(f1, f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_spaceship(Field<T> f1, T f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.isNotDistinctFrom(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_spaceship(Field<T> f1, Field<T> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.isNotDistinctFrom(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T extends Number> operator_plus(Field<T> f1, T f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.add(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T extends Number> operator_plus(Field<T> f1, Field<T> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.add(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T extends Number> operator_minus(Field<T> f1, T f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.sub(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T extends Number> operator_minus(Field<T> f1, Field<T> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.sub(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T extends Number> operator_multiply(Field<T> f1, T f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.mul(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T extends Number> operator_multiply(Field<T> f1, Field<T> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.mul(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T extends Number> operator_divide(Field<T> f1, T f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.div(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T extends Number> operator_divide(Field<T> f1, Field<T> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.div(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T extends Number> operator_modulo(Field<T> f1, T f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.mod(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T extends Number> operator_modulo(Field<T> f1, Field<T> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f1.mod(f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T extends Number> operator_power(Field<T> f1, T f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("DSL::power(f1, f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T extends Number> operator_power(Field<T> f1, Field<T> f2) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("DSL::power(f1, f2)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static operator_not(Condition c) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("c.not()");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("def static <T> operator_minus(Field<T> f) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("f.neg();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    out.append(_builder);
    this.write("org.jooq.xtend.Conversions", out);
  }
}
